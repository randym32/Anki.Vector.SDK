// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: anki_vector/messaging/shared.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Anki.Vector.ExternalInterface {

  /// <summary>Holder for reflection information generated from anki_vector/messaging/shared.proto</summary>
  public static partial class SharedReflection {

    #region Descriptor
    /// <summary>File descriptor for anki_vector/messaging/shared.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SharedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJhbmtpX3ZlY3Rvci9tZXNzYWdpbmcvc2hhcmVkLnByb3RvEh5BbmtpLlZl",
            "Y3Rvci5leHRlcm5hbF9pbnRlcmZhY2UaJGFua2lfdmVjdG9yL21lc3NhZ2lu",
            "Zy9iZWhhdmlvci5wcm90bxogYW5raV92ZWN0b3IvbWVzc2FnaW5nL2N1YmUu",
            "cHJvdG8aIWFua2lfdmVjdG9yL21lc3NhZ2luZy9hbGV4YS5wcm90bxokYW5r",
            "aV92ZWN0b3IvbWVzc2FnaW5nL21lc3NhZ2VzLnByb3RvGiRhbmtpX3ZlY3Rv",
            "ci9tZXNzYWdpbmcvc2V0dGluZ3MucHJvdG8aJmFua2lfdmVjdG9yL21lc3Nh",
            "Z2luZy9leHRlbnNpb25zLnByb3RvGithbmtpX3ZlY3Rvci9tZXNzYWdpbmcv",
            "cmVzcG9uc2Vfc3RhdHVzLnByb3RvIkoKFlByb3RvY29sVmVyc2lvblJlcXVl",
            "c3QSFgoOY2xpZW50X3ZlcnNpb24YASABKAMSGAoQbWluX2hvc3RfdmVyc2lv",
            "bhgCIAEoAyKnAQoXUHJvdG9jb2xWZXJzaW9uUmVzcG9uc2USTgoGcmVzdWx0",
            "GAEgASgOMj4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlByb3Rv",
            "Y29sVmVyc2lvblJlc3BvbnNlLlJlc3VsdBIUCgxob3N0X3ZlcnNpb24YAiAB",
            "KAMiJgoGUmVzdWx0Eg8KC1VOU1VQUE9SVEVEEAASCwoHU1VDQ0VTUxABImgK",
            "EkNvbm5lY3Rpb25SZXNwb25zZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZl",
            "Y3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0dXMSEgoKaXNf",
            "cHJpbWFyeRgCIAEoCCLRDgoFRXZlbnQSUAoTdGltZV9zdGFtcGVkX3N0YXR1",
            "cxgBIAEoCzIxLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5UaW1l",
            "U3RhbXBlZFN0YXR1c0gAEj0KCXdha2Vfd29yZBgDIAEoCzIoLkFua2kuVmVj",
            "dG9yLmV4dGVybmFsX2ludGVyZmFjZS5XYWtlV29yZEgAEk8KEmF0dGVudGlv",
            "bl90cmFuc2ZlchgEIAEoCzIxLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVy",
            "ZmFjZS5BdHRlbnRpb25UcmFuc2ZlckgAElAKE3JvYm90X29ic2VydmVkX2Zh",
            "Y2UYBSABKAsyMS5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUm9i",
            "b3RPYnNlcnZlZEZhY2VIABJkCh5yb2JvdF9jaGFuZ2VkX29ic2VydmVkX2Zh",
            "Y2VfaWQYBiABKAsyOi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2Uu",
            "Um9ib3RDaGFuZ2VkT2JzZXJ2ZWRGYWNlSURIABJDCgxvYmplY3RfZXZlbnQY",
            "ByABKAsyKy5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuT2JqZWN0",
            "RXZlbnRIABJLChBzdGltdWxhdGlvbl9pbmZvGAggASgLMi8uQW5raS5WZWN0",
            "b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlN0aW11bGF0aW9uSW5mb0gAEkEKC3Bo",
            "b3RvX3Rha2VuGAkgASgLMiouQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJm",
            "YWNlLlBob3RvVGFrZW5IABJBCgtyb2JvdF9zdGF0ZRgKIAEoCzIqLkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5Sb2JvdFN0YXRlSAASQwoMY3Vi",
            "ZV9iYXR0ZXJ5GAsgASgLMisuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJm",
            "YWNlLkN1YmVCYXR0ZXJ5SAASQwoKa2VlcF9hbGl2ZRgMIAEoCzItLkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5LZWVwQWxpdmVQaW5nSAASUQoT",
            "Y29ubmVjdGlvbl9yZXNwb25zZRgNIAEoCzIyLkFua2kuVmVjdG9yLmV4dGVy",
            "bmFsX2ludGVyZmFjZS5Db25uZWN0aW9uUmVzcG9uc2VIABJFCg1qZG9jc19j",
            "aGFuZ2VkGA4gASgLMiwuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNl",
            "Lkpkb2NzQ2hhbmdlZEgAEkoKEGFsZXhhX2F1dGhfZXZlbnQYDyABKAsyLi5B",
            "bmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQWxleGFBdXRoRXZlbnRI",
            "ABJSChRtaXJyb3JfbW9kZV9kaXNhYmxlZBgQIAEoCzIyLkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5NaXJyb3JNb2RlRGlzYWJsZWRIABJdChp2",
            "aXNpb25fbW9kZXNfYXV0b19kaXNhYmxlZBgRIAEoCzI3LkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5WaXNpb25Nb2Rlc0F1dG9EaXNhYmxlZEgA",
            "EmEKHGNoZWNrX3VwZGF0ZV9zdGF0dXNfcmVzcG9uc2UYEiABKAsyOS5Bbmtp",
            "LlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQ2hlY2tVcGRhdGVTdGF0dXNS",
            "ZXNwb25zZUgAEkEKC3VzZXJfaW50ZW50GBMgASgLMiouQW5raS5WZWN0b3Iu",
            "ZXh0ZXJuYWxfaW50ZXJmYWNlLlVzZXJJbnRlbnRIABJUChVyb2JvdF9vYnNl",
            "cnZlZF9tb3Rpb24YFCABKAsyMy5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRl",
            "cmZhY2UuUm9ib3RPYnNlcnZlZE1vdGlvbkgAEl0KGnJvYm90X2VyYXNlZF9l",
            "bnJvbGxlZF9mYWNlGBUgASgLMjcuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50",
            "ZXJmYWNlLlJvYm90RXJhc2VkRW5yb2xsZWRGYWNlSAASXwobcm9ib3RfcmVu",
            "YW1lZF9lbnJvbGxlZF9mYWNlGBYgASgLMjguQW5raS5WZWN0b3IuZXh0ZXJu",
            "YWxfaW50ZXJmYWNlLlJvYm90UmVuYW1lZEVucm9sbGVkRmFjZUgAElYKFmNh",
            "bWVyYV9zZXR0aW5nc191cGRhdGUYFyABKAsyNC5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuQ2FtZXJhU2V0dGluZ3NVcGRhdGVIABJRChN1bmV4",
            "cGVjdGVkX21vdmVtZW50GBggASgLMjIuQW5raS5WZWN0b3IuZXh0ZXJuYWxf",
            "aW50ZXJmYWNlLlVuZXhwZWN0ZWRNb3ZlbWVudEgAQgwKCmV2ZW50X3R5cGUi",
            "GgoKRmlsdGVyTGlzdBIMCgRsaXN0GAEgAygJIrYBCgxFdmVudFJlcXVlc3QS",
            "QAoKd2hpdGVfbGlzdBgBIAEoCzIqLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5GaWx0ZXJMaXN0SAASQAoKYmxhY2tfbGlzdBgCIAEoCzIqLkFu",
            "a2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5GaWx0ZXJMaXN0SAASFQoN",
            "Y29ubmVjdGlvbl9pZBgDIAEoCUILCglsaXN0X3R5cGUiiwEKDUV2ZW50UmVz",
            "cG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxf",
            "aW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzEjQKBWV2ZW50GAIgASgLMiUuQW5r",
            "aS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkV2ZW50OgSAph0BIkkKGVVz",
            "ZXJBdXRoZW50aWNhdGlvblJlcXVlc3QSFwoPdXNlcl9zZXNzaW9uX2lkGAEg",
            "ASgMEhMKC2NsaWVudF9uYW1lGAIgASgMIvABChpVc2VyQXV0aGVudGljYXRp",
            "b25SZXNwb25zZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0dXMSTQoEY29kZRgCIAEoDjI/",
            "LkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5Vc2VyQXV0aGVudGlj",
            "YXRpb25SZXNwb25zZS5Db2RlEhkKEWNsaWVudF90b2tlbl9ndWlkGAMgASgM",
            "IigKBENvZGUSEAoMVU5BVVRIT1JJWkVEEAASDgoKQVVUSE9SSVpFRBABYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor, global::Anki.Vector.ExternalInterface.CubeReflection.Descriptor, global::Anki.Vector.ExternalInterface.AlexaReflection.Descriptor, global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor, global::Anki.Vector.ExternalInterface.SettingsReflection.Descriptor, global::Anki.Vector.ExternalInterface.ExtensionsReflection.Descriptor, global::Anki.Vector.ExternalInterface.ResponseStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ProtocolVersionRequest), global::Anki.Vector.ExternalInterface.ProtocolVersionRequest.Parser, new[]{ "ClientVersion", "MinHostVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ProtocolVersionResponse), global::Anki.Vector.ExternalInterface.ProtocolVersionResponse.Parser, new[]{ "Result", "HostVersion" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.ProtocolVersionResponse.Types.Result) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ConnectionResponse), global::Anki.Vector.ExternalInterface.ConnectionResponse.Parser, new[]{ "Status", "IsPrimary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.Event), global::Anki.Vector.ExternalInterface.Event.Parser, new[]{ "TimeStampedStatus", "WakeWord", "AttentionTransfer", "RobotObservedFace", "RobotChangedObservedFaceId", "ObjectEvent", "StimulationInfo", "PhotoTaken", "RobotState", "CubeBattery", "KeepAlive", "ConnectionResponse", "JdocsChanged", "AlexaAuthEvent", "MirrorModeDisabled", "VisionModesAutoDisabled", "CheckUpdateStatusResponse", "UserIntent", "RobotObservedMotion", "RobotErasedEnrolledFace", "RobotRenamedEnrolledFace", "CameraSettingsUpdate", "UnexpectedMovement" }, new[]{ "EventType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.FilterList), global::Anki.Vector.ExternalInterface.FilterList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EventRequest), global::Anki.Vector.ExternalInterface.EventRequest.Parser, new[]{ "WhiteList", "BlackList", "ConnectionId" }, new[]{ "ListType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EventResponse), global::Anki.Vector.ExternalInterface.EventResponse.Parser, new[]{ "Status", "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UserAuthenticationRequest), global::Anki.Vector.ExternalInterface.UserAuthenticationRequest.Parser, new[]{ "UserSessionId", "ClientName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UserAuthenticationResponse), global::Anki.Vector.ExternalInterface.UserAuthenticationResponse.Parser, new[]{ "Status", "Code", "ClientTokenGuid" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.UserAuthenticationResponse.Types.Code) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProtocolVersionRequest : pb::IMessage<ProtocolVersionRequest> {
    private static readonly pb::MessageParser<ProtocolVersionRequest> _parser = new pb::MessageParser<ProtocolVersionRequest>(() => new ProtocolVersionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtocolVersionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolVersionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolVersionRequest(ProtocolVersionRequest other) : this() {
      clientVersion_ = other.clientVersion_;
      minHostVersion_ = other.minHostVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolVersionRequest Clone() {
      return new ProtocolVersionRequest(this);
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 1;
    private long clientVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "min_host_version" field.</summary>
    public const int MinHostVersionFieldNumber = 2;
    private long minHostVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHostVersion {
      get { return minHostVersion_; }
      set {
        minHostVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtocolVersionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtocolVersionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (MinHostVersion != other.MinHostVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion != 0L) hash ^= ClientVersion.GetHashCode();
      if (MinHostVersion != 0L) hash ^= MinHostVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientVersion);
      }
      if (MinHostVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinHostVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientVersion);
      }
      if (MinHostVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHostVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtocolVersionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion != 0L) {
        ClientVersion = other.ClientVersion;
      }
      if (other.MinHostVersion != 0L) {
        MinHostVersion = other.MinHostVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientVersion = input.ReadInt64();
            break;
          }
          case 16: {
            MinHostVersion = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtocolVersionResponse : pb::IMessage<ProtocolVersionResponse> {
    private static readonly pb::MessageParser<ProtocolVersionResponse> _parser = new pb::MessageParser<ProtocolVersionResponse>(() => new ProtocolVersionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtocolVersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolVersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolVersionResponse(ProtocolVersionResponse other) : this() {
      result_ = other.result_;
      hostVersion_ = other.hostVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolVersionResponse Clone() {
      return new ProtocolVersionResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ProtocolVersionResponse.Types.Result result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ProtocolVersionResponse.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "host_version" field.</summary>
    public const int HostVersionFieldNumber = 2;
    private long hostVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HostVersion {
      get { return hostVersion_; }
      set {
        hostVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtocolVersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtocolVersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (HostVersion != other.HostVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (HostVersion != 0L) hash ^= HostVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (HostVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HostVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (HostVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HostVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtocolVersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.HostVersion != 0L) {
        HostVersion = other.HostVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            result_ = (global::Anki.Vector.ExternalInterface.ProtocolVersionResponse.Types.Result) input.ReadEnum();
            break;
          }
          case 16: {
            HostVersion = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ProtocolVersionResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Result {
        [pbr::OriginalName("UNSUPPORTED")] Unsupported = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
      }

    }
    #endregion

  }

  public sealed partial class ConnectionResponse : pb::IMessage<ConnectionResponse> {
    private static readonly pb::MessageParser<ConnectionResponse> _parser = new pb::MessageParser<ConnectionResponse>(() => new ConnectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse(ConnectionResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      isPrimary_ = other.isPrimary_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse Clone() {
      return new ConnectionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "is_primary" field.</summary>
    public const int IsPrimaryFieldNumber = 2;
    private bool isPrimary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrimary {
      get { return isPrimary_; }
      set {
        isPrimary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (IsPrimary != other.IsPrimary) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (IsPrimary != false) hash ^= IsPrimary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (IsPrimary != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPrimary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (IsPrimary != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.IsPrimary != false) {
        IsPrimary = other.IsPrimary;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            IsPrimary = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Messages originating from the engine
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      switch (other.EventTypeCase) {
        case EventTypeOneofCase.TimeStampedStatus:
          TimeStampedStatus = other.TimeStampedStatus.Clone();
          break;
        case EventTypeOneofCase.WakeWord:
          WakeWord = other.WakeWord.Clone();
          break;
        case EventTypeOneofCase.AttentionTransfer:
          AttentionTransfer = other.AttentionTransfer.Clone();
          break;
        case EventTypeOneofCase.RobotObservedFace:
          RobotObservedFace = other.RobotObservedFace.Clone();
          break;
        case EventTypeOneofCase.RobotChangedObservedFaceId:
          RobotChangedObservedFaceId = other.RobotChangedObservedFaceId.Clone();
          break;
        case EventTypeOneofCase.ObjectEvent:
          ObjectEvent = other.ObjectEvent.Clone();
          break;
        case EventTypeOneofCase.StimulationInfo:
          StimulationInfo = other.StimulationInfo.Clone();
          break;
        case EventTypeOneofCase.PhotoTaken:
          PhotoTaken = other.PhotoTaken.Clone();
          break;
        case EventTypeOneofCase.RobotState:
          RobotState = other.RobotState.Clone();
          break;
        case EventTypeOneofCase.CubeBattery:
          CubeBattery = other.CubeBattery.Clone();
          break;
        case EventTypeOneofCase.KeepAlive:
          KeepAlive = other.KeepAlive.Clone();
          break;
        case EventTypeOneofCase.ConnectionResponse:
          ConnectionResponse = other.ConnectionResponse.Clone();
          break;
        case EventTypeOneofCase.JdocsChanged:
          JdocsChanged = other.JdocsChanged.Clone();
          break;
        case EventTypeOneofCase.AlexaAuthEvent:
          AlexaAuthEvent = other.AlexaAuthEvent.Clone();
          break;
        case EventTypeOneofCase.MirrorModeDisabled:
          MirrorModeDisabled = other.MirrorModeDisabled.Clone();
          break;
        case EventTypeOneofCase.VisionModesAutoDisabled:
          VisionModesAutoDisabled = other.VisionModesAutoDisabled.Clone();
          break;
        case EventTypeOneofCase.CheckUpdateStatusResponse:
          CheckUpdateStatusResponse = other.CheckUpdateStatusResponse.Clone();
          break;
        case EventTypeOneofCase.UserIntent:
          UserIntent = other.UserIntent.Clone();
          break;
        case EventTypeOneofCase.RobotObservedMotion:
          RobotObservedMotion = other.RobotObservedMotion.Clone();
          break;
        case EventTypeOneofCase.RobotErasedEnrolledFace:
          RobotErasedEnrolledFace = other.RobotErasedEnrolledFace.Clone();
          break;
        case EventTypeOneofCase.RobotRenamedEnrolledFace:
          RobotRenamedEnrolledFace = other.RobotRenamedEnrolledFace.Clone();
          break;
        case EventTypeOneofCase.CameraSettingsUpdate:
          CameraSettingsUpdate = other.CameraSettingsUpdate.Clone();
          break;
        case EventTypeOneofCase.UnexpectedMovement:
          UnexpectedMovement = other.UnexpectedMovement.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "time_stamped_status" field.</summary>
    public const int TimeStampedStatusFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.TimeStampedStatus TimeStampedStatus {
      get { return eventTypeCase_ == EventTypeOneofCase.TimeStampedStatus ? (global::Anki.Vector.ExternalInterface.TimeStampedStatus) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.TimeStampedStatus;
      }
    }

    /// <summary>Field number for the "wake_word" field.</summary>
    public const int WakeWordFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.WakeWord WakeWord {
      get { return eventTypeCase_ == EventTypeOneofCase.WakeWord ? (global::Anki.Vector.ExternalInterface.WakeWord) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.WakeWord;
      }
    }

    /// <summary>Field number for the "attention_transfer" field.</summary>
    public const int AttentionTransferFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AttentionTransfer AttentionTransfer {
      get { return eventTypeCase_ == EventTypeOneofCase.AttentionTransfer ? (global::Anki.Vector.ExternalInterface.AttentionTransfer) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.AttentionTransfer;
      }
    }

    /// <summary>Field number for the "robot_observed_face" field.</summary>
    public const int RobotObservedFaceFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotObservedFace RobotObservedFace {
      get { return eventTypeCase_ == EventTypeOneofCase.RobotObservedFace ? (global::Anki.Vector.ExternalInterface.RobotObservedFace) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.RobotObservedFace;
      }
    }

    /// <summary>Field number for the "robot_changed_observed_face_id" field.</summary>
    public const int RobotChangedObservedFaceIdFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID RobotChangedObservedFaceId {
      get { return eventTypeCase_ == EventTypeOneofCase.RobotChangedObservedFaceId ? (global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.RobotChangedObservedFaceId;
      }
    }

    /// <summary>Field number for the "object_event" field.</summary>
    public const int ObjectEventFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ObjectEvent ObjectEvent {
      get { return eventTypeCase_ == EventTypeOneofCase.ObjectEvent ? (global::Anki.Vector.ExternalInterface.ObjectEvent) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.ObjectEvent;
      }
    }

    /// <summary>Field number for the "stimulation_info" field.</summary>
    public const int StimulationInfoFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.StimulationInfo StimulationInfo {
      get { return eventTypeCase_ == EventTypeOneofCase.StimulationInfo ? (global::Anki.Vector.ExternalInterface.StimulationInfo) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.StimulationInfo;
      }
    }

    /// <summary>Field number for the "photo_taken" field.</summary>
    public const int PhotoTakenFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PhotoTaken PhotoTaken {
      get { return eventTypeCase_ == EventTypeOneofCase.PhotoTaken ? (global::Anki.Vector.ExternalInterface.PhotoTaken) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.PhotoTaken;
      }
    }

    /// <summary>Field number for the "robot_state" field.</summary>
    public const int RobotStateFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotState RobotState {
      get { return eventTypeCase_ == EventTypeOneofCase.RobotState ? (global::Anki.Vector.ExternalInterface.RobotState) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.RobotState;
      }
    }

    /// <summary>Field number for the "cube_battery" field.</summary>
    public const int CubeBatteryFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CubeBattery CubeBattery {
      get { return eventTypeCase_ == EventTypeOneofCase.CubeBattery ? (global::Anki.Vector.ExternalInterface.CubeBattery) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.CubeBattery;
      }
    }

    /// <summary>Field number for the "keep_alive" field.</summary>
    public const int KeepAliveFieldNumber = 12;
    /// <summary>
    /// Used by Vector to verify the connection is still alive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.KeepAlivePing KeepAlive {
      get { return eventTypeCase_ == EventTypeOneofCase.KeepAlive ? (global::Anki.Vector.ExternalInterface.KeepAlivePing) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.KeepAlive;
      }
    }

    /// <summary>Field number for the "connection_response" field.</summary>
    public const int ConnectionResponseFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ConnectionResponse ConnectionResponse {
      get { return eventTypeCase_ == EventTypeOneofCase.ConnectionResponse ? (global::Anki.Vector.ExternalInterface.ConnectionResponse) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.ConnectionResponse;
      }
    }

    /// <summary>Field number for the "jdocs_changed" field.</summary>
    public const int JdocsChangedFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.JdocsChanged JdocsChanged {
      get { return eventTypeCase_ == EventTypeOneofCase.JdocsChanged ? (global::Anki.Vector.ExternalInterface.JdocsChanged) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.JdocsChanged;
      }
    }

    /// <summary>Field number for the "alexa_auth_event" field.</summary>
    public const int AlexaAuthEventFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AlexaAuthEvent AlexaAuthEvent {
      get { return eventTypeCase_ == EventTypeOneofCase.AlexaAuthEvent ? (global::Anki.Vector.ExternalInterface.AlexaAuthEvent) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.AlexaAuthEvent;
      }
    }

    /// <summary>Field number for the "mirror_mode_disabled" field.</summary>
    public const int MirrorModeDisabledFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.MirrorModeDisabled MirrorModeDisabled {
      get { return eventTypeCase_ == EventTypeOneofCase.MirrorModeDisabled ? (global::Anki.Vector.ExternalInterface.MirrorModeDisabled) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.MirrorModeDisabled;
      }
    }

    /// <summary>Field number for the "vision_modes_auto_disabled" field.</summary>
    public const int VisionModesAutoDisabledFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled VisionModesAutoDisabled {
      get { return eventTypeCase_ == EventTypeOneofCase.VisionModesAutoDisabled ? (global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.VisionModesAutoDisabled;
      }
    }

    /// <summary>Field number for the "check_update_status_response" field.</summary>
    public const int CheckUpdateStatusResponseFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CheckUpdateStatusResponse CheckUpdateStatusResponse {
      get { return eventTypeCase_ == EventTypeOneofCase.CheckUpdateStatusResponse ? (global::Anki.Vector.ExternalInterface.CheckUpdateStatusResponse) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.CheckUpdateStatusResponse;
      }
    }

    /// <summary>Field number for the "user_intent" field.</summary>
    public const int UserIntentFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.UserIntent UserIntent {
      get { return eventTypeCase_ == EventTypeOneofCase.UserIntent ? (global::Anki.Vector.ExternalInterface.UserIntent) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.UserIntent;
      }
    }

    /// <summary>Field number for the "robot_observed_motion" field.</summary>
    public const int RobotObservedMotionFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotObservedMotion RobotObservedMotion {
      get { return eventTypeCase_ == EventTypeOneofCase.RobotObservedMotion ? (global::Anki.Vector.ExternalInterface.RobotObservedMotion) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.RobotObservedMotion;
      }
    }

    /// <summary>Field number for the "robot_erased_enrolled_face" field.</summary>
    public const int RobotErasedEnrolledFaceFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotErasedEnrolledFace RobotErasedEnrolledFace {
      get { return eventTypeCase_ == EventTypeOneofCase.RobotErasedEnrolledFace ? (global::Anki.Vector.ExternalInterface.RobotErasedEnrolledFace) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.RobotErasedEnrolledFace;
      }
    }

    /// <summary>Field number for the "robot_renamed_enrolled_face" field.</summary>
    public const int RobotRenamedEnrolledFaceFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace RobotRenamedEnrolledFace {
      get { return eventTypeCase_ == EventTypeOneofCase.RobotRenamedEnrolledFace ? (global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.RobotRenamedEnrolledFace;
      }
    }

    /// <summary>Field number for the "camera_settings_update" field.</summary>
    public const int CameraSettingsUpdateFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CameraSettingsUpdate CameraSettingsUpdate {
      get { return eventTypeCase_ == EventTypeOneofCase.CameraSettingsUpdate ? (global::Anki.Vector.ExternalInterface.CameraSettingsUpdate) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.CameraSettingsUpdate;
      }
    }

    /// <summary>Field number for the "unexpected_movement" field.</summary>
    public const int UnexpectedMovementFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.UnexpectedMovement UnexpectedMovement {
      get { return eventTypeCase_ == EventTypeOneofCase.UnexpectedMovement ? (global::Anki.Vector.ExternalInterface.UnexpectedMovement) eventType_ : null; }
      set {
        eventType_ = value;
        eventTypeCase_ = value == null ? EventTypeOneofCase.None : EventTypeOneofCase.UnexpectedMovement;
      }
    }

    private object eventType_;
    /// <summary>Enum of possible cases for the "event_type" oneof.</summary>
    public enum EventTypeOneofCase {
      None = 0,
      TimeStampedStatus = 1,
      WakeWord = 3,
      AttentionTransfer = 4,
      RobotObservedFace = 5,
      RobotChangedObservedFaceId = 6,
      ObjectEvent = 7,
      StimulationInfo = 8,
      PhotoTaken = 9,
      RobotState = 10,
      CubeBattery = 11,
      KeepAlive = 12,
      ConnectionResponse = 13,
      JdocsChanged = 14,
      AlexaAuthEvent = 15,
      MirrorModeDisabled = 16,
      VisionModesAutoDisabled = 17,
      CheckUpdateStatusResponse = 18,
      UserIntent = 19,
      RobotObservedMotion = 20,
      RobotErasedEnrolledFace = 21,
      RobotRenamedEnrolledFace = 22,
      CameraSettingsUpdate = 23,
      UnexpectedMovement = 24,
    }
    private EventTypeOneofCase eventTypeCase_ = EventTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypeOneofCase EventTypeCase {
      get { return eventTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventType() {
      eventTypeCase_ = EventTypeOneofCase.None;
      eventType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimeStampedStatus, other.TimeStampedStatus)) return false;
      if (!object.Equals(WakeWord, other.WakeWord)) return false;
      if (!object.Equals(AttentionTransfer, other.AttentionTransfer)) return false;
      if (!object.Equals(RobotObservedFace, other.RobotObservedFace)) return false;
      if (!object.Equals(RobotChangedObservedFaceId, other.RobotChangedObservedFaceId)) return false;
      if (!object.Equals(ObjectEvent, other.ObjectEvent)) return false;
      if (!object.Equals(StimulationInfo, other.StimulationInfo)) return false;
      if (!object.Equals(PhotoTaken, other.PhotoTaken)) return false;
      if (!object.Equals(RobotState, other.RobotState)) return false;
      if (!object.Equals(CubeBattery, other.CubeBattery)) return false;
      if (!object.Equals(KeepAlive, other.KeepAlive)) return false;
      if (!object.Equals(ConnectionResponse, other.ConnectionResponse)) return false;
      if (!object.Equals(JdocsChanged, other.JdocsChanged)) return false;
      if (!object.Equals(AlexaAuthEvent, other.AlexaAuthEvent)) return false;
      if (!object.Equals(MirrorModeDisabled, other.MirrorModeDisabled)) return false;
      if (!object.Equals(VisionModesAutoDisabled, other.VisionModesAutoDisabled)) return false;
      if (!object.Equals(CheckUpdateStatusResponse, other.CheckUpdateStatusResponse)) return false;
      if (!object.Equals(UserIntent, other.UserIntent)) return false;
      if (!object.Equals(RobotObservedMotion, other.RobotObservedMotion)) return false;
      if (!object.Equals(RobotErasedEnrolledFace, other.RobotErasedEnrolledFace)) return false;
      if (!object.Equals(RobotRenamedEnrolledFace, other.RobotRenamedEnrolledFace)) return false;
      if (!object.Equals(CameraSettingsUpdate, other.CameraSettingsUpdate)) return false;
      if (!object.Equals(UnexpectedMovement, other.UnexpectedMovement)) return false;
      if (EventTypeCase != other.EventTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventTypeCase_ == EventTypeOneofCase.TimeStampedStatus) hash ^= TimeStampedStatus.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.WakeWord) hash ^= WakeWord.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.AttentionTransfer) hash ^= AttentionTransfer.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.RobotObservedFace) hash ^= RobotObservedFace.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.RobotChangedObservedFaceId) hash ^= RobotChangedObservedFaceId.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.ObjectEvent) hash ^= ObjectEvent.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.StimulationInfo) hash ^= StimulationInfo.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.PhotoTaken) hash ^= PhotoTaken.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.RobotState) hash ^= RobotState.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.CubeBattery) hash ^= CubeBattery.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.KeepAlive) hash ^= KeepAlive.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.ConnectionResponse) hash ^= ConnectionResponse.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.JdocsChanged) hash ^= JdocsChanged.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.AlexaAuthEvent) hash ^= AlexaAuthEvent.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.MirrorModeDisabled) hash ^= MirrorModeDisabled.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.VisionModesAutoDisabled) hash ^= VisionModesAutoDisabled.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.CheckUpdateStatusResponse) hash ^= CheckUpdateStatusResponse.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.UserIntent) hash ^= UserIntent.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.RobotObservedMotion) hash ^= RobotObservedMotion.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.RobotErasedEnrolledFace) hash ^= RobotErasedEnrolledFace.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.RobotRenamedEnrolledFace) hash ^= RobotRenamedEnrolledFace.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.CameraSettingsUpdate) hash ^= CameraSettingsUpdate.GetHashCode();
      if (eventTypeCase_ == EventTypeOneofCase.UnexpectedMovement) hash ^= UnexpectedMovement.GetHashCode();
      hash ^= (int) eventTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventTypeCase_ == EventTypeOneofCase.TimeStampedStatus) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeStampedStatus);
      }
      if (eventTypeCase_ == EventTypeOneofCase.WakeWord) {
        output.WriteRawTag(26);
        output.WriteMessage(WakeWord);
      }
      if (eventTypeCase_ == EventTypeOneofCase.AttentionTransfer) {
        output.WriteRawTag(34);
        output.WriteMessage(AttentionTransfer);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotObservedFace) {
        output.WriteRawTag(42);
        output.WriteMessage(RobotObservedFace);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotChangedObservedFaceId) {
        output.WriteRawTag(50);
        output.WriteMessage(RobotChangedObservedFaceId);
      }
      if (eventTypeCase_ == EventTypeOneofCase.ObjectEvent) {
        output.WriteRawTag(58);
        output.WriteMessage(ObjectEvent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.StimulationInfo) {
        output.WriteRawTag(66);
        output.WriteMessage(StimulationInfo);
      }
      if (eventTypeCase_ == EventTypeOneofCase.PhotoTaken) {
        output.WriteRawTag(74);
        output.WriteMessage(PhotoTaken);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotState) {
        output.WriteRawTag(82);
        output.WriteMessage(RobotState);
      }
      if (eventTypeCase_ == EventTypeOneofCase.CubeBattery) {
        output.WriteRawTag(90);
        output.WriteMessage(CubeBattery);
      }
      if (eventTypeCase_ == EventTypeOneofCase.KeepAlive) {
        output.WriteRawTag(98);
        output.WriteMessage(KeepAlive);
      }
      if (eventTypeCase_ == EventTypeOneofCase.ConnectionResponse) {
        output.WriteRawTag(106);
        output.WriteMessage(ConnectionResponse);
      }
      if (eventTypeCase_ == EventTypeOneofCase.JdocsChanged) {
        output.WriteRawTag(114);
        output.WriteMessage(JdocsChanged);
      }
      if (eventTypeCase_ == EventTypeOneofCase.AlexaAuthEvent) {
        output.WriteRawTag(122);
        output.WriteMessage(AlexaAuthEvent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.MirrorModeDisabled) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MirrorModeDisabled);
      }
      if (eventTypeCase_ == EventTypeOneofCase.VisionModesAutoDisabled) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(VisionModesAutoDisabled);
      }
      if (eventTypeCase_ == EventTypeOneofCase.CheckUpdateStatusResponse) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CheckUpdateStatusResponse);
      }
      if (eventTypeCase_ == EventTypeOneofCase.UserIntent) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(UserIntent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotObservedMotion) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(RobotObservedMotion);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotErasedEnrolledFace) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(RobotErasedEnrolledFace);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotRenamedEnrolledFace) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RobotRenamedEnrolledFace);
      }
      if (eventTypeCase_ == EventTypeOneofCase.CameraSettingsUpdate) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(CameraSettingsUpdate);
      }
      if (eventTypeCase_ == EventTypeOneofCase.UnexpectedMovement) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(UnexpectedMovement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventTypeCase_ == EventTypeOneofCase.TimeStampedStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeStampedStatus);
      }
      if (eventTypeCase_ == EventTypeOneofCase.WakeWord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WakeWord);
      }
      if (eventTypeCase_ == EventTypeOneofCase.AttentionTransfer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttentionTransfer);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotObservedFace) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotObservedFace);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotChangedObservedFaceId) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotChangedObservedFaceId);
      }
      if (eventTypeCase_ == EventTypeOneofCase.ObjectEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectEvent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.StimulationInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StimulationInfo);
      }
      if (eventTypeCase_ == EventTypeOneofCase.PhotoTaken) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhotoTaken);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotState);
      }
      if (eventTypeCase_ == EventTypeOneofCase.CubeBattery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CubeBattery);
      }
      if (eventTypeCase_ == EventTypeOneofCase.KeepAlive) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeepAlive);
      }
      if (eventTypeCase_ == EventTypeOneofCase.ConnectionResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionResponse);
      }
      if (eventTypeCase_ == EventTypeOneofCase.JdocsChanged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JdocsChanged);
      }
      if (eventTypeCase_ == EventTypeOneofCase.AlexaAuthEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlexaAuthEvent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.MirrorModeDisabled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MirrorModeDisabled);
      }
      if (eventTypeCase_ == EventTypeOneofCase.VisionModesAutoDisabled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VisionModesAutoDisabled);
      }
      if (eventTypeCase_ == EventTypeOneofCase.CheckUpdateStatusResponse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CheckUpdateStatusResponse);
      }
      if (eventTypeCase_ == EventTypeOneofCase.UserIntent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserIntent);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotObservedMotion) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RobotObservedMotion);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotErasedEnrolledFace) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RobotErasedEnrolledFace);
      }
      if (eventTypeCase_ == EventTypeOneofCase.RobotRenamedEnrolledFace) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RobotRenamedEnrolledFace);
      }
      if (eventTypeCase_ == EventTypeOneofCase.CameraSettingsUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CameraSettingsUpdate);
      }
      if (eventTypeCase_ == EventTypeOneofCase.UnexpectedMovement) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnexpectedMovement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      switch (other.EventTypeCase) {
        case EventTypeOneofCase.TimeStampedStatus:
          if (TimeStampedStatus == null) {
            TimeStampedStatus = new global::Anki.Vector.ExternalInterface.TimeStampedStatus();
          }
          TimeStampedStatus.MergeFrom(other.TimeStampedStatus);
          break;
        case EventTypeOneofCase.WakeWord:
          if (WakeWord == null) {
            WakeWord = new global::Anki.Vector.ExternalInterface.WakeWord();
          }
          WakeWord.MergeFrom(other.WakeWord);
          break;
        case EventTypeOneofCase.AttentionTransfer:
          if (AttentionTransfer == null) {
            AttentionTransfer = new global::Anki.Vector.ExternalInterface.AttentionTransfer();
          }
          AttentionTransfer.MergeFrom(other.AttentionTransfer);
          break;
        case EventTypeOneofCase.RobotObservedFace:
          if (RobotObservedFace == null) {
            RobotObservedFace = new global::Anki.Vector.ExternalInterface.RobotObservedFace();
          }
          RobotObservedFace.MergeFrom(other.RobotObservedFace);
          break;
        case EventTypeOneofCase.RobotChangedObservedFaceId:
          if (RobotChangedObservedFaceId == null) {
            RobotChangedObservedFaceId = new global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID();
          }
          RobotChangedObservedFaceId.MergeFrom(other.RobotChangedObservedFaceId);
          break;
        case EventTypeOneofCase.ObjectEvent:
          if (ObjectEvent == null) {
            ObjectEvent = new global::Anki.Vector.ExternalInterface.ObjectEvent();
          }
          ObjectEvent.MergeFrom(other.ObjectEvent);
          break;
        case EventTypeOneofCase.StimulationInfo:
          if (StimulationInfo == null) {
            StimulationInfo = new global::Anki.Vector.ExternalInterface.StimulationInfo();
          }
          StimulationInfo.MergeFrom(other.StimulationInfo);
          break;
        case EventTypeOneofCase.PhotoTaken:
          if (PhotoTaken == null) {
            PhotoTaken = new global::Anki.Vector.ExternalInterface.PhotoTaken();
          }
          PhotoTaken.MergeFrom(other.PhotoTaken);
          break;
        case EventTypeOneofCase.RobotState:
          if (RobotState == null) {
            RobotState = new global::Anki.Vector.ExternalInterface.RobotState();
          }
          RobotState.MergeFrom(other.RobotState);
          break;
        case EventTypeOneofCase.CubeBattery:
          if (CubeBattery == null) {
            CubeBattery = new global::Anki.Vector.ExternalInterface.CubeBattery();
          }
          CubeBattery.MergeFrom(other.CubeBattery);
          break;
        case EventTypeOneofCase.KeepAlive:
          if (KeepAlive == null) {
            KeepAlive = new global::Anki.Vector.ExternalInterface.KeepAlivePing();
          }
          KeepAlive.MergeFrom(other.KeepAlive);
          break;
        case EventTypeOneofCase.ConnectionResponse:
          if (ConnectionResponse == null) {
            ConnectionResponse = new global::Anki.Vector.ExternalInterface.ConnectionResponse();
          }
          ConnectionResponse.MergeFrom(other.ConnectionResponse);
          break;
        case EventTypeOneofCase.JdocsChanged:
          if (JdocsChanged == null) {
            JdocsChanged = new global::Anki.Vector.ExternalInterface.JdocsChanged();
          }
          JdocsChanged.MergeFrom(other.JdocsChanged);
          break;
        case EventTypeOneofCase.AlexaAuthEvent:
          if (AlexaAuthEvent == null) {
            AlexaAuthEvent = new global::Anki.Vector.ExternalInterface.AlexaAuthEvent();
          }
          AlexaAuthEvent.MergeFrom(other.AlexaAuthEvent);
          break;
        case EventTypeOneofCase.MirrorModeDisabled:
          if (MirrorModeDisabled == null) {
            MirrorModeDisabled = new global::Anki.Vector.ExternalInterface.MirrorModeDisabled();
          }
          MirrorModeDisabled.MergeFrom(other.MirrorModeDisabled);
          break;
        case EventTypeOneofCase.VisionModesAutoDisabled:
          if (VisionModesAutoDisabled == null) {
            VisionModesAutoDisabled = new global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled();
          }
          VisionModesAutoDisabled.MergeFrom(other.VisionModesAutoDisabled);
          break;
        case EventTypeOneofCase.CheckUpdateStatusResponse:
          if (CheckUpdateStatusResponse == null) {
            CheckUpdateStatusResponse = new global::Anki.Vector.ExternalInterface.CheckUpdateStatusResponse();
          }
          CheckUpdateStatusResponse.MergeFrom(other.CheckUpdateStatusResponse);
          break;
        case EventTypeOneofCase.UserIntent:
          if (UserIntent == null) {
            UserIntent = new global::Anki.Vector.ExternalInterface.UserIntent();
          }
          UserIntent.MergeFrom(other.UserIntent);
          break;
        case EventTypeOneofCase.RobotObservedMotion:
          if (RobotObservedMotion == null) {
            RobotObservedMotion = new global::Anki.Vector.ExternalInterface.RobotObservedMotion();
          }
          RobotObservedMotion.MergeFrom(other.RobotObservedMotion);
          break;
        case EventTypeOneofCase.RobotErasedEnrolledFace:
          if (RobotErasedEnrolledFace == null) {
            RobotErasedEnrolledFace = new global::Anki.Vector.ExternalInterface.RobotErasedEnrolledFace();
          }
          RobotErasedEnrolledFace.MergeFrom(other.RobotErasedEnrolledFace);
          break;
        case EventTypeOneofCase.RobotRenamedEnrolledFace:
          if (RobotRenamedEnrolledFace == null) {
            RobotRenamedEnrolledFace = new global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace();
          }
          RobotRenamedEnrolledFace.MergeFrom(other.RobotRenamedEnrolledFace);
          break;
        case EventTypeOneofCase.CameraSettingsUpdate:
          if (CameraSettingsUpdate == null) {
            CameraSettingsUpdate = new global::Anki.Vector.ExternalInterface.CameraSettingsUpdate();
          }
          CameraSettingsUpdate.MergeFrom(other.CameraSettingsUpdate);
          break;
        case EventTypeOneofCase.UnexpectedMovement:
          if (UnexpectedMovement == null) {
            UnexpectedMovement = new global::Anki.Vector.ExternalInterface.UnexpectedMovement();
          }
          UnexpectedMovement.MergeFrom(other.UnexpectedMovement);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Anki.Vector.ExternalInterface.TimeStampedStatus subBuilder = new global::Anki.Vector.ExternalInterface.TimeStampedStatus();
            if (eventTypeCase_ == EventTypeOneofCase.TimeStampedStatus) {
              subBuilder.MergeFrom(TimeStampedStatus);
            }
            input.ReadMessage(subBuilder);
            TimeStampedStatus = subBuilder;
            break;
          }
          case 26: {
            global::Anki.Vector.ExternalInterface.WakeWord subBuilder = new global::Anki.Vector.ExternalInterface.WakeWord();
            if (eventTypeCase_ == EventTypeOneofCase.WakeWord) {
              subBuilder.MergeFrom(WakeWord);
            }
            input.ReadMessage(subBuilder);
            WakeWord = subBuilder;
            break;
          }
          case 34: {
            global::Anki.Vector.ExternalInterface.AttentionTransfer subBuilder = new global::Anki.Vector.ExternalInterface.AttentionTransfer();
            if (eventTypeCase_ == EventTypeOneofCase.AttentionTransfer) {
              subBuilder.MergeFrom(AttentionTransfer);
            }
            input.ReadMessage(subBuilder);
            AttentionTransfer = subBuilder;
            break;
          }
          case 42: {
            global::Anki.Vector.ExternalInterface.RobotObservedFace subBuilder = new global::Anki.Vector.ExternalInterface.RobotObservedFace();
            if (eventTypeCase_ == EventTypeOneofCase.RobotObservedFace) {
              subBuilder.MergeFrom(RobotObservedFace);
            }
            input.ReadMessage(subBuilder);
            RobotObservedFace = subBuilder;
            break;
          }
          case 50: {
            global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID subBuilder = new global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID();
            if (eventTypeCase_ == EventTypeOneofCase.RobotChangedObservedFaceId) {
              subBuilder.MergeFrom(RobotChangedObservedFaceId);
            }
            input.ReadMessage(subBuilder);
            RobotChangedObservedFaceId = subBuilder;
            break;
          }
          case 58: {
            global::Anki.Vector.ExternalInterface.ObjectEvent subBuilder = new global::Anki.Vector.ExternalInterface.ObjectEvent();
            if (eventTypeCase_ == EventTypeOneofCase.ObjectEvent) {
              subBuilder.MergeFrom(ObjectEvent);
            }
            input.ReadMessage(subBuilder);
            ObjectEvent = subBuilder;
            break;
          }
          case 66: {
            global::Anki.Vector.ExternalInterface.StimulationInfo subBuilder = new global::Anki.Vector.ExternalInterface.StimulationInfo();
            if (eventTypeCase_ == EventTypeOneofCase.StimulationInfo) {
              subBuilder.MergeFrom(StimulationInfo);
            }
            input.ReadMessage(subBuilder);
            StimulationInfo = subBuilder;
            break;
          }
          case 74: {
            global::Anki.Vector.ExternalInterface.PhotoTaken subBuilder = new global::Anki.Vector.ExternalInterface.PhotoTaken();
            if (eventTypeCase_ == EventTypeOneofCase.PhotoTaken) {
              subBuilder.MergeFrom(PhotoTaken);
            }
            input.ReadMessage(subBuilder);
            PhotoTaken = subBuilder;
            break;
          }
          case 82: {
            global::Anki.Vector.ExternalInterface.RobotState subBuilder = new global::Anki.Vector.ExternalInterface.RobotState();
            if (eventTypeCase_ == EventTypeOneofCase.RobotState) {
              subBuilder.MergeFrom(RobotState);
            }
            input.ReadMessage(subBuilder);
            RobotState = subBuilder;
            break;
          }
          case 90: {
            global::Anki.Vector.ExternalInterface.CubeBattery subBuilder = new global::Anki.Vector.ExternalInterface.CubeBattery();
            if (eventTypeCase_ == EventTypeOneofCase.CubeBattery) {
              subBuilder.MergeFrom(CubeBattery);
            }
            input.ReadMessage(subBuilder);
            CubeBattery = subBuilder;
            break;
          }
          case 98: {
            global::Anki.Vector.ExternalInterface.KeepAlivePing subBuilder = new global::Anki.Vector.ExternalInterface.KeepAlivePing();
            if (eventTypeCase_ == EventTypeOneofCase.KeepAlive) {
              subBuilder.MergeFrom(KeepAlive);
            }
            input.ReadMessage(subBuilder);
            KeepAlive = subBuilder;
            break;
          }
          case 106: {
            global::Anki.Vector.ExternalInterface.ConnectionResponse subBuilder = new global::Anki.Vector.ExternalInterface.ConnectionResponse();
            if (eventTypeCase_ == EventTypeOneofCase.ConnectionResponse) {
              subBuilder.MergeFrom(ConnectionResponse);
            }
            input.ReadMessage(subBuilder);
            ConnectionResponse = subBuilder;
            break;
          }
          case 114: {
            global::Anki.Vector.ExternalInterface.JdocsChanged subBuilder = new global::Anki.Vector.ExternalInterface.JdocsChanged();
            if (eventTypeCase_ == EventTypeOneofCase.JdocsChanged) {
              subBuilder.MergeFrom(JdocsChanged);
            }
            input.ReadMessage(subBuilder);
            JdocsChanged = subBuilder;
            break;
          }
          case 122: {
            global::Anki.Vector.ExternalInterface.AlexaAuthEvent subBuilder = new global::Anki.Vector.ExternalInterface.AlexaAuthEvent();
            if (eventTypeCase_ == EventTypeOneofCase.AlexaAuthEvent) {
              subBuilder.MergeFrom(AlexaAuthEvent);
            }
            input.ReadMessage(subBuilder);
            AlexaAuthEvent = subBuilder;
            break;
          }
          case 130: {
            global::Anki.Vector.ExternalInterface.MirrorModeDisabled subBuilder = new global::Anki.Vector.ExternalInterface.MirrorModeDisabled();
            if (eventTypeCase_ == EventTypeOneofCase.MirrorModeDisabled) {
              subBuilder.MergeFrom(MirrorModeDisabled);
            }
            input.ReadMessage(subBuilder);
            MirrorModeDisabled = subBuilder;
            break;
          }
          case 138: {
            global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled subBuilder = new global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled();
            if (eventTypeCase_ == EventTypeOneofCase.VisionModesAutoDisabled) {
              subBuilder.MergeFrom(VisionModesAutoDisabled);
            }
            input.ReadMessage(subBuilder);
            VisionModesAutoDisabled = subBuilder;
            break;
          }
          case 146: {
            global::Anki.Vector.ExternalInterface.CheckUpdateStatusResponse subBuilder = new global::Anki.Vector.ExternalInterface.CheckUpdateStatusResponse();
            if (eventTypeCase_ == EventTypeOneofCase.CheckUpdateStatusResponse) {
              subBuilder.MergeFrom(CheckUpdateStatusResponse);
            }
            input.ReadMessage(subBuilder);
            CheckUpdateStatusResponse = subBuilder;
            break;
          }
          case 154: {
            global::Anki.Vector.ExternalInterface.UserIntent subBuilder = new global::Anki.Vector.ExternalInterface.UserIntent();
            if (eventTypeCase_ == EventTypeOneofCase.UserIntent) {
              subBuilder.MergeFrom(UserIntent);
            }
            input.ReadMessage(subBuilder);
            UserIntent = subBuilder;
            break;
          }
          case 162: {
            global::Anki.Vector.ExternalInterface.RobotObservedMotion subBuilder = new global::Anki.Vector.ExternalInterface.RobotObservedMotion();
            if (eventTypeCase_ == EventTypeOneofCase.RobotObservedMotion) {
              subBuilder.MergeFrom(RobotObservedMotion);
            }
            input.ReadMessage(subBuilder);
            RobotObservedMotion = subBuilder;
            break;
          }
          case 170: {
            global::Anki.Vector.ExternalInterface.RobotErasedEnrolledFace subBuilder = new global::Anki.Vector.ExternalInterface.RobotErasedEnrolledFace();
            if (eventTypeCase_ == EventTypeOneofCase.RobotErasedEnrolledFace) {
              subBuilder.MergeFrom(RobotErasedEnrolledFace);
            }
            input.ReadMessage(subBuilder);
            RobotErasedEnrolledFace = subBuilder;
            break;
          }
          case 178: {
            global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace subBuilder = new global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace();
            if (eventTypeCase_ == EventTypeOneofCase.RobotRenamedEnrolledFace) {
              subBuilder.MergeFrom(RobotRenamedEnrolledFace);
            }
            input.ReadMessage(subBuilder);
            RobotRenamedEnrolledFace = subBuilder;
            break;
          }
          case 186: {
            global::Anki.Vector.ExternalInterface.CameraSettingsUpdate subBuilder = new global::Anki.Vector.ExternalInterface.CameraSettingsUpdate();
            if (eventTypeCase_ == EventTypeOneofCase.CameraSettingsUpdate) {
              subBuilder.MergeFrom(CameraSettingsUpdate);
            }
            input.ReadMessage(subBuilder);
            CameraSettingsUpdate = subBuilder;
            break;
          }
          case 194: {
            global::Anki.Vector.ExternalInterface.UnexpectedMovement subBuilder = new global::Anki.Vector.ExternalInterface.UnexpectedMovement();
            if (eventTypeCase_ == EventTypeOneofCase.UnexpectedMovement) {
              subBuilder.MergeFrom(UnexpectedMovement);
            }
            input.ReadMessage(subBuilder);
            UnexpectedMovement = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilterList : pb::IMessage<FilterList> {
    private static readonly pb::MessageParser<FilterList> _parser = new pb::MessageParser<FilterList>(() => new FilterList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterList(FilterList other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterList Clone() {
      return new FilterList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_list_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> list_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventRequest : pb::IMessage<EventRequest> {
    private static readonly pb::MessageParser<EventRequest> _parser = new pb::MessageParser<EventRequest>(() => new EventRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRequest(EventRequest other) : this() {
      connectionId_ = other.connectionId_;
      switch (other.ListTypeCase) {
        case ListTypeOneofCase.WhiteList:
          WhiteList = other.WhiteList.Clone();
          break;
        case ListTypeOneofCase.BlackList:
          BlackList = other.BlackList.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRequest Clone() {
      return new EventRequest(this);
    }

    /// <summary>Field number for the "white_list" field.</summary>
    public const int WhiteListFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.FilterList WhiteList {
      get { return listTypeCase_ == ListTypeOneofCase.WhiteList ? (global::Anki.Vector.ExternalInterface.FilterList) listType_ : null; }
      set {
        listType_ = value;
        listTypeCase_ = value == null ? ListTypeOneofCase.None : ListTypeOneofCase.WhiteList;
      }
    }

    /// <summary>Field number for the "black_list" field.</summary>
    public const int BlackListFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.FilterList BlackList {
      get { return listTypeCase_ == ListTypeOneofCase.BlackList ? (global::Anki.Vector.ExternalInterface.FilterList) listType_ : null; }
      set {
        listType_ = value;
        listTypeCase_ = value == null ? ListTypeOneofCase.None : ListTypeOneofCase.BlackList;
      }
    }

    /// <summary>Field number for the "connection_id" field.</summary>
    public const int ConnectionIdFieldNumber = 3;
    private string connectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object listType_;
    /// <summary>Enum of possible cases for the "list_type" oneof.</summary>
    public enum ListTypeOneofCase {
      None = 0,
      WhiteList = 1,
      BlackList = 2,
    }
    private ListTypeOneofCase listTypeCase_ = ListTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTypeOneofCase ListTypeCase {
      get { return listTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearListType() {
      listTypeCase_ = ListTypeOneofCase.None;
      listType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WhiteList, other.WhiteList)) return false;
      if (!object.Equals(BlackList, other.BlackList)) return false;
      if (ConnectionId != other.ConnectionId) return false;
      if (ListTypeCase != other.ListTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (listTypeCase_ == ListTypeOneofCase.WhiteList) hash ^= WhiteList.GetHashCode();
      if (listTypeCase_ == ListTypeOneofCase.BlackList) hash ^= BlackList.GetHashCode();
      if (ConnectionId.Length != 0) hash ^= ConnectionId.GetHashCode();
      hash ^= (int) listTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (listTypeCase_ == ListTypeOneofCase.WhiteList) {
        output.WriteRawTag(10);
        output.WriteMessage(WhiteList);
      }
      if (listTypeCase_ == ListTypeOneofCase.BlackList) {
        output.WriteRawTag(18);
        output.WriteMessage(BlackList);
      }
      if (ConnectionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConnectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (listTypeCase_ == ListTypeOneofCase.WhiteList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WhiteList);
      }
      if (listTypeCase_ == ListTypeOneofCase.BlackList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackList);
      }
      if (ConnectionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRequest other) {
      if (other == null) {
        return;
      }
      if (other.ConnectionId.Length != 0) {
        ConnectionId = other.ConnectionId;
      }
      switch (other.ListTypeCase) {
        case ListTypeOneofCase.WhiteList:
          if (WhiteList == null) {
            WhiteList = new global::Anki.Vector.ExternalInterface.FilterList();
          }
          WhiteList.MergeFrom(other.WhiteList);
          break;
        case ListTypeOneofCase.BlackList:
          if (BlackList == null) {
            BlackList = new global::Anki.Vector.ExternalInterface.FilterList();
          }
          BlackList.MergeFrom(other.BlackList);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Anki.Vector.ExternalInterface.FilterList subBuilder = new global::Anki.Vector.ExternalInterface.FilterList();
            if (listTypeCase_ == ListTypeOneofCase.WhiteList) {
              subBuilder.MergeFrom(WhiteList);
            }
            input.ReadMessage(subBuilder);
            WhiteList = subBuilder;
            break;
          }
          case 18: {
            global::Anki.Vector.ExternalInterface.FilterList subBuilder = new global::Anki.Vector.ExternalInterface.FilterList();
            if (listTypeCase_ == ListTypeOneofCase.BlackList) {
              subBuilder.MergeFrom(BlackList);
            }
            input.ReadMessage(subBuilder);
            BlackList = subBuilder;
            break;
          }
          case 26: {
            ConnectionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventResponse : pb::IMessage<EventResponse> {
    private static readonly pb::MessageParser<EventResponse> _parser = new pb::MessageParser<EventResponse>(() => new EventResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventResponse(EventResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      event_ = other.event_ != null ? other.event_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventResponse Clone() {
      return new EventResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.Event event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (event_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::Anki.Vector.ExternalInterface.Event();
        }
        Event.MergeFrom(other.Event);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            if (event_ == null) {
              event_ = new global::Anki.Vector.ExternalInterface.Event();
            }
            input.ReadMessage(event_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAuthenticationRequest : pb::IMessage<UserAuthenticationRequest> {
    private static readonly pb::MessageParser<UserAuthenticationRequest> _parser = new pb::MessageParser<UserAuthenticationRequest>(() => new UserAuthenticationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAuthenticationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthenticationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthenticationRequest(UserAuthenticationRequest other) : this() {
      userSessionId_ = other.userSessionId_;
      clientName_ = other.clientName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthenticationRequest Clone() {
      return new UserAuthenticationRequest(this);
    }

    /// <summary>Field number for the "user_session_id" field.</summary>
    public const int UserSessionIdFieldNumber = 1;
    private pb::ByteString userSessionId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserSessionId {
      get { return userSessionId_; }
      set {
        userSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_name" field.</summary>
    public const int ClientNameFieldNumber = 2;
    private pb::ByteString clientName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientName {
      get { return clientName_; }
      set {
        clientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAuthenticationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAuthenticationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserSessionId != other.UserSessionId) return false;
      if (ClientName != other.ClientName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserSessionId.Length != 0) hash ^= UserSessionId.GetHashCode();
      if (ClientName.Length != 0) hash ^= ClientName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserSessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(UserSessionId);
      }
      if (ClientName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ClientName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserSessionId);
      }
      if (ClientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAuthenticationRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserSessionId.Length != 0) {
        UserSessionId = other.UserSessionId;
      }
      if (other.ClientName.Length != 0) {
        ClientName = other.ClientName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserSessionId = input.ReadBytes();
            break;
          }
          case 18: {
            ClientName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAuthenticationResponse : pb::IMessage<UserAuthenticationResponse> {
    private static readonly pb::MessageParser<UserAuthenticationResponse> _parser = new pb::MessageParser<UserAuthenticationResponse>(() => new UserAuthenticationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAuthenticationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.SharedReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthenticationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthenticationResponse(UserAuthenticationResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      code_ = other.code_;
      clientTokenGuid_ = other.clientTokenGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAuthenticationResponse Clone() {
      return new UserAuthenticationResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.UserAuthenticationResponse.Types.Code code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.UserAuthenticationResponse.Types.Code Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "client_token_guid" field.</summary>
    public const int ClientTokenGuidFieldNumber = 3;
    private pb::ByteString clientTokenGuid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientTokenGuid {
      get { return clientTokenGuid_; }
      set {
        clientTokenGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAuthenticationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAuthenticationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Code != other.Code) return false;
      if (ClientTokenGuid != other.ClientTokenGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (ClientTokenGuid.Length != 0) hash ^= ClientTokenGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (ClientTokenGuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientTokenGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (ClientTokenGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientTokenGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAuthenticationResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.ClientTokenGuid.Length != 0) {
        ClientTokenGuid = other.ClientTokenGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            code_ = (global::Anki.Vector.ExternalInterface.UserAuthenticationResponse.Types.Code) input.ReadEnum();
            break;
          }
          case 26: {
            ClientTokenGuid = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserAuthenticationResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Code {
        [pbr::OriginalName("UNAUTHORIZED")] Unauthorized = 0,
        [pbr::OriginalName("AUTHORIZED")] Authorized = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

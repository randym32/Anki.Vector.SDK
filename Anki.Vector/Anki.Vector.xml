<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Anki.Vector</name>
    </assembly>
    <members>
        <member name="T:Anki.Vector.AnimationComponent">
            <summary>
            Animation related classes, functions, events and values.
            <para>Animations represent a sequence of highly coordinated movements, faces, lights, and sounds used to demonstrate an emotion or reaction.</para><para>Animations can control the following tracks: head, lift, treads, face, audio and backpack lights.</para><para>There are two ways to play an animation on Vector: <see cref="M:Anki.Vector.AnimationComponent.PlayAnimation(Anki.Vector.Types.Animation,System.UInt32,System.Boolean,System.Boolean,System.Boolean)" /> and <see cref="M:Anki.Vector.AnimationComponent.PlayAnimationTrigger(Anki.Vector.Types.AnimationTrigger,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />.  For PlayAnimationTrigger, you select a pre-defined
            group of animations, and the robot will choose which animation from the group to run when you execute the method.  When calling PlayAnimation, you
            select the specific animation you want the robot to run.  We advise you to use PlayAnimationTrigger instead of PlayAnimation, since individual
            animations can be deleted between Vector OS versions.</para>
            By default, when an SDK program starts, the SDK will request a list of known animation triggers and animations from the robot, which will be loaded
            and available from <see cref="M:Anki.Vector.AnimationComponent.GetAnimationTriggers" /> and <see cref="M:Anki.Vector.AnimationComponent.GetAnimations" />, respectively.
            </summary>
            <seealso cref="T:Anki.Vector.Component" />
        </member>
        <member name="F:Anki.Vector.AnimationComponent.animations">
            <summary>
            The animation cache
            </summary>
        </member>
        <member name="F:Anki.Vector.AnimationComponent.animationTriggers">
            <summary>
            The animation trigger cache
            </summary>
        </member>
        <member name="F:Anki.Vector.AnimationComponent.animationResult">
            <summary>
            The animation result
            </summary>
        </member>
        <member name="P:Anki.Vector.AnimationComponent.IsAnimating">
            <summary>
            Gets a value indicating whether the SDK is running an animation
            </summary>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.AnimationComponent"/> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.Events_RobotState(System.Object,Anki.Vector.Events.RobotStateEventArgs)">
            <summary>
            Handles the RobotState event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.GetAnimations">
            <summary>
            Gets the list of animations returned from the robot.        
            <para>Animations are dynamically retrieved from the robot the first time this method is called and cached for subsequent requests.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains a dictionary of animations by name.</returns>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.GetAnimationTriggers">
            <summary>
            Gets the the set of animation triggers returned from the robot.
            <para>Animation triggers are dynamically retrieved from the robot the first time this method is called and cached for subsequent requests.</para>
            <para>Playing an animation trigger causes the robot to play an animation of a particular type.</para>
            <para>The robot may pick one of a number of actual animations to play based on Vector’s mood or emotion, or with random weighting. Thus playing the same trigger twice may not result in the exact same underlying animation playing twice.</para>
            <para>To play an exact animation, use <see cref="M:Anki.Vector.AnimationComponent.PlayAnimation(Anki.Vector.Types.Animation,System.UInt32,System.Boolean,System.Boolean,System.Boolean)"/>.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains a dictionary of animations triggers by name.</returns>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.PlayAnimation(Anki.Vector.Types.Animation,System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts an animation playing on a robot.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="animation">The animation to play.</param>
            <param name="loopCount">Number of times to play the animation.</param>
            <param name="ignoreBodyTrack">if set to <c>true</c> ignore the animation track for Vector’s body (i.e. the wheels / treads).</param>
            <param name="ignoreHeadTrack">if set to <c>true</c> ignore the animation track for Vector’s head.</param>
            <param name="ignoreLiftTrack">if set to <c>true</c> ignore the animation track for Vector’s lift.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.PlayAnimation(System.String,System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts an animation playing on a robot.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="animationName">Name of the animation to play.</param>
            <param name="loopCount">Number of times to play the animation.</param>
            <param name="ignoreBodyTrack">if set to <c>true</c> ignore the animation track for Vector’s body (i.e. the wheels / treads).</param>
            <param name="ignoreHeadTrack">if set to <c>true</c> ignore the animation track for Vector’s head.</param>
            <param name="ignoreLiftTrack">if set to <c>true</c> ignore the animation track for Vector’s lift.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Unknown animation '{animationName}'</exception>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.PlayAnimationTrigger(Anki.Vector.Types.AnimationTrigger,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts an animation trigger playing on a robot.
            <para>Playing a trigger requests that an animation of a certain class starts playing, rather than an exact animation name.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="animationTrigger">The animation trigger to play.</param>
            <param name="loopCount">The loop count.</param>
            <param name="useLiftSafe">if set to <c>true</c> automatically ignore the lift track if Vector is currently carrying an object.</param>
            <param name="ignoreBodyTrack">if set to <c>true</c> ignore the animation track for Vector’s body (i.e. the wheels / treads).</param>
            <param name="ignoreHeadTrack">if set to <c>true</c> ignore the animation track for Vector’s head.</param>
            <param name="ignoreLiftTrack">if set to <c>true</c> ignore the animation track for Vector’s lift.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.PlayAnimationTrigger(System.String,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts an animation trigger playing on a robot.
            <para>Playing a trigger requests that an animation of a certain class starts playing, rather than an exact animation name.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="animationTriggerName">Name of the animation trigger to play.</param>
            <param name="loopCount">The loop count.</param>
            <param name="useLiftSafe">if set to <c>true</c> automatically ignore the lift track if Vector is currently carrying an object.</param>
            <param name="ignoreBodyTrack">if set to <c>true</c> ignore the animation track for Vector’s body (i.e. the wheels / treads).</param>
            <param name="ignoreHeadTrack">if set to <c>true</c> ignore the animation track for Vector’s head.</param>
            <param name="ignoreLiftTrack">if set to <c>true</c> ignore the animation track for Vector’s lift.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.Play(Anki.Vector.Types.IAnimation,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Starts an animation or animation trigger playing on robot.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="animationOrTrigger">The animation or animation trigger to play.</param>
            <param name="loopCount">The loop count.</param>
            <param name="useLiftSafe">if set to <c>true</c> automatically ignore the lift track if Vector is currently carrying an object.</param>
            <param name="ignoreBodyTrack">if set to <c>true</c> ignore the animation track for Vector’s body (i.e. the wheels / treads).</param>
            <param name="ignoreHeadTrack">if set to <c>true</c> ignore the animation track for Vector’s head.</param>
            <param name="ignoreLiftTrack">if set to <c>true</c> ignore the animation track for Vector’s lift.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.ArgumentException">Parameter is not an Animation or AnimationTrigger</exception>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.WaitForAnimationCompletion">
            <summary>
            Waits for the current animation to complete.
            <para>The task will complete when animation is finished.  If no animation is running, this method will return immediately.</para>
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result is false if no task was running.</returns>
        </member>
        <member name="M:Anki.Vector.AnimationComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.MasterVolumeLevel">
            <summary>
            Use these values for setting the master audio volume.  See <see cref="M:Anki.Vector.AudioComponent.SetMasterVolume(Anki.Vector.MasterVolumeLevel)"/>.
            </summary>
        </member>
        <member name="F:Anki.Vector.MasterVolumeLevel.Low">
            <summary>Lowest volume level</summary>
        </member>
        <member name="F:Anki.Vector.MasterVolumeLevel.MediumLow">
            <summary>Medium low volume level</summary>
        </member>
        <member name="F:Anki.Vector.MasterVolumeLevel.Medium">
            <summary>Medium volume level</summary>
        </member>
        <member name="F:Anki.Vector.MasterVolumeLevel.MediumHigh">
            <summary>Medium high volume level</summary>
        </member>
        <member name="F:Anki.Vector.MasterVolumeLevel.High">
            <summary>Highest volume level</summary>
        </member>
        <member name="T:Anki.Vector.PlaybackResult">
            <summary>
            The playback result
            </summary>
        </member>
        <member name="F:Anki.Vector.PlaybackResult.Completed">
            <summary>The playback completed successfully</summary>
        </member>
        <member name="F:Anki.Vector.PlaybackResult.BufferOverrun">
            <summary>The robot overran the audio buffer\</summary>
        </member>
        <member name="F:Anki.Vector.PlaybackResult.OtherFailure">
            <summary>An unspecified playback failure</summary>
        </member>
        <member name="F:Anki.Vector.PlaybackResult.Cancelled">
            <summary>The playback was cancelled</summary>
        </member>
        <member name="T:Anki.Vector.AudioComponent">
            <summary>
            Support for Vector’s speakers
            <para>Vector's speakers can be used for playing user-provided audio.  You can use the <see cref="M:Anki.Vector.AudioComponent.PlayStream(System.IO.Stream,System.UInt32,System.UInt32)"/> method to play a stream of 
            16bit mono audio data.</para>
            </summary>
        </member>
        <member name="F:Anki.Vector.AudioComponent.MaxRobotAudioChunkSize">
            <summary>
            The maximum robot audio chunk size
            </summary>
        </member>
        <member name="F:Anki.Vector.AudioComponent.audioFeed">
            <summary>
            The audio feed loop
            </summary>
        </member>
        <member name="F:Anki.Vector.AudioComponent.playbackFeed">
            <summary>
            The playback feed
            </summary>
        </member>
        <member name="F:Anki.Vector.AudioComponent.playbackResult">
            <summary>
            The playback result
            </summary>
        </member>
        <member name="M:Anki.Vector.AudioComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.AudioComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="E:Anki.Vector.AudioComponent.AudioReceived">
            <summary>
            Occurs when audio received.
            </summary>
        </member>
        <member name="P:Anki.Vector.AudioComponent.IsAudioFeedActive">
            <summary>
            Gets a value indicating whether the audio feed is active.
            </summary>
        </member>
        <member name="P:Anki.Vector.AudioComponent.IsPlaybackActive">
            <summary>
            Gets a value indicating whether vector is currently playing back audio
            </summary>
        </member>
        <member name="M:Anki.Vector.AudioComponent.StartAudioFeed">
            <summary>
            Starts the audio feed.  The feed will run in a background thread and raise the <see cref="E:Anki.Vector.AudioComponent.AudioReceived" /> event for each received image.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.AudioComponent.EndAudioFeed">
            <summary>
            Ends the audio feed.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.AudioComponent.SetMasterVolume(Anki.Vector.MasterVolumeLevel)">
            <summary>
            Sets the master volume.
            <para>Note that muting the robot is not supported from the SDK.</para>
            </summary>
            <param name="volumeLevel">The volume level.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.AudioComponent.PlayStream(System.IO.Stream,System.UInt32,System.UInt32)">
            <summary>
            Plays audio using Vector's speakers.
            </summary>
            <param name="stream">16bit audio byte stream containing 1 channel.</param>
            <param name="frameRate">The frame rate between 8000-16025 hz.</param>
            <param name="volume">The audio playback volume level (0-100).</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.AudioComponent.CancelPlayback">
            <summary>
            Cancels the audio playback
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.AudioComponent.ProcessAudioResponse(Anki.Vector.ExternalInterface.ExternalAudioStreamResponse)">
            <summary>
            Processes the audio response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Anki.Vector.AudioComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.Authentication">
            <summary>
            This static class for logging into Vector and creating <see cref="T:Anki.Vector.RobotConfiguration"/> instances for connecting to a Vector robot.
            <para>The <see cref="M:Anki.Vector.Authentication.Login(System.String,System.String,System.String,System.String,System.Net.IPAddress)"/> method is the best way to use this class; provide all the necessary parameters and that method
            will retrieve the certificate, login to Anki's server, login to Vector, and return a <see cref="T:Anki.Vector.RobotConfiguration"/> instance that be stored and used to connect to Vector.</para>
            <para>The remaining methods in this class can be used to retrieve each piece of connection information separately</para>
            </summary>
        </member>
        <member name="F:Anki.Vector.Authentication.AnkiAppKey">
            <summary>
            The anki application key
            </summary>
        </member>
        <member name="F:Anki.Vector.Authentication.HttpClient">
            <summary>
            The shared HTTP client
            </summary>
        </member>
        <member name="M:Anki.Vector.Authentication.Login(System.String,System.String,System.String,System.String,System.Net.IPAddress)">
            <summary>
            Performs a complete login to the robot and returns a filled in <see cref="T:Anki.Vector.RobotConfiguration"/> instance.
            </summary>
            <param name="serialNumber">The robot serial number.</param>
            <param name="robotName">Name of the robot.</param>
            <param name="emailAddress">The user's username.</param>
            <param name="password">The user's password.</param>
            <param name="ipAddress">The optional robot IP address.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the new robot configuration.</returns>
            <exception cref="T:System.ArgumentException">
            Serial number must be provided - serialNumber
            or
            Robot name must be provided - robotName
            or
            User name must be provided - username
            or
            Password must be provided - password
            or
            IP address could not be determined; please provide IP address. - ipAddress
            </exception>
        </member>
        <member name="M:Anki.Vector.Authentication.RemoteLogin(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Performs a complete login to the remote robot and returns a filled in <see cref="T:Anki.Vector.RobotConfiguration"/> instance.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <param name="robotName">Name of the robot.</param>
            <param name="emailAddress">The email address.</param>
            <param name="password">The password.</param>
            <param name="remoteHost">The remote host name or IP address and port.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the new robot configuration.</returns>
            <exception cref="T:System.ArgumentException">Remote host cannot be empty. - remoteHost</exception>
        </member>
        <member name="M:Anki.Vector.Authentication.Login(Anki.Vector.RobotConfiguration,System.String,System.String,System.Net.IPAddress)">
            <summary>
            Updates the specified robot configuration with a new login
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="emailAddress">The email address.</param>
            <param name="password">The password.</param>
            <param name="ipAddress">The IP address.</param>
            <returns>A task that represents the asynchronous operation; the task result the modified robot configuration parameter instance.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorAuthenticationException">IP address could not be determined; please provide IP address.</exception>
        </member>
        <member name="M:Anki.Vector.Authentication.RemoteLogin(Anki.Vector.RobotConfiguration,System.String,System.String,System.String)">
            <summary>
            Updates the specified robot configuration with a new login
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="emailAddress">The email address.</param>
            <param name="password">The password.</param>
            <param name="remoteHost">The optional remote host to connect to (otherwise uses configured remote host).</param>
            <returns>A task that represents the asynchronous operation; the task result the modified robot configuration parameter instance.</returns>
            <exception cref="T:System.ArgumentNullException">robotConfiguration</exception>
        </member>
        <member name="M:Anki.Vector.Authentication.GetCertificate(System.String)">
            <summary>
            Gets the certificate for the specific robot by serial number.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the certificate.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorAuthenticationException">
            Serial number must be provided
            or
            Serial number is not in the correct format.
            or
            Serial number is invalid.
            or
            </exception>
        </member>
        <member name="M:Anki.Vector.Authentication.GetSessionToken(System.String,System.String)">
            <summary>
            Gets the session token for the user.
            </summary>
            <param name="emailAddress">The login email address.</param>
            <param name="password">The password.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the session token.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorAuthenticationException">
            Email must be provided.
            or
            Password must be provided.
            or
            Invalid email address or password.
            or
            Invalid response from Anki accounts API
            </exception>
        </member>
        <member name="M:Anki.Vector.Authentication.GetTokenGuid(System.String,System.String,System.String,System.Net.IPAddress)">
            <summary>
            Gets the authentication token from the robot.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="certificate">The SSL certificate for the robot.</param>
            <param name="robotName">Name of the robot.</param>
            <param name="ipAddress">The IP address of the robot.</param>
            <returns>
            A task that represents the asynchronous operation; the task result contains the authentication token.
            </returns>
        </member>
        <member name="M:Anki.Vector.Authentication.GetTokenGuid(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the authentication token from the robot.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="certificate">The SSL certificate for the robot.</param>
            <param name="robotName">Name of the robot.</param>
            <param name="host">The host name or IP address with optional port.</param>
            <returns>
            A task that represents the asynchronous operation; the task result contains the authentication token.
            </returns>
        </member>
        <member name="M:Anki.Vector.Authentication.FindRobotAddress(System.String,System.Int32)">
            <summary>
            Finds the robot IP address.
            </summary>
            <param name="robotName">Name of the robot.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the IP address of the robot (or null if not found).</returns>
        </member>
        <member name="M:Anki.Vector.Authentication.StandardizeRobotName(System.String)">
            <summary>
            Standardizes the name of the robot.
            </summary>
            <param name="robotName">Name of the robot.</param>
            <returns>A robot name in the correct format or the name unchanged.</returns>
            <exception cref="T:System.ArgumentException">Invalid robot name. Please match the format exactly. Example: Vector-A1B2 - robotName</exception>
        </member>
        <member name="M:Anki.Vector.Authentication.RobotNameIsValid(System.String)">
            <summary>
            Validates the name of the robot.
            </summary>
            <param name="robotName">Name of the robot.</param>
            <returns>True if the robot name is in the correct format.</returns>
        </member>
        <member name="M:Anki.Vector.Authentication.SerialNumberIsValid(System.String)">
            <summary>
            Validates the serial number.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns>True if the serial number is in the correct format.</returns>
        </member>
        <member name="M:Anki.Vector.Authentication.TryValidate(Anki.Vector.IRobotConfiguration)">
            <summary>
            Validates the specified robot configuration.
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <returns>A list of errors</returns>
        </member>
        <member name="M:Anki.Vector.Authentication.Validate(Anki.Vector.IRobotConfiguration)">
            <summary>
            Validates the specified robot configuration.
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <returns>
            The robot configuration unchanged.
            </returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorConfigurationException">Validation error</exception>
        </member>
        <member name="M:Anki.Vector.Authentication.FindRobotAddress(Anki.Vector.IRobotConfiguration)">
            <summary>
            Finds the current robot address if possible or returns the address from the configuration.
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the IP address.</returns>
        </member>
        <member name="T:Anki.Vector.AlignmentType">
            <summary>
            Which part of the robot to align with an object.
            </summary>
        </member>
        <member name="F:Anki.Vector.AlignmentType.LiftFinger">
            <summary>Fingers aligned with object</summary>
        </member>
        <member name="F:Anki.Vector.AlignmentType.LiftPlate">
            <summary>Lift plate aligned with object</summary>
        </member>
        <member name="F:Anki.Vector.AlignmentType.Body">
            <summary>Front of body aligned with object</summary>
        </member>
        <member name="T:Anki.Vector.BehaviorComponent">
            <summary>
            Behavior related classes and functions.
            <para>Behaviors represent a complex task which requires Vector’s internal logic to determine how long it will take.This may include combinations
            of animation, path planning or other functionality.</para><para>For commands such as <see cref="M:Anki.Vector.BehaviorComponent.GoToPose(Anki.Vector.Types.Pose,System.Boolean,System.Int32)" />, <see cref="M:Anki.Vector.BehaviorComponent.DriveOnCharger" /> and <see cref="M:Anki.Vector.BehaviorComponent.DockWithCube(Anki.Vector.Objects.LightCube,System.Nullable{System.Single},Anki.Vector.AlignmentType,System.Single,System.Int32)" />, Vector uses path planning, which refers
            to the problem of navigating the robot from point A to B without collisions. Vector loads known obstacles from his map, creates a path to navigate
            around those objects, then starts following the path.  If a new obstacle is found while following the path, a new plan may be created.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Component" />
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.MinHeadAngle">
            <summary>
            The minimum head angle in radians
            </summary>
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.MaxHeadAngle">
            <summary>
            The maximum head angle in radians
            </summary>
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.MinLiftHeight">
            <summary>
            The minimum lift height in millimeters
            </summary>
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.MaxLiftHeight">
            <summary>
            The maximum lift height in millimeters
            </summary>
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.nextActionId">
            <summary>
            The next action identifier
            </summary>
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.activeActionId">
            <summary>
            The currently active action identifier
            </summary>
        </member>
        <member name="F:Anki.Vector.BehaviorComponent.cancellationTokenSource">
            <summary>
            The cancellation token source
            </summary>
        </member>
        <member name="P:Anki.Vector.BehaviorComponent.IsBusy">
            <summary>
            Gets a value indicating whether Vector is busy performing a behavior.
            </summary>
        </member>
        <member name="P:Anki.Vector.BehaviorComponent.MotionProfile">
            <summary>
            Gets the motion profile that tells Vector how to drive when receiving navigation and movement actions such as <see cref="M:Anki.Vector.BehaviorComponent.GoToPose(Anki.Vector.Types.Pose,System.Boolean,System.Int32)"/> and <see cref="M:Anki.Vector.BehaviorComponent.DockWithCube(Anki.Vector.Objects.LightCube,System.Nullable{System.Single},Anki.Vector.AlignmentType,System.Single,System.Int32)"/>.
            </summary>
            <value>
            The motion profile.
            </value>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.BehaviorComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.SayText(System.String,System.Boolean,System.Single)">
            <summary>
            Make Vector speak text.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="text">The words for Vector to say.</param>
            <param name="useVectorVoice">Whether to use Vector’s robot voice (otherwise, he uses a generic human male voice).</param>
            <param name="durationScalar">Adjust the relative duration of the generated text to speech audio.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.DriveOffCharger">
            <summary>
            Drive Vector off the charger
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.DriveOnCharger">
            <summary>
            Drive Vector onto the charger
            <para>Vector will attempt to find the charger and, if successful, he will back onto it and start charging.
            Vector’s charger has a visual marker so that the robot can locate it for self-docking.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.FindFaces">
            <summary>
            Look around for faces
            <para>Turn in place and move head to look for faces.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.LookAroundInPlace">
            <summary>
            Look around in place
            <para>Turn in place and move head to see what's around Vector.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.RollVisibleCube">
            <summary>
            Roll a cube that is currently known to the robot.
            <para>This behavior will move into position as necessary based on relative distance and orientation.  Vector needs to see the block for this to succeed.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.DriveStraight(System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
            Tells Vector to drive in a straight line.  Vector will drive for the specified distance(forwards or backwards).  Vector must be off of the charger for this movement action.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="distanceMm">The distance in mm. (positive for forwards, negative for backwards)</param>
            <param name="speedMmps">The speed mm/s.</param>
            <param name="shouldPlayAnimation">Whether to play idle animations whilst driving</param>
            <param name="numRetries">Number of times to re-attempt action in case of a failure</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.NotSupportedException">The action result is not supported</exception>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.GoToPose(Anki.Vector.Types.Pose,System.Boolean,System.Int32)">
            <summary>
            Tells Vector to drive to the specified pose and orientation.
            <para>In navigating to the requested pose, Vector will use path planning.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="pose">The pose.</param>
            <param name="relativeToRobot">Whether the given pose is relative to the robot's pose.</param>
            <param name="retries">The retries.</param>
            <returns>
            A task that represents the asynchronous operation; the task result contains the result from the robot.
            </returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.DockWithCube(Anki.Vector.Objects.LightCube,System.Nullable{System.Single},Anki.Vector.AlignmentType,System.Single,System.Int32)">
            <summary>
            Tells Vector to dock with a light cube, optionally using a given approach angle and distance.
            <para>While docking with the cube, Vector will use path planning.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="lightCube">The light cube.</param>
            <param name="approachAngle">The approach angle in radians.</param>
            <param name="alignment">Which part of the robot to align with the object.</param>
            <param name="distanceFromMarker">The distance from marker in mm (0 to dock).</param>
            <param name="numRetries">Number of times to re-attempt action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.SetEyeColor(System.Single,System.Single)">
            <summary>
            Set Vector’s eye color.
            </summary>
            <param name="hue">The hue.</param>
            <param name="saturation">The saturation.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.SetHeadAngle(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Tell Vector's head to move to a given angle.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="angle">Desired angle for Vector’s head.  Clamped to <see cref="F:Anki.Vector.BehaviorComponent.MinHeadAngle"/> and <see cref="F:Anki.Vector.BehaviorComponent.MaxHeadAngle"/>.</param>
            <param name="acceleration">Acceleration of Vector’s head in radians per second squared.</param>
            <param name="maxSpeed">Maximum speed of Vector’s head in radians per second.</param>
            <param name="duration">Time for Vector’s head to move in seconds. A value of zero will make Vector try to do it as quickly as possible.</param>
            <param name="numRetries">Number of times to re-attempt the action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.SetLiftHeight(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Tell Vector’s lift to move to a given height.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="height">Desired height for Vector’s lift clamped to 0.0 (bottom) to 1.0 (top).</param>
            <param name="acceleration">Acceleration of Vector’s lift in radians per second squared.</param>
            <param name="maxSpeed">Maximum speed of Vector’s lift in radians per second.</param>
            <param name="duration">Time for Vector’s lift to move in seconds. A value of zero will make Vector try to do it as quickly as possible.</param>
            <param name="numRetries">Number of times to re-attempt the action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.TurnInPlace(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Int32)">
            <summary>
            Turn the robot around its current position.
            <para>Vector must be off of the charger for this movement action.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="angle">The angle to turn. Positive values turn to the left, negative values to the right.</param>
            <param name="speed">Angular turn speed (per second).</param>
            <param name="acceleration"> Acceleration of angular turn (per second squared).</param>
            <param name="angleTolerance">angular tolerance to consider the action complete (this is clamped to a minimum of 2 degrees internally).</param>
            <param name="isAbsolute">True to turn to a specific angle, False to turn relative to the current pose.</param>
            <param name="numRetries">Number of times to re-attempt the turn in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.TurnTowardsFace(Anki.Vector.Objects.Face,System.Int32)">
            <summary>
            Tells Vector to turn towards this face.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="face">The face Vector will turn towards.</param>
            <param name="numRetries">Number of times to reattempt the action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.GoToCube(System.Single,System.Int32)">
            <summary>
            Tells Vector to drive to his Cube.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="distanceFromCube">The distance from the cube to stop in mm.  This is the distance between the origins.<para>For instance, the distance from the robot's origin (between Vector's two front wheels) to the cube's origin (at the center of the cube) is ~40mm.</para></param>
            <param name="numRetries">Number of times to reattempt action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.InvalidOperationException">Light Cube must have been seen by Vector to run this command.</exception>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.RollCube(System.Nullable{System.Single},System.Int32)">
            <summary>
            Tells Vector to roll a specified cube object.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="approachAngle">The angle to approach the cube from in radians. <para>For example, 180 degrees will cause Vector to drive past the cube and approach it from behind.</para></param>
            <param name="numRetries">Number of times to reattempt action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.InvalidOperationException">Light Cube must have been seen by Vector to run this command.</exception>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.PopAWheelie(System.Nullable{System.Single},System.Int32)">
            <summary>
            Tells Vector to "pop a wheelie" using his light cube.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="approachAngle">The angle to approach the cube from in radians. <para>For example, 180 degrees will cause Vector to drive past the cube and approach it from behind.</para></param>
            <param name="numRetries">Number of times to reattempt action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.InvalidOperationException">Light Cube must have been seen by Vector to run this command.</exception>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.PickupObject(Anki.Vector.Objects.LightCube,System.Boolean,System.Int32)">
            <summary>
            Instruct the robot to pick up his LightCube.
            <para>While picking up the cube, Vector will use path planning.</para><para>Note that actions that use the wheels cannot be performed at the same time, otherwise you may see a TRACKS_LOCKED error.</para>
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="lightCube">The light cube.</param>
            <param name="usePreDockPose">Whether or not to try to immediately pick up an object or first position the robot next to the object.</param>
            <param name="numRetries">Number of times to reattempt action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.ArgumentException">Light cube object must be provided. - lightCube</exception>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.PlaceObjectOnGroundHere(System.Int32)">
            <summary>
            Ask Vector to place the object he is carrying on the ground at the current location.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="numRetries">Number of times to reattempt action in case of a failure.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.InvalidOperationException">Light Cube must have been seen by Vector to run this command.</exception>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.ListenForBeat">
            <summary>
            Request that Vector listens for a beat.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <remarks>This method will automatically release control.</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.StartExploring">
            <summary>
            Request that Vector start's exploring.  Vector reacts but doens't seem to actually start exploring with this method.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <remarks>This method will automatically release control.</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.SayName">
            <summary>
            Request that Vector looks for a face and say the associated name.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <remarks>This method will automatically release control.</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.Sleep">
            <summary>
            Requests that Vector goes to sleep
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <remarks>This method will automatically release control.</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.ListenForQuestion">
            <summary>
            Requests that Vector listen for a knowledge question and provide response.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <remarks>This method will automatically release control.</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.FindCube">
            <summary>
            Requests that Vector finds his cube.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <remarks>This method will automatically release control.</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.AppIntent(System.String,System.String)">
            <summary>
            Submit an intent for Vector to carry out.
            </summary>
            <param name="intent">The intent for Vector carry out.</param>
            <param name="param">Any extra parameters.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>Since AppIntents are run by Vector's AI; this method will automatically release control.</remarks>
            <remarks>The intent is not the same namespace as UserIntent</remarks>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.Cancel">
            <summary>
            Cancel the currently active behavior
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.RunBehavior``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,System.Threading.CancellationToken,Grpc.Core.AsyncUnaryCall{``0}})">
            <summary>
            Runs the behavior by wrapping it in code that allows for cancellation.
            </summary>
            <typeparam name="T">The result of the behavior</typeparam>
            <param name="function">The function to execute with CancellationToken parameter.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the function.</returns>
        </member>
        <member name="M:Anki.Vector.BehaviorComponent.RunAction``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,System.Threading.CancellationToken,System.Int32,Grpc.Core.AsyncUnaryCall{``0}})">
            <summary>
            Runs the action by wrapping it in code that allows for cancellation.  Provides the IdValue in callback
            </summary>
            <typeparam name="T">The result type of the action to run.</typeparam>
            <param name="function">The function.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.CameraComponent">
            <summary>
            Support for Vector’s camera.
            <para>Vector has a built-in camera which he uses to observe the world around him.  You can start receiving camera images from Vector by calling the <see cref="M:Anki.Vector.CameraComponent.StartFeed"/> method.  
            The <see cref="E:Anki.Vector.CameraComponent.ImageReceived"/> event will be raised for each frame received.  Although there is an <see cref="P:Anki.Vector.CameraComponent.ImageEncoding"/> property, the data received from Vector is always in
            the color JPEG format.</para>
            <para>The camera resolution is 1280 x 720 with a field of view of 90 deg (H) x 50 deg (V).</para>
            </summary>
        </member>
        <member name="F:Anki.Vector.CameraComponent.cameraFeed">
            <summary>
            The camera event loop
            </summary>
        </member>
        <member name="P:Anki.Vector.CameraComponent.ImageData">
            <summary>
            Gets the image data for the last image received by the camera if the feed is active
            </summary>
        </member>
        <member name="P:Anki.Vector.CameraComponent.ImageId">
            <summary>
            Gets the image identifier of the last image received by the camera
            </summary>
        </member>
        <member name="P:Anki.Vector.CameraComponent.ImageEncoding">
            <summary>
            Gets the image encoding of the last image received by the camera
            </summary>
        </member>
        <member name="P:Anki.Vector.CameraComponent.FrameTimestamp">
            <summary>
            Gets the frame robot timestamp of the last image received by the camera
            </summary>
        </member>
        <member name="E:Anki.Vector.CameraComponent.ImageReceived">
            <summary>
            Occurs when camera feed event.
            </summary>
        </member>
        <member name="M:Anki.Vector.CameraComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.CameraComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="P:Anki.Vector.CameraComponent.IsFeedActive">
            <summary>
            Gets a value indicating whether the camera feed is active.
            </summary>
            <value>
              <c>true</c> if the camera feed is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Anki.Vector.CameraComponent.StartFeed">
            <summary>
            Starts the camera feed.  The feed will run in a background thread and raise the <see cref="E:Anki.Vector.CameraComponent.ImageReceived" /> event for each received image.  It will
            also update the <see cref="P:Anki.Vector.CameraComponent.ImageData"/> property and the <see cref="P:Anki.Vector.CameraComponent.ImageId"/> property whenever a new image is received.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.StopFeed">
            <summary>
            Stops the camera feed.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.CaptureSingleImage">
            <summary>
            Request to capture a single image from the robot's camera.
            <para>This call requests the robot to capture an image and fills the properties of this component with the image information.  If the camera
            feed is active this call does nothing as the camera component properties already contain the latest image received from the robot.</para>
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.EnableImageStreaming">
            <summary>
            Enables the image streaming.
            <para>This method is not necessary for retrieving camera images and is only implemented here for completeness.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.DisableImageStreaming">
            <summary>
            Disables the image streaming.
            <para>This method is not necessary for retrieving camera images and is only implemented here for completeness.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.IsImageStreamingEnabled">
            <summary>
            Determines whether image streaming is enabled.
            <para>This should be identical to the <see cref="P:Anki.Vector.CameraComponent.IsFeedActive" /> property.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains whether not streaming is enabled.</returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Anki.Vector.CameraComponent.MapImageEncoding(Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding)">
            <summary>
            Maps the image encoding.
            </summary>
            <param name="imageEncoding">The robot image encoding.</param>
            <returns>The SDK image encoding</returns>
        </member>
        <member name="T:Anki.Vector.Client">
            <summary>
            This class abstracts all the gRPC connection login and provides access to the underlying Vector interface.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Anki.Vector.Client.IPAddress">
            <summary>
            Gets the current IP address of the robot.  Can be null if remote Vector connection is used.
            </summary>
        </member>
        <member name="F:Anki.Vector.Client.channel">
            <summary>
            The GRPC channel
            </summary>
        </member>
        <member name="F:Anki.Vector.Client.grpcClient">
            <summary>
            The gRPC client
            </summary>
        </member>
        <member name="F:Anki.Vector.Client.httpClient">
            <summary>
            The HTTP client for REST calls to Vector
            </summary>
        </member>
        <member name="M:Anki.Vector.Client.#ctor(Grpc.Core.Channel,System.String,System.String,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Client"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="certificate">The certificate.</param>
            <param name="guid">The unique identifier.</param>
            <param name="ipAddress">The ip address.</param>
        </member>
        <member name="M:Anki.Vector.Client.Connect(Anki.Vector.IRobotConfiguration,System.Net.IPAddress,System.Int32)">
            <summary>
            Connect to Vector on the local network using the specified robotConfiguration and IP address
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="ipAddress">The IP address.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the connected client.</returns>
        </member>
        <member name="M:Anki.Vector.Client.RemoteConnect(Anki.Vector.IRemoteRobotConfiguration,System.Int32)">
            <summary>
            Connects to the robot using the remote connection information.  This is used for connecting to Vector when he's not on the LAN.  
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the connected client.</returns>
        </member>
        <member name="M:Anki.Vector.Client.ConnectForAuth(System.String,System.String,System.String,System.Int32)">
            <summary>
            Connects to the robot for authentication.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="host">The host.</param>
            <param name="robotName">Name of the robot.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the connected client.</returns>
        </member>
        <member name="M:Anki.Vector.Client.ConnectClient(Grpc.Core.Channel,System.String,System.String,System.Net.IPAddress)">
            <summary>
            Creates and connects the client instance.
            </summary>
            <param name="channel">The channel.</param>
            <param name="certificate">The certificate.</param>
            <param name="guid">The unique identifier.</param>
            <param name="ipAddress">The ip address.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the connected client.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorInvalidVersionException">Your SDK version is not compatible with Vector’s version.</exception>
        </member>
        <member name="M:Anki.Vector.Client.RunCommand``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a command against the gRPC client instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="command">The command.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
        </member>
        <member name="M:Anki.Vector.Client.RunCommand``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,``0})">
            <summary>
            Runs a command against the gRPC client instance.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="command">The command.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
        </member>
        <member name="M:Anki.Vector.Client.CreateChannelCredentials(System.String,System.String)">
            <summary>
            Creates the GRPC channel credentials.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="guid">The unique identifier (optional).</param>
            <returns>The constructed channel credentials</returns>
        </member>
        <member name="M:Anki.Vector.Client.ConnectChannel(Grpc.Core.ChannelCredentials,System.String,System.String,System.Int32)">
            <summary>
            Creates the GRPC channel.
            </summary>
            <param name="channelCredentials">The channel credentials.</param>
            <param name="hostAndPort">The host and port.</param>
            <param name="robotName">Name of the robot.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the connected channel.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorNotFoundException">Unable to establish a connection to Vector.</exception>
        </member>
        <member name="M:Anki.Vector.Client.CreateHttpClient(System.String,System.String)">
            <summary>
            Creates the HTTP client for REST calls from the certificate and Guid.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="guid">The unique identifier.</param>
            <returns>The HTTP client to connect to Vector</returns>
        </member>
        <member name="M:Anki.Vector.Client.RunHttpCommand``2(System.String,``1)">
            <summary>
            Sends the HTTP REST command to Vector
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="address">The address (path of REST call) .</param>
            <param name="request">The request instance.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorNotConnectedException">Vector is not connected.</exception>
        </member>
        <member name="M:Anki.Vector.Client.GrpcDeadline(System.Int32)">
            <summary>
            Generate a deadline for GRPC calls
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>Deadline value</returns>
        </member>
        <member name="M:Anki.Vector.Client.TranslateGrpcException(Grpc.Core.RpcException)">
            <summary>
            Translates the GRPC exception into a Vector exception
            </summary>
            <param name="grpcException">The GRPC exception.</param>
            <returns>Translated exception</returns>
        </member>
        <member name="F:Anki.Vector.Client.disposedValue">
            <summary>To detect redundant calls </summary>
        </member>
        <member name="M:Anki.Vector.Client.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Anki.Vector.Client.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Anki.Vector.Component">
            <summary>
            Abstract base class for components.
            </summary>
            <seealso cref="T:Anki.Vector.RobotObject" />
        </member>
        <member name="P:Anki.Vector.Component.Robot">
            <summary>
            Gets the robot instance
            </summary>
        </member>
        <member name="M:Anki.Vector.Component.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Component" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.Component.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting Robot
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.ControlComponent">
            <summary>
            Management of the control of Vector's behaviors.
            <para>When you connect to Vector with this SDK he will behave normally.  Taking control of Vector will disable
            his internal behaviors (driving around autonomously, responding to voice commands, etc).  You are required to
            take control of Vector in order to execute commands that move Vector or provide other output.</para>
            <para>Call the <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/> method to request control of Vector and <see cref="M:Anki.Vector.ControlComponent.ReleaseControl"/> to 
            release control.  Unless you use priority level <see cref="F:Anki.Vector.ControlPriority.OverrideBehaviors"/> Vector will regain
            control automatically if he senses an edge or runs low on battery.  You can subscribe to the <see cref="E:Anki.Vector.ControlComponent.ControlGranted"/> and 
            <see cref="E:Anki.Vector.ControlComponent.ControlLost"/> events to get feedback on when you have acquired or lost control.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Component" />
        </member>
        <member name="E:Anki.Vector.ControlComponent.ControlGranted">
            <summary>
            Occurs when control of Vector is granted.
            </summary>
        </member>
        <member name="E:Anki.Vector.ControlComponent.ControlLost">
            <summary>
            Occurs when control of Vector is lost.
            </summary>
        </member>
        <member name="P:Anki.Vector.ControlComponent.HasControl">
            <summary>
            Gets a value indicating whether SDK has control over Vector
            </summary>
        </member>
        <member name="P:Anki.Vector.ControlComponent.MaintainBehaviorControl">
            <summary>
            Gets a value indicating whether SDK will attempt to acquire control automatically when a behavior method is called after
            losing control to higher priority behaviors such as returning home to charge a low battery.  
            </summary>
        </member>
        <member name="P:Anki.Vector.ControlComponent.ControlPriority">
            <summary>
            Gets the last requested control priority.
            </summary>
        </member>
        <member name="F:Anki.Vector.ControlComponent.behaviorFeed">
            <summary>
            The behavior feed
            </summary>
        </member>
        <member name="F:Anki.Vector.ControlComponent.behaviorResult">
            <summary>
            The behavior result
            </summary>
        </member>
        <member name="F:Anki.Vector.ControlComponent.DefaultControlTimeout">
            <summary>
            The connection timeout in milliseconds
            </summary>
        </member>
        <member name="M:Anki.Vector.ControlComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.ControlComponent"/> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)">
            <summary>
            Requests the control of Vector.
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <returns>A task that represents the asynchronous operation.  The task result indicated whether control was granted.</returns>
        </member>
        <member name="M:Anki.Vector.ControlComponent.RequestControl(Anki.Vector.ControlPriority,System.Int32)">
            <summary>
            Requests the control.
            </summary>
            <param name="priority">The priority.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation.  The task result indicated whether control was granted.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorControlTimeoutException">Surpassed control timeout</exception>
        </member>
        <member name="M:Anki.Vector.ControlComponent.ReleaseControl">
            <summary>
            Releases the control of Vector
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result indicated whether control was released.</returns>
        </member>
        <member name="M:Anki.Vector.ControlComponent.InternalReleaseControl">
            <summary>
            Releases the control of Vector without setting the MaintainBehaviorControl flag.  Used by internal methods to release
            control.
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result indicated whether control was released.</returns>
        </member>
        <member name="M:Anki.Vector.ControlComponent.WaitForControlChange">
            <summary>
            Waits for control to change.
            <para>The task will complete when control has changed and the result is true if SDK has control over Vector.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains whether not SDK has control.</returns>
        </member>
        <member name="M:Anki.Vector.ControlComponent.ProcessControlResponse(Anki.Vector.ExternalInterface.BehaviorControlResponse)">
            <summary>
            Processes the control response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Anki.Vector.ControlComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting Robot
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.EventComponent">
            <summary>
            Event handlers to subscribe to robot events.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anki.Vector.EventComponent.EventStreamTimeout">
            <summary>
            The event stream timeout
            </summary>
        </member>
        <member name="F:Anki.Vector.EventComponent.eventFeed">
            <summary>
            The event feed loop
            </summary>
        </member>
        <member name="F:Anki.Vector.EventComponent.timeoutCancellationTokenSource">
            <summary>
            Gets the cancellation token source for timing out the event loop
            </summary>
        </member>
        <member name="F:Anki.Vector.EventComponent.lostConnection">
            <summary>Lost connection to Vector</summary>
        </member>
        <member name="M:Anki.Vector.EventComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.EventComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="P:Anki.Vector.EventComponent.IsProccessingEvents">
            <summary>
            Gets a value indicating whether this instance is processing events.
            </summary>
        </member>
        <member name="M:Anki.Vector.EventComponent.Start">
            <summary>
            Starts the event processing
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">The camera feed has already been started.</exception>
        </member>
        <member name="M:Anki.Vector.EventComponent.End">
            <summary>
            Ends the event processing
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.EventComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="E:Anki.Vector.EventComponent.RobotEvent">
            <summary>
            Occurs for every robot event
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ConnectionResponse">
            <summary>
            Occurs when connection response received.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.CubeBattery">
            <summary>
            Occurs when cube batter status received.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.WakeWordBegin">
            <summary>
            Robot event triggered when Vector hears "Hey Vector"
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.WakeWordEnd">
            <summary>
            Robot event triggered after Vector finishes listening to "Hey Vector"
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.AttentionTransfer">
            <summary>
            Robot event triggered after Vector finishes RCM TBD
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.KeepAlive">
            <summary>
            Keep alive event from robot
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.MirrorModeDisabled">
            <summary>
            Occurs when mirror mode is disabled.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.CubeConnectionLost">
            <summary>
            Occurs when the cube connection is lost.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObjectAvailable">
            <summary>
            After the ConnectCube process is started, all available light cubes in range will broadcast an availability message through the Robot.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObjectConnectionState">
            <summary>
            Connection state change of the cube
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObjectMoved">
            <summary>
            Robot event triggered when an object starts moving.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObjectStoppedMoving">
            <summary>
            Robot event triggered when an object stops moving.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObjectTapped">
            <summary>
            Robot event triggered when an object is tapped.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObjectUpAxisChanged">
            <summary>
            Robot event triggered when an object’s orientation changed.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObservedObject">
            <summary>
            Robot event triggered when an object is observed by the robot.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.PhotoTaken">
            <summary>
            Robot event when photo is taken
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ChangedObservedFaceId">
            <summary>
            Robot event for when observed face changes
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.ObservedFace">
            <summary>
            Robot event for when a face is observed by the robot.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.RobotState">
            <summary>
            Robot event containing changes to the robot’s state.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.StimulationInfo">
            <summary>
            Robot event containing stimulation information.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.FeatureStatus">
            <summary>
            Occurs when a feature is invoked.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.FaceEnrollmentCompleted">
            <summary>
            Robot event when face enrollment completed.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.FaceScanComplete">
            <summary>
            Robot event when face scan completed.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.FaceScanStarted">
            <summary>
            Robot event when face scan started.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.VisionModesAutoDisabled">
            <summary>
            Robot event vision modes are automatically disabled.
            </summary>
        </member>
        <member name="E:Anki.Vector.EventComponent.UserIntent">
            <summary>
            Root event triggered after processing voice commands.
            <para>Note: This event is only sent if the application has reserved
            control -- and thus Vector will not carry it out.</para>
            <para>See also WakeWordEnd (to receive the intent when we haven't reserved control), and AppIntent to send an intent</para>
            </summary>
        </member>
        <member name="M:Anki.Vector.EventComponent.OnCubeConnected(Anki.Vector.ExternalInterface.ConnectCubeResponse)">
            <summary>
            Called when cube is explicitly connected.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Anki.Vector.EventComponent.ProcessEvent(Anki.Vector.ExternalInterface.EventResponse)">
            <summary>
            Processes the event.  This is called directly from event feed loop
            </summary>
            <param name="eventResponse">The event response.</param>
        </member>
        <member name="M:Anki.Vector.EventComponent.ProcessWakeWord(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Processes the wake word event 
            </summary>
            <param name="e">The wake word data.</param>
        </member>
        <member name="M:Anki.Vector.EventComponent.ProcessObjectEvent(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Processes the object event.
            </summary>
            <param name="e">The object event.</param>
        </member>
        <member name="M:Anki.Vector.EventComponent.ProcessTimestampedStatus(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Processes the timestamped status events.
            </summary>
            <param name="e">The event details.</param>
        </member>
        <member name="M:Anki.Vector.EventComponent.RaiseRobotEvents``1(System.EventHandler{``0},``0)">
            <summary>
            Raises the <see cref="E:Anki.Vector.EventComponent.RobotEvent"/> event and then the specified event handler
            </summary>
            <typeparam name="T">Event args type</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="T:Anki.Vector.Events.AttentionTransferEventArgs">
            <summary>
            Vector attention transfer info event args
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AttentionTransferEventArgs.Reason">
            <summary>
            Gets the reason that the attention was changed.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AttentionTransferEventArgs.SecondsAgo">
            <summary>
            Gets how long ago the attention was changed.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.AttentionTransferEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.AttentionTransferEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.AudioReceivedEventArgs">
            <summary>
            Audio received event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.AudioReceivedEventArgs.#ctor(Anki.Vector.ExternalInterface.AudioFeedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.AudioReceivedEventArgs" /> class.
            </summary>
            <param name="response">The audio feed response.</param>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.GroupId">
            <summary>
            Gets the index of audio feed response
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.AudioData">
            <summary>
            Gets the audio data.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.NoiseFloorPower">
            <summary>
            Gets the power value, convert to db with log_10(value)
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.DirectionStrengths">
            <summary>
            Gets the histogram data of which directions this audio chunk came from
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.SourceConfidence">
            <summary>
            Gets the accuracy of the calculated SourceDirection
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.SourceDirection">
            <summary>
            Gets the source direction; 0-11 with 12 representing "invalid"
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.AudioReceivedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp at the transmission of this audio sample group
            </summary>
        </member>
        <member name="T:Anki.Vector.Events.ConnectedEventArgs">
            <summary>
            Event args for the connected event
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ConnectedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ConnectedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Anki.Vector.Events.ConnectionResponseEventArgs">
            <summary>
            Connection response event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ConnectionResponseEventArgs.IsPrimary">
            <summary>
            Gets a value indicating whether this instance is primary.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ConnectionResponseEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ConnectionResponseEventArgs" /> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.ControlGrantedEventArgs">
            <summary>
            Event args for control granted event
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ControlGrantedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ControlGrantedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Anki.Vector.Events.ControlLostEventArgs">
            <summary>
            Event args for control lost event
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ControlLostEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ControlLostEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Anki.Vector.Events.CubeBatteryLevel">
            <summary>
            Cube battery level 
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.CubeBatteryLevel.Low">
            <summary>Cube battery is low</summary>
        </member>
        <member name="F:Anki.Vector.Events.CubeBatteryLevel.Normal">
            <summary>Cube battery is normal</summary>
        </member>
        <member name="T:Anki.Vector.Events.CubeBatteryEventArgs">
            <summary>
            Cube battery level event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.CubeBatteryEventArgs.BatteryVolts">
            <summary>
            Gets the battery level in volts.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.CubeBatteryEventArgs.Level">
            <summary>
            Gets the battery level.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.CubeBatteryEventArgs.FactoryId">
            <summary>
            Gets the factory identifier of the cube.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.CubeBatteryEventArgs.TimeSinceLastReadingSec">
            <summary>
            Gets the time since last reading in seconds.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.CubeBatteryEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.CubeBatteryEventArgs" /> class.
            </summary>
            <param name="e">The event information.</param>
        </member>
        <member name="T:Anki.Vector.Events.CubeConnectionLostEventArgs">
            <summary>
            Cube connection lost event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.CubeConnectionLostEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.CubeConnectionLostEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.DelocalizedEventArgs">
            <summary>
            Event args for the delocalized event
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.DelocalizedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.DelocalizedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Anki.Vector.Events.DisconnectedEventArgs">
            <summary>
            Event args for the disconnected event
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.DisconnectedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.DisconnectedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:Anki.Vector.Events.ErrorEventArgs">
            <summary>
            Event args for background SDK errors
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the disconnection, if one exists.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ErrorEventArgs" /> class.
            </summary>
            <param name="exception">The exception that caused the disconnection.</param>
        </member>
        <member name="T:Anki.Vector.Events.FaceEnrollmentResult">
            <summary>
            Face enrollment result
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.Success">
            <summary>Successfully enrolled face</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.SawWrongFace">
            <summary>Saw the wrong face</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.SawMultipleFaces">
            <summary>Saw multiple faces</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.TimedOut">
            <summary>Timed out</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.SaveFailed">
            <summary>Face save failed</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.Incomplete">
            <summary>Incomplete</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.Cancelled">
            <summary>Cancelled</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.NameInUse">
            <summary>Name in use</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.NameStorageFull">
            <summary>Name storage file</summary>
        </member>
        <member name="F:Anki.Vector.Events.FaceEnrollmentResult.UnknownFailure">
            <summary>Unknown failure</summary>
        </member>
        <member name="T:Anki.Vector.Events.FaceEnrollmentCompletedEventArgs">
            <summary>
            Face enrollment completed event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.FaceEnrollmentCompletedEventArgs.FaceId">
            <summary>
            Gets the face identifier of the detected face
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.FaceEnrollmentCompletedEventArgs.Name">
            <summary>
            Gets the name associated with the face detected
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.FaceEnrollmentCompletedEventArgs.Result">
            <summary>
            Gets the result of the face enrollment
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.FaceEnrollmentCompletedEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.FaceEnrollmentCompletedEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.FaceScanCompleteEventArgs">
            <summary>
            Face scan complete
            </summary>
            <seealso cref="T:Anki.Vector.Events.TimestampedStatusEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.FaceScanCompleteEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.FaceScanCompleteEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.FaceScanStartedEventArgs">
            <summary>
            Face scan started
            </summary>
            <seealso cref="T:Anki.Vector.Events.TimestampedStatusEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.FaceScanStartedEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.FaceScanStartedEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.FeatureStatusEventArgs">
            <summary>
            Feature status event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.FeatureStatusEventArgs.FeatureName">
            <summary>
            Gets the name of the feature
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.FeatureStatusEventArgs.Source">
            <summary>
            Gets the source of the feature invocation (voice, app, AI, unknown)
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.FeatureStatusEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.FeatureStatusEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.ImageReceivedEventArgs">
            <summary>
            Image received event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ImageReceivedEventArgs.ImageId">
            <summary>
            Gets the image identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ImageReceivedEventArgs.ImageData">
            <summary>
            Gets the image data.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ImageReceivedEventArgs.FrameTimestamp">
            <summary>
            Gets the frame robot timestamp.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ImageReceivedEventArgs.ImageEncoding">
            <summary>
            Gets the image encoding.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ImageReceivedEventArgs.#ctor(Anki.Vector.ExternalInterface.CameraFeedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ImageReceivedEventArgs" /> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:Anki.Vector.Events.KeepAliveEventArgs">
            <summary>
            Keep alive event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.KeepAliveEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.KeepAliveEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.KnownFaceAppearedEventArgs">
            <summary>
            Known face detected event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.KnownFaceAppearedEventArgs.Face">
            <summary>
            Gets the face that triggered the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.KnownFaceAppearedEventArgs.#ctor(Anki.Vector.Objects.Face)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.KnownFaceAppearedEventArgs" /> class.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="T:Anki.Vector.Events.MirrorModeDisabledEventArgs">
            <summary>
            Mirror mode disabled event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.MirrorModeDisabledEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.MirrorModeDisabledEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.NavMapUpdateEventArgs">
            <summary>
            Nav map update event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.NavMapUpdateEventArgs.NavMap">
            <summary>
            Gets the nav map grid.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.NavMapUpdateEventArgs.#ctor(Anki.Vector.ExternalInterface.NavMapFeedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.NavMapUpdateEventArgs" /> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectAddedEventArgs">
            <summary>
            Object added event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ObjectAddedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectAddedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectAppearedEventArgs">
            <summary>
            Object appeared event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectAppearedEventArgs.ImageRect">
            <summary>
            Gets the position in image coordinates
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ObjectAppearedEventArgs.Pose">
            <summary>
            Gets the pose of the object
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ObjectAppearedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectAppearedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject,Anki.Vector.Events.RobotObservedObjectEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectAppearedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Events.ObjectAppearedEventArgs.#ctor(Anki.Vector.Objects.Face,Anki.Vector.Events.RobotObservedFaceEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectAppearedEventArgs"/> class.
            </summary>
            <param name="face">The face.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedFaceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectConnectedEventArgs">
            <summary>
            Object disappeared event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ObjectConnectedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectConnectedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectDisappearedEventArgs">
            <summary>
            Object disappeared event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ObjectDisappearedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectDisappearedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectDisconnectedEventArgs">
            <summary>
            Object disappeared event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.ObjectDisconnectedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectDisconnectedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectEventArgs">
            <summary>
            Abstract base class event args for all object events
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectEventArgs.Object">
            <summary>
            Gets the object that triggered the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectEventArgs.#ctor(Anki.Vector.Objects.ObservableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectFinishedMovingEventArgs">
            <summary>
            Object stopped moving event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectFinishedMovingEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ObjectFinishedMovingEventArgs.MoveDuration">
            <summary>
            Gets the duration of the move.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectFinishedMovingEventArgs.#ctor(Anki.Vector.Objects.ObservableObject,Anki.Vector.Events.RobotObjectStoppedMovingEventArgs,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectFinishedMovingEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs" /> instance containing the event data.</param>
            <param name="moveDuration">The move duration.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectMovingEventArgs">
            <summary>
            Object moved event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectMovingEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectMovingEventArgs.#ctor(Anki.Vector.Objects.ObservableObject,Anki.Vector.Events.RobotObjectMovedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectMovingEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectMovedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectObservedEventArgs">
            <summary>
            Object appeared event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectObservedEventArgs.ImageRect">
            <summary>
            Gets the position in image coordinates
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ObjectObservedEventArgs.Pose">
            <summary>
            Gets the pose of the object
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ObjectObservedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectObservedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject,Anki.Vector.Events.RobotObservedObjectEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectObservedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Events.ObjectObservedEventArgs.#ctor(Anki.Vector.Objects.Face,Anki.Vector.Events.RobotObservedFaceEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectObservedEventArgs"/> class.
            </summary>
            <param name="face">The face.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedFaceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectTappedEventArgs">
            <summary>
            Object tapped event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectTappedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectTappedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject,Anki.Vector.Events.RobotObjectTappedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectTappedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectTappedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectUpAxisChangedEventArgs">
            <summary>
             Object up axis changed event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.ObjectEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.ObjectUpAxisChangedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.ObjectUpAxisChangedEventArgs.UpAxis">
            <summary>
            Gets up axis.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.ObjectUpAxisChangedEventArgs.#ctor(Anki.Vector.Objects.ObservableObject,Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.ObjectUpAxisChangedEventArgs" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Anki.Vector.Events.PhotoTakenEventArgs">
            <summary>
            Photo taken event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.PhotoTakenEventArgs.PhotoId">
            <summary>
            Gets the photo identifier of the photo that was taken
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.PhotoTakenEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.PhotoTakenEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs">
            <summary>
            Robot changed observed face id event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs.NewId">
            <summary>
            Gets the new face identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs.OldId">
            <summary>
            Gets the old face identifier.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.None">
            <summary>No event was triggered</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.TimeStampedStatus">
            <summary>Timestamped status event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.WakeWord">
            <summary>Wake word event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.RobotObservedFace">
            <summary>Observed face event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.RobotChangedObservedFaceId">
            <summary>Detected faced changed</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.ObjectEvent">
            <summary>Object event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.StimulationInfo">
            <summary>Stimulation info event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.PhotoTaken">
            <summary>Photo taken event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.RobotState">
            <summary>Robot state event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.CubeBattery">
            <summary>Cube battery event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.KeepAlive">
            <summary>Keep alive event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.ConnectionResponse">
            <summary>Connection response event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.MirrorModeDisabled">
            <summary>Mirror mode disabled event</summary>
        </member>
        <member name="F:Anki.Vector.Events.EventType.VisionModesAutoDisabled">
            <summary>Vision modes auto disabled event</summary>
        </member>
        <member name="T:Anki.Vector.Events.RobotEventArgs">
            <summary>
            Robot event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotEventArgs.EventType">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotEventArgs"/> class.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:Anki.Vector.Events.RobotEventArgs.#ctor(Anki.Vector.Events.EventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotEventArgs"/> class.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectAvailableEventArgs">
            <summary>
            Cube availability event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectAvailableEventArgs.FactoryId">
            <summary>
            Gets the factory identifier of the available cube
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectAvailableEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectAvailableEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectConnectionStateEventArgs">
            <summary>
            Object connection state event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.Connected">
            <summary>
            Gets a value indicating whether the object is connected.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.FactoryId">
            <summary>
            Gets the factory identifier of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.ObjectType">
            <summary>
            Gets the type of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.CustomObjectType">
            <summary>
            Gets the index of the custom object.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectConnectionStateEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectConnectionStateEventArgs.#ctor(Anki.Vector.ExternalInterface.ConnectCubeResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectConnectionStateEventArgs"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:Anki.Vector.Events.ObjectEventType">
            <summary>
            Object event type
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.None">
            <summary>No event</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.ObjectAvailable">
            <summary>Object available event</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.ObjectConnectionState">
            <summary>Object connection state event</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.ObjectMoved">
            <summary>Object moved event</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.ObjectStoppedMoving">
            <summary>Object stopped moving event</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.ObjectUpAxisChanged">
            <summary>Object up axis changed event</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.ObjectTapped">
            <summary>Object tapped</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.RobotObservedObject">
            <summary>Object observed</summary>
        </member>
        <member name="F:Anki.Vector.Events.ObjectEventType.CubeConnectionLost">
            <summary>Cube connection lost</summary>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectEventArgs">
            <summary>
            Object event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectEventArgs.ObjectEventType">
            <summary>
            Gets the object event type.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectEventArgs.#ctor(Anki.Vector.Events.ObjectEventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectEventArgs"/> class.
            </summary>
            <param name="objectEventType">Type of the object event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectMovedEventArgs">
            <summary>
            Object moved event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectMovedEventArgs.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectMovedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectMovedEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectMovedEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs">
            <summary>
            Object stopped moving event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectTappedEventArgs">
            <summary>
            Object tapped event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectTappedEventArgs.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectTappedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectTappedEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectTappedEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs">
            <summary>
            Object up axis changed event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs.UpAxis">
            <summary>
            Gets the up axis.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObservedFaceEventArgs">
            <summary>
            Robot Observed Face Event Args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.Expression">
            <summary>
            Gets the facial expression Vector has recognized on the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.ExpressionValues">
            <summary>
            Gets individual expression values histogram, sums to 100
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.FaceId">
            <summary>
            Gets the internal ID assigned to the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.ImageRect">
            <summary>
            Gets the image rectangle of the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.LeftEye">
            <summary>
            Gets points representing the outline of the left eye.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.Mouth">
            <summary>
            Gets points representing the outline of the mouth
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.Name">
            <summary>
            Gets the name Vector has associated with the face.  Empty if face is not recognized or enrolled
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.Nose">
            <summary>
            Gets points representing the outline of the nose.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.Pose">
            <summary>
            Gets the location of the face
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.RightEye">
            <summary>
            Gets points representing the outline of the right eye.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedFaceEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObservedFaceEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObservedFaceEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotObservedObjectEventArgs">
            <summary>
            Robot observed object event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.ImageRect">
            <summary>
            Gets the position in image coordinates
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.IsActive">
            <summary>
            Gets a value indicating whether the object is active.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.ObjectId">
            <summary>
            Gets the object identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.ObjectType">
            <summary>
            Gets the type of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.CustomObjectType">
            <summary>
            Gets the index of the custom object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.Pose">
            <summary>
            Gets the pose of the object
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.RobotTimestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotObservedObjectEventArgs.TopFaceOrientationRad">
            <summary>
            Gets the absolute top face orientation in radians
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotObservedObjectEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.RobotStateEventArgs">
            <summary>
            Gets robot state event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.Acceleration">
            <summary>
            Gets the current accelerometer reading
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.CarryingObjectId">
            <summary>
            Gets the ID of the object currently being carried (-1 if none)
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.CarryingObjectOnTopId">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.Gyro">
            <summary>
            Gets the current gyroscope reading (x, y, z) 
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.HeadAngleRad">
            <summary>
            Gets Vector's head angle (up/down) in radians
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.HeadTrackingObjectId">
            <summary>
            Gets the ID of the object the head is tracking to (-1 if none)
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.LastImageTimestamp">
            <summary>
            Gets the robot's timestamp for the last image seen.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.LeftWheelSpeedMmps">
            <summary>
            Gets Vector’s left wheel speed in mm/sec
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.LiftHeightMm">
            <summary>
            Gets the height of Vector’s lift from the ground.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.LocalizedToObjectId">
            <summary>
            Gets the ID of the object that the robot is localized to (-1 if none)
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.Pose">
            <summary>
            Gets the current pose (position and orientation) of Vector.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.PoseAngleRad">
            <summary>
            Gets Vector's pose angle (heading in X-Y plane) in radians
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.PosePitchRad">
            <summary>
            Gets Vector’s pose pitch (angle up/down) in radians
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.Proximity">
            <summary>
            Gets the proximity sensor data.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.RightWheelSpeedMmps">
            <summary>
            Gets Vector's right wheel speed in mm/sec
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.Status">
            <summary>
            Gets the various status properties of the robot.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.RobotStateEventArgs.Touch">
            <summary>
            Gets the object touch detection values.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.RobotStateEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.RobotStateEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.StimulationInfoEventArgs">
            <summary>
            Vector stimulation info event args
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.Acceleration">
            <summary>
            Gets the acceleration per second squared.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.EmotionEvents">
            <summary>
            Gets the emotion events.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.MaxValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.MinValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.Value">
            <summary>
            Gets the stimulation value.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.ValueBeforeEvent">
            <summary>
            Gets the stimulation value before event.  Matches value if there were no events.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.StimulationInfoEventArgs.Velocity">
            <summary>
            Gets the velocity per second
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.StimulationInfoEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.StimulationInfoEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.StatusType">
            <summary>
            Status type
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.StatusType.None">
            <summary>No event</summary>
        </member>
        <member name="F:Anki.Vector.Events.StatusType.FeatureStatus">
            <summary>AI Feature Status</summary>
        </member>
        <member name="F:Anki.Vector.Events.StatusType.MeetVictorFaceScanStarted">
            <summary>Face scan started event</summary>
        </member>
        <member name="F:Anki.Vector.Events.StatusType.MeetVictorFaceScanComplete">
            <summary>Face scan completed event</summary>
        </member>
        <member name="F:Anki.Vector.Events.StatusType.FaceEnrollmentCompleted">
            <summary>Face enrollment completed event</summary>
        </member>
        <member name="T:Anki.Vector.Events.TimestampedStatusEventArgs">
            <summary>
            The timestamped status event args
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.TimestampedStatusEventArgs.StatusType">
            <summary>
            Gets the type of the status.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.TimestampedStatusEventArgs.Timestamp">
            <summary>
            Gets the robot timestamp of the event
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.TimestampedStatusEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.TimestampedStatusEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.UserIntent">
            <summary>
            List of UserIntent events available to the SDK.
            <para>Vector's voice recognition allows for variation in grammar and word selection, so the examples are not the only way to invoke the voice commands.</para>
            <para>This list reflect only the voice commands available to the SDK, as some are not available for development use.</para>
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.CharacterAge">
            <summary>example  "How old are you?"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.CheckTimer">
            <summary>example  "Check the timer."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ExploreStart">
            <summary>example  "Go explore."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.GlobalStop">
            <summary>example  "Stop the timer."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.GreetingGoodbye">
            <summary>example  "Goodbye!"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.GreetingGoodmorning">
            <summary>example  "Good morning!"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.GreetingHello">
            <summary>example  "Hello!"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeAbuse">
            <summary>example  "I hate you."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeAffirmative">
            <summary>example  "Yes."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeApology">
            <summary>example  "I'm sorry."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeCome">
            <summary>example  "Come here."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeDance">
            <summary>example  "Dance."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeFetchCube">
            <summary>example  "Fetch your cube."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeFindCube">
            <summary>example  "Find your cube."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeLookAtMe">
            <summary>example  "Look at me."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeLove">
            <summary>example  "I love you."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativePraise">
            <summary>example  "Good Robot."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeNegative">
            <summary>example  "No."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeScold">
            <summary>example  "Bad Robot."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeVolumeLevel">
            <summary>example  "Volume 2."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeVolumeUp">
            <summary>example  "Volume up."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ImperativeVolumeDown">
            <summary>example  "Volume down."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.MovementForward">
            <summary>example  "Go forward."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.MovementBackward">
            <summary>example  "Go backward."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.MovementTurnLeft">
            <summary>example  "Turn left."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.MovementTurnRight">
            <summary>example  "Turn right."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.MovementTurnAround">
            <summary>example  "Turn around."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.KnowledgeQuestion">
            <summary>example  "I have a question."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.NamesAsk">
            <summary>example  "What's my name?"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayAnyGame">
            <summary>example  "Play a game."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayAnyTrick">
            <summary>example  "Play a trick."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayBlackjack">
            <summary>example  "Let's play Blackjack."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayFistBump">
            <summary>example  "Fist bump."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayPickupCube">
            <summary>example  "Pick up your cube."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayPopAWheelie">
            <summary>example  "Pop a wheelie."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.PlayRollCube">
            <summary>example  "Roll your cube."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.SeasonalHappyHolidays">
            <summary>example  "Happy holidays!"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.SeasonalHappyNewYear">
            <summary>example  "Happy new year!"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.SetTimer">
            <summary>example  "Set timer for 10 minutes"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.ShowClock">
            <summary>example  "What time is it?"</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.TakePhoto">
            <summary>example  "Take a selfie."</summary>
        </member>
        <member name="F:Anki.Vector.Events.UserIntent.WeatherResponse">
            <summary>example  "What is the weather report?"</summary>
        </member>
        <member name="T:Anki.Vector.Events.UserIntentEventArgs">
            <summary>
            User intent event args.
            <para>Contains the voice command information from the event stream.  The <see cref="T:Anki.Vector.Events.UserIntent"/> enumeration includes all of the voice 
            commands that the SDK can intercept.</para>
            <para>Some UserIntents include information returned from the cloud and used when evaluating the voice commands.  
            This information is available in the <see cref="P:Anki.Vector.Events.UserIntentEventArgs.IntentData"/> JSON formatted string.</para>
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.UserIntentEventArgs.Intent">
            <summary>
            Gets the voice command user intent type
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.UserIntentEventArgs.IntentData">
            <summary>
            Gets the  voice command specific data in JSON format.
            <para>Some voice commands contain information from processing.  For example, asking Vector "Hey Vector, what is the weather?" will 
            return the current location and the weather forecast.</para>
            <para>This value will be empty for voice commands without additional information.</para>
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.UserIntentEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.UserIntentEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.VisionModesAutoDisabledEventArgs">
            <summary>
            Vision modes auto disabled event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.VisionModesAutoDisabledEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.VisionModesAutoDisabledEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.WakeWordBeginEventArgs">
            <summary>
            Wake word begin event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.WakeWordEventArgs" />
        </member>
        <member name="M:Anki.Vector.Events.WakeWordBeginEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.WakeWordBeginEventArgs"/> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.WakeWordEndEventArgs">
            <summary>
            Wake word end event args.
            This is sent when the response (and potential intent) is received from the cloud.  This is sent before the UserIntent event (if any).
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.WakeWordEndEventArgs.IntentHeard">
            <summary>
            Gets a value indicating whether the intent was heard.
            True if a sentence was recognized with an associated intent; false otherwise.
            </summary>
        </member>
        <member name="P:Anki.Vector.Events.WakeWordEndEventArgs.IntentJson">
            <summary>
            Gets the intent and parameters as a JSON formatted string.
            This is empty if an intent was not heard (IntentHeard is false), or if the client does not have control.
            In the later case, a UserIntent event with the intent JSON data will be sent.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.WakeWordEndEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.WakeWordEndEventArgs" /> class.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Anki.Vector.Events.WakeWordEventType">
            <summary>
            Wake word event types
            </summary>
        </member>
        <member name="F:Anki.Vector.Events.WakeWordEventType.None">
            <summary>No event</summary>
        </member>
        <member name="F:Anki.Vector.Events.WakeWordEventType.WakeWordBegin">
            <summary>Wake word started event</summary>
        </member>
        <member name="F:Anki.Vector.Events.WakeWordEventType.WakeWordEnd">
            <summary>Wake work ended event</summary>
        </member>
        <member name="T:Anki.Vector.Events.WakeWordEventArgs">
            <summary>
            Wake word event args
            </summary>
            <seealso cref="T:Anki.Vector.Events.RobotEventArgs" />
        </member>
        <member name="P:Anki.Vector.Events.WakeWordEventArgs.WakeWordEventType">
            <summary>
            Gets the wake word event type.
            </summary>
        </member>
        <member name="M:Anki.Vector.Events.WakeWordEventArgs.#ctor(Anki.Vector.ExternalInterface.Event)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Events.WakeWordEventArgs" /> class.
            </summary>
            <param name="e">The event info.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorAudioPlaybackException">
            <summary>
            Request to Vector has failed
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAudioPlaybackException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAudioPlaybackException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAudioPlaybackException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAudioPlaybackException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAudioPlaybackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAudioPlaybackException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorAuthenticationFailureType">
            <summary>
            Type of authentication failure.  
            </summary>
        </member>
        <member name="F:Anki.Vector.Exceptions.VectorAuthenticationFailureType.Unknown">
            <summary>
            The authentication failure type is not known.
            </summary>
        </member>
        <member name="F:Anki.Vector.Exceptions.VectorAuthenticationFailureType.Connection">
            <summary>
            Unable to connect to robot for authentication.
            </summary>
        </member>
        <member name="F:Anki.Vector.Exceptions.VectorAuthenticationFailureType.SerialNumber">
            <summary>
            The serial number is not valid.
            </summary>
        </member>
        <member name="F:Anki.Vector.Exceptions.VectorAuthenticationFailureType.IPAddress">
            <summary>
            The IP address is missing and could not be determined automatically.
            </summary>
        </member>
        <member name="F:Anki.Vector.Exceptions.VectorAuthenticationFailureType.Login">
            <summary>
            The email address or password is not correct.
            </summary>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorAuthenticationException">
            <summary>
            Failure during authentication
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="P:Anki.Vector.Exceptions.VectorAuthenticationException.FailureType">
            <summary>
            Gets the type of the failure.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAuthenticationException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAuthenticationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAuthenticationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAuthenticationException.#ctor(Anki.Vector.Exceptions.VectorAuthenticationFailureType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAuthenticationException" /> class.
            </summary>
            <param name="failureType">Type of the failure.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorAuthenticationException.#ctor(Anki.Vector.Exceptions.VectorAuthenticationFailureType,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorAuthenticationException" /> class.
            </summary>
            <param name="failureType">Type of the failure.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorConfigurationException">
            <summary>
            The <see cref="T:Anki.Vector.IRobotConfiguration"/> instance is not valid.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorConfigurationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorConfigurationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorConnectionException">
            <summary>
            Connection to Vector failed 
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorConnectionException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorConnectionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorConnectionException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorControlException">
            <summary>
            Unable to run a function which requires behavior control.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorControlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorControlException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorControlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorControlException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorControlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorControlException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorControlTimeoutException">
            <summary>
            Failed to get control of Vector.
            <para>Please verify that Vector is connected to the Internet, is on a flat surface, and is fully charged.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorControlTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorControlTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorControlTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorControlTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorControlTimeoutException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorControlTimeoutException"/> class.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorException">
            <summary>
            Base class of all Vector SDK exceptions.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException">
            <summary>
            Failed to play external audio on Vector.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorExternalAudioPlaybackException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorInvalidValueException">
            <summary>
            Failed to authenticate request.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorConnectionException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorInvalidValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorInvalidValueException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorInvalidValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorInvalidValueException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorInvalidValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorInvalidValueException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorInvalidVersionException">
            <summary>
            Your SDK version is not compatible with Vector’s version.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorInvalidVersionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorInvalidVersionException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorInvalidVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorInvalidVersionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorInvalidVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorInvalidVersionException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorNotConnectedException">
            <summary>
            Robot object is not connected.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorNotConnectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorNotConnectedException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorNotConnectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorNotConnectedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorNotConnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorNotConnectedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorNotFoundException">
            <summary>
            Unable to establish a connection to Vector.
            <para>Make sure you’re on the same network, and Vector is connected to the Internet.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorNotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorRequestException">
            <summary>
            Request to Vector has failed
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorException" />
        </member>
        <member name="P:Anki.Vector.Exceptions.VectorRequestException.StatusCode">
            <summary>
            Gets the status code of the request.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorRequestException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorRequestException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorRequestException.#ctor(Anki.Vector.Types.StatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorRequestException" /> class.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorRequestException.#ctor(Anki.Vector.Types.StatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorRequestException" /> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorRequestException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorTimeoutException">
            <summary>
            Message took too long to complete.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorConnectionException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorTimeoutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorTimeoutException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorUnauthenticatedException">
            <summary>
            Failed to authenticate request.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorConnectionException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnauthenticatedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnauthenticatedException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnauthenticatedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnauthenticatedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnauthenticatedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnauthenticatedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorUnavailableException">
            <summary>
            Unable to reach Vector.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorConnectionException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnavailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnavailableException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnavailableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnavailableException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.Exceptions.VectorUnimplementedException">
            <summary>
            Vector does not handle this message.
            </summary>
            <seealso cref="T:Anki.Vector.Exceptions.VectorConnectionException" />
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnimplementedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnimplementedException"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnimplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnimplementedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Anki.Vector.Exceptions.VectorUnimplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Exceptions.VectorUnimplementedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AlexaReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/alexa.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AlexaReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/alexa.proto</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthState.AlexaAuthInvalid">
            <summary>
            Invalid/error/versioning issue
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthState.AlexaAuthUninitialized">
            <summary>
            Not opted in, or opt-in attempted but failed
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthState.AlexaAuthRequestingAuth">
            <summary>
            Opted in, and attempting to authorize
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthState.AlexaAuthWaitingForCode">
            <summary>
            Opted in, and waiting on the user to enter a code
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthState.AlexaAuthAuthorized">
            <summary>
            Opted in, and authorized / in use
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthStateResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthStateResponse.AuthStateFieldNumber">
            <summary>Field number for the "auth_state" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthStateResponse.ExtraFieldNumber">
            <summary>Field number for the "extra" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaOptInRequest.OptInFieldNumber">
            <summary>Field number for the "opt_in" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaOptInResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthEvent.AuthStateFieldNumber">
            <summary>Field number for the "auth_state" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlexaAuthEvent.ExtraFieldNumber">
            <summary>Field number for the "extra" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.BehaviorReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/behavior.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/behavior.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ControlRelease">
            <summary>
            Tell the behavior stream to release control from the SDK.
            The stream may stay alive, but Vector will be allowed to run
            his normal behaviors.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ControlRequest">
            <summary>
            Request control of the behavior system at a given priority.
            Currently there is only one priority level.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ControlRequest.PriorityFieldNumber">
            <summary>Field number for the "priority" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ControlRequest.Priority">
            <summary>
            Where in the behavior tree the SDK code should be executed.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ControlRequest.Types">
            <summary>Container for nested types declared in the ControlRequest message type.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ControlRequest.Types.Priority">
            <summary>
            Where in the behavior tree the SDK code should be executed.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ControlRequest.Types.Priority.Unknown">
            <summary>
            Unknown priority. Used for versions that don't understand old priority levels.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ControlRequest.Types.Priority.OverrideBehaviors">
            <summary>
            Highest priority level. Suppresses most automatic physical reactions, use with caution. 
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ControlRequest.Types.Priority.Default">
            <summary>
            Normal priority level. Directly under mandatory physical reactions.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ControlRequest.Types.Priority.ReserveControl">
            <summary>
            Enable long-running SDK control between script execution.  Not to be used for regular behavior control.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.BehaviorControlRequest">
            <summary>
            Messages that can be sent to the behavior stream. Explicitly
            requesting or releasing control.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BehaviorControlRequest.ControlReleaseFieldNumber">
            <summary>Field number for the "control_release" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorControlRequest.ControlRelease">
            <summary>
            Release control of the behavior system back to Vector.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BehaviorControlRequest.ControlRequestFieldNumber">
            <summary>Field number for the "control_request" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorControlRequest.ControlRequest">
            <summary>
            Request control of the behavior system for the SDK.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.BehaviorControlRequest.RequestTypeOneofCase">
            <summary>Enum of possible cases for the "request_type" oneof.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ControlGrantedResponse">
            <summary>
            The SDK user is now free to run any actions and behaviors they like.
            Until a ControlLostResponse is received, they are directly in control
            of Vector's behavior system.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ControlLostResponse">
            <summary>
            This informs the user that they lost control of the behavior system.
            All direct actions will be unavailable via the sdk until control is regained.
            Regaining control can be either through a call to ControlRequest, or
            can be as a result of conditions passed to the original ControlRequest.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ReservedControlLostResponse">
            <summary>
            The ability to reserve control before/after SDK scripts has been lost.  
            This control can be regained through another ControlRequest.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.BehaviorControlResponse">
            <summary>
            Responses from the behavior stream.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BehaviorControlResponse.ControlGrantedResponseFieldNumber">
            <summary>Field number for the "control_granted_response" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorControlResponse.ControlGrantedResponse">
            <summary>
            The SDK user is now free to directly control Vector.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BehaviorControlResponse.ControlLostEventFieldNumber">
            <summary>Field number for the "control_lost_event" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorControlResponse.ControlLostEvent">
            <summary>
            Control of the behavior system has been lost to a higher priority behavior.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BehaviorControlResponse.KeepAliveFieldNumber">
            <summary>Field number for the "keep_alive" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorControlResponse.KeepAlive">
            <summary>
            Used by Vector to verify the connection is still alive.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BehaviorControlResponse.ReservedControlLostEventFieldNumber">
            <summary>Field number for the "reserved_control_lost_event" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.BehaviorControlResponse.ReservedControlLostEvent">
            <summary>
            Behavior system lock has been lost to another connection
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.BehaviorControlResponse.ResponseTypeOneofCase">
            <summary>Enum of possible cases for the "response_type" oneof.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CubeReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/cube.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.CubeReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/cube.proto</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Anki.Vector.ExternalInterface.ObjectType.BlockLightcube1" -->
        <member name="T:Anki.Vector.ExternalInterface.ObjectFamily">
            <summary>
            Note: ObjectFamily is deprecated and will be removed in future releases
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ObjectConstants">
            <summary>
            Constants associated with the audio feed
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectConstants.Null">
            <summary>
            error value
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectConstants.FixedCustomWallThicknessMm">
            <summary>
            The depth of custom walls used in the engine
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ConnectCubeRequest">
            <summary>
            Attempt to connect to a cube. If a cube is currently connected,
            this will do nothing.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ConnectCubeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ConnectCubeResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ConnectCubeResponse.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ConnectCubeResponse.FactoryIdFieldNumber">
            <summary>Field number for the "factory_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CubesAvailableResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CubesAvailableResponse.FactoryIdsFieldNumber">
            <summary>Field number for the "factory_ids" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DisconnectCubeRequest">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DisconnectCubeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.FlashCubeLightsRequest">
            <summary>
            Plays the default cube connection animation on the currently
            connected cube's lights.  This is intended for app level user
            surfacing of cube connectivity, not for sdk cube light control.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FlashCubeLightsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest">
            <summary>
            Forget the robot's preferred cube. This will cause the robot to
            connect to the cube with the highest RSSI (signal strength) next
            time a connection is requested. Saves this preference to disk.
            The next cube that the robot connects to will become its
            preferred cube.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ForgetPreferredCubeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SetPreferredCubeRequest">
            <summary>
            Set the robot's preferred cube and save it to disk. The robot
            will always attempt to connect to this cube if it is available.
            This is only used in simulation for now.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetPreferredCubeRequest.FactoryIdFieldNumber">
            <summary>Field number for the "factory_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetPreferredCubeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SetCubeLightsRequest">
            <summary>
            Sets each LED on victor's cube.  Two states are specified
            designated 'on' and 'off', each with a color, duration,
            and state transition time
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.OnColorFieldNumber">
            <summary>Field number for the "on_color" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.OffColorFieldNumber">
            <summary>Field number for the "off_color" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.OnPeriodMsFieldNumber">
            <summary>Field number for the "on_period_ms" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.OffPeriodMsFieldNumber">
            <summary>Field number for the "off_period_ms" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.TransitionOnPeriodMsFieldNumber">
            <summary>Field number for the "transition_on_period_ms" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.TransitionOffPeriodMsFieldNumber">
            <summary>Field number for the "transition_off_period_ms" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.OffsetFieldNumber">
            <summary>Field number for the "offset" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.RelativeToXFieldNumber">
            <summary>Field number for the "relative_to_x" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.RelativeToYFieldNumber">
            <summary>Field number for the "relative_to_y" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.RotateFieldNumber">
            <summary>Field number for the "rotate" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsRequest.MakeRelativeFieldNumber">
            <summary>Field number for the "make_relative" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SetCubeLightsRequest.Types">
            <summary>Container for nested types declared in the SetCubeLightsRequest message type.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SetCubeLightsRequest.Types.MakeRelativeMode">
            <summary>
            This is a uint_8 internally.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetCubeLightsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectAvailable.FactoryIdFieldNumber">
            <summary>Field number for the "factory_id" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ObjectConnectionState">
            <summary>
            Indicates that a cube has connected or disconnected to the robot.
            This message will be sent for any connects or disconnects regardless
            of whether it originated from us or underlying robot behavior.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectConnectionState.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectConnectionState.FactoryIdFieldNumber">
            <summary>Field number for the "factory_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectConnectionState.ObjectTypeFieldNumber">
            <summary>Field number for the "object_type" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectConnectionState.ConnectedFieldNumber">
            <summary>Field number for the "connected" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectMoved.TimestampFieldNumber">
            <summary>Field number for the "timestamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectMoved.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectStoppedMoving.TimestampFieldNumber">
            <summary>Field number for the "timestamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectStoppedMoving.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectUpAxisChanged.TimestampFieldNumber">
            <summary>Field number for the "timestamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectUpAxisChanged.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectUpAxisChanged.UpAxisFieldNumber">
            <summary>Field number for the "up_axis" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectTapped.TimestampFieldNumber">
            <summary>Field number for the "timestamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectTapped.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.RobotObservedObject">
            <summary>
            RobotObservedObject for signaling that an object
             with specified ID/Type was seen at a particular location in the image
             and the world
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.TimestampFieldNumber">
            <summary>Field number for the "timestamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.ObjectFamilyFieldNumber">
            <summary>Field number for the "object_family" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedObject.ObjectFamily">
            <summary>
            ObjectFamily is deprecated. Use ObjectType instead to reason about groupings of objects.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.ObjectTypeFieldNumber">
            <summary>Field number for the "object_type" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedObject.ObjectId">
            <summary>
            signed to match U2G::PickAndPlaceObject which has the option to have objectID&lt;0
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.ImgRectFieldNumber">
            <summary>Field number for the "img_rect" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedObject.ImgRect">
            <summary>
            position in image coords
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.PoseFieldNumber">
            <summary>Field number for the "pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.TopFaceOrientationRadFieldNumber">
            <summary>Field number for the "top_face_orientation_rad" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedObject.TopFaceOrientationRad">
            <summary>
            absolute orienation of top face, iff isActive==true
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedObject.IsActiveFieldNumber">
            <summary>Field number for the "is_active" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CubeConnectionLost">
            <summary>
            Indicates that a the connection subscribed through ConnectCube has
            been lost.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest">
            <summary>
            Deletes all custom objects matching a given deletion mode.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest.ModeFieldNumber">
            <summary>Field number for the "mode" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DeleteCustomObjectsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest">
            <summary>
            Creates a CustomObject at the specific pose with no markers associated with it
            Since this object has no markers with which to be observed, it will remain in the
            specified pose as an obstacle forever (or until deleted with a deletion message above)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest.PoseFieldNumber">
            <summary>Field number for the "pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest.XSizeMmFieldNumber">
            <summary>Field number for the "x_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest.YSizeMmFieldNumber">
            <summary>Field number for the "y_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest.ZSizeMmFieldNumber">
            <summary>Field number for the "z_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CreateFixedCustomObjectResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CreateFixedCustomObjectResponse.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CustomBoxDefinition">
            <summary>
            Defines a custom object of the given size with the given markers centered on each side
            If isUnique=true, there is guaranteed to be no more than one object of this type present in the world
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerFrontFieldNumber">
            <summary>Field number for the "marker_front" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerBackFieldNumber">
            <summary>Field number for the "marker_back" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerTopFieldNumber">
            <summary>Field number for the "marker_top" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerBottomFieldNumber">
            <summary>Field number for the "marker_bottom" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerLeftFieldNumber">
            <summary>Field number for the "marker_left" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerRightFieldNumber">
            <summary>Field number for the "marker_right" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.XSizeMmFieldNumber">
            <summary>Field number for the "x_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.YSizeMmFieldNumber">
            <summary>Field number for the "y_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.ZSizeMmFieldNumber">
            <summary>Field number for the "z_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerWidthMmFieldNumber">
            <summary>Field number for the "marker_width_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomBoxDefinition.MarkerHeightMmFieldNumber">
            <summary>Field number for the "marker_height_mm" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CustomCubeDefinition">
            <summary>
            Defines a custom cube of the given size. The cube will have the same marker centered on all faces.
            If isUnique=true, there is guaranteed to be no more than one cube of this type present in the world at a time.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomCubeDefinition.MarkerFieldNumber">
            <summary>Field number for the "marker" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomCubeDefinition.SizeMmFieldNumber">
            <summary>Field number for the "size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomCubeDefinition.MarkerWidthMmFieldNumber">
            <summary>Field number for the "marker_width_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomCubeDefinition.MarkerHeightMmFieldNumber">
            <summary>Field number for the "marker_height_mm" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CustomWallDefinition">
            <summary>
            Defines a custom wall of the given height and width, with the same marker centered on both sides (front and back).
            The wall's thickness is assumed to be 1cm (and thus there are no markers on its left, right, top, or bottom)
            If isUnique=true, there is guaranteed to be no more than one wall of this type present in the world at a time.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomWallDefinition.MarkerFieldNumber">
            <summary>Field number for the "marker" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomWallDefinition.WidthMmFieldNumber">
            <summary>Field number for the "width_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomWallDefinition.HeightMmFieldNumber">
            <summary>Field number for the "height_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomWallDefinition.MarkerWidthMmFieldNumber">
            <summary>Field number for the "marker_width_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CustomWallDefinition.MarkerHeightMmFieldNumber">
            <summary>Field number for the "marker_height_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectRequest.CustomTypeFieldNumber">
            <summary>Field number for the "custom_type" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectRequest.IsUniqueFieldNumber">
            <summary>Field number for the "is_unique" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectRequest.CustomBoxFieldNumber">
            <summary>Field number for the "custom_box" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectRequest.CustomCubeFieldNumber">
            <summary>Field number for the "custom_cube" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectRequest.CustomWallFieldNumber">
            <summary>Field number for the "custom_wall" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DefineCustomObjectRequest.CustomObjectDefinitionOneofCase">
            <summary>Enum of possible cases for the "custom_object_definition" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DefineCustomObjectResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.ObjectAvailableFieldNumber">
            <summary>Field number for the "object_available" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.ObjectConnectionStateFieldNumber">
            <summary>Field number for the "object_connection_state" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.ObjectMovedFieldNumber">
            <summary>Field number for the "object_moved" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.ObjectStoppedMovingFieldNumber">
            <summary>Field number for the "object_stopped_moving" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.ObjectUpAxisChangedFieldNumber">
            <summary>Field number for the "object_up_axis_changed" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.ObjectTappedFieldNumber">
            <summary>Field number for the "object_tapped" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.RobotObservedObjectFieldNumber">
            <summary>Field number for the "robot_observed_object" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ObjectEvent.CubeConnectionLostFieldNumber">
            <summary>Field number for the "cube_connection_lost" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ObjectEvent.ObjectEventTypeOneofCase">
            <summary>Enum of possible cases for the "object_event_type" oneof.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExtensionsReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/extensions.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExtensionsReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/extensions.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalInterfaceReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/external_interface.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExternalInterfaceReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/external_interface.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ProtocolVersion">
            <summary>
            &lt;p>The valid versions of the protocol.&lt;/p>
            &lt;p>Protocol versions are updated when messages change significantly:
            new ones are added and removed, fields deprecated, etc.&lt;/p>
            &lt;p>The goal is to support as many old versions as possible, only
            bumping the minimum when there is no way to handle a prior version.&lt;/p>
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersion.Unknown">
            <summary>
            Required zero value for enums
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersion.Minimum">
            <summary>
            Minimum supported version
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersion.Current">
            <summary>
            Current version (incremented on 2019.03.12 for streaming update status support.)
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalInterface">
            <summary>
            The grpc-defined connection between the SDK and Anki's Vector robot.
            </summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExternalInterface.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase">
            <summary>Base class for server-side implementations of ExternalInterface</summary>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.ProtocolVersion(Anki.Vector.ExternalInterface.ProtocolVersionRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Checks the supported protocol version by passing in the client version and
            minimum host version and receiving a response to see whether the versions are supported.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SDKInitialization(Anki.Vector.ExternalInterface.SDKInitializationRequest,Grpc.Core.ServerCallContext)">
            <summary>
            SDK-only message to pass version info for device OS, Python version, etc.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DriveWheels(Anki.Vector.ExternalInterface.DriveWheelsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Sets the speed and acceleration for Vector's wheel motors.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PlayAnimationTrigger(Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Requests that Vector play an animation trigger.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PlayAnimation(Anki.Vector.ExternalInterface.PlayAnimationRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Requests that Vector play an animation.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.ListAnimations(Anki.Vector.ExternalInterface.ListAnimationsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Constructs and returns a list of animations.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.ListAnimationTriggers(Anki.Vector.ExternalInterface.ListAnimationTriggersRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Constructs and returns a list of animation triggers.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.MoveHead(Anki.Vector.ExternalInterface.MoveHeadRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Moves Vector's head.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.MoveLift(Anki.Vector.ExternalInterface.MoveLiftRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Moves Vector's lift.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.StopAllMotors(Anki.Vector.ExternalInterface.StopAllMotorsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DisplayFaceImageRGB(Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Sets screen (Vector's face) to a solid color.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.EventStream(Anki.Vector.ExternalInterface.EventRequest,Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.EventResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Streaming events endpoint
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.ExternalAudioStreamPlayback(Grpc.Core.IAsyncStreamReader{Anki.Vector.ExternalInterface.ExternalAudioStreamRequest},Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.ExternalAudioStreamResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Play audio using Vector's speaker
            </summary>
            <param name="requestStream">Used for reading requests from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.BehaviorControl(Grpc.Core.IAsyncStreamReader{Anki.Vector.ExternalInterface.BehaviorControlRequest},Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.BehaviorControlResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Integrate with and acquire control of Vector's AI system.
            </summary>
            <param name="requestStream">Used for reading requests from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.AssumeBehaviorControl(Anki.Vector.ExternalInterface.BehaviorControlRequest,Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.BehaviorControlResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Acquire control of Vector's AI system.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.RequestEnrolledNames(Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Get a list of names and their IDs.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.UpdateEnrolledFaceByID(Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Update the name enrolled for a given face.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.EraseEnrolledFaceByID(Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Erase the enrollment (name) record for the face with this ID.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.EraseAllEnrolledFaces(Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Erase the enrollment (name) records for all faces.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.CancelActionByIdTag(Anki.Vector.ExternalInterface.CancelActionByIdTagRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Cancel action by id
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.GoToPose(Anki.Vector.ExternalInterface.GoToPoseRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tells Vector to drive to the specified pose and orientation.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DockWithCube(Anki.Vector.ExternalInterface.DockWithCubeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tells Vector to dock with a light cube with a given approach angle and distance.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DriveOffCharger(Anki.Vector.ExternalInterface.DriveOffChargerRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Drive Vector off the charger.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DriveOnCharger(Anki.Vector.ExternalInterface.DriveOnChargerRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Drive Vector onto the charger.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.FindFaces(Anki.Vector.ExternalInterface.FindFacesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Make Vector look for faces by turning and angling his head
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.LookAroundInPlace(Anki.Vector.ExternalInterface.LookAroundInPlaceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Make Vector look around in place by turning and moving his head
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.RollBlock(Anki.Vector.ExternalInterface.RollBlockRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Make Vector roll his block, regardless of relative position and orientation
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PhotosInfo(Anki.Vector.ExternalInterface.PhotosInfoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Get the photos info.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.Photo(Anki.Vector.ExternalInterface.PhotoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Get a photo by ID.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.Thumbnail(Anki.Vector.ExternalInterface.ThumbnailRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Get a thumbnail by ID.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DeletePhoto(Anki.Vector.ExternalInterface.DeletePhotoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Delete a photo by ID.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DriveStraight(Anki.Vector.ExternalInterface.DriveStraightRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tells Vector to drive in a straight line.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.TurnInPlace(Anki.Vector.ExternalInterface.TurnInPlaceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Turn the robot around its current position.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SetHeadAngle(Anki.Vector.ExternalInterface.SetHeadAngleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tell Vector's head to move to a given angle.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SetLiftHeight(Anki.Vector.ExternalInterface.SetLiftHeightRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tell Vector's lift to move to a given height.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.TurnTowardsFace(Anki.Vector.ExternalInterface.TurnTowardsFaceRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tell Vector to turn towards this face.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.GoToObject(Anki.Vector.ExternalInterface.GoToObjectRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tell Vector to drive to the specified object.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.RollObject(Anki.Vector.ExternalInterface.RollObjectRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tell Vector to roll his cube.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PopAWheelie(Anki.Vector.ExternalInterface.PopAWheelieRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Tell Vector to "pop a wheelie" using his cube.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PickupObject(Anki.Vector.ExternalInterface.PickupObjectRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Instruct the robot to pick up the supplied object.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PlaceObjectOnGroundHere(Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Ask Vector to place the object he is carrying on the ground at the current location.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SetMasterVolume(Anki.Vector.ExternalInterface.MasterVolumeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Set the Robot's master volume
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.BatteryState(Anki.Vector.ExternalInterface.BatteryStateRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Check the current state of the battery.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.VersionState(Anki.Vector.ExternalInterface.VersionStateRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Get the versioning information for Vector.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SayText(Anki.Vector.ExternalInterface.SayTextRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Make Vector speak text.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.ConnectCube(Anki.Vector.ExternalInterface.ConnectCubeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Attempt to connect to a cube. If a cube is currently connected,
            this will do nothing.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DisconnectCube(Anki.Vector.ExternalInterface.DisconnectCubeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.FlashCubeLights(Anki.Vector.ExternalInterface.FlashCubeLightsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Signal a connected cube to flash its lights using the default cube
            flash animation.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.ForgetPreferredCube(Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Forget the robot's preferred cube. This will cause the robot to
            connect to the cube with the highest RSSI (signal strength) next
            time a connection is requested. Saves this preference to disk.
            The next cube that the robot connects to will become its
            preferred cube.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SetPreferredCube(Anki.Vector.ExternalInterface.SetPreferredCubeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Set the robot's preferred cube and save it to disk. The robot
            will always attempt to connect to this cube if it is available.
            This is only used in simulation for now.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DeleteCustomObjects(Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Causes the robot to forget about custom objects it currently knows about.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.CreateFixedCustomObject(Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.DefineCustomObject(Anki.Vector.ExternalInterface.DefineCustomObjectRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Creates a custom object with distinct custom marker(s).
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SetCubeLights(Anki.Vector.ExternalInterface.SetCubeLightsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Set each of the lights on the currently connected cube based on two
            rgb values each and timing data for how to transition between them.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.AudioFeed(Anki.Vector.ExternalInterface.AudioFeedRequest,Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.AudioFeedResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Request an audio feed from the robot.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.CameraFeed(Anki.Vector.ExternalInterface.CameraFeedRequest,Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.CameraFeedResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Request a camera feed from the robot.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.CaptureSingleImage(Anki.Vector.ExternalInterface.CaptureSingleImageRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Request a single image to be captured and sent from the robot.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.SetEyeColor(Anki.Vector.ExternalInterface.SetEyeColorRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Set Vector's eye color.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.NavMapFeed(Anki.Vector.ExternalInterface.NavMapFeedRequest,Grpc.Core.IServerStreamWriter{Anki.Vector.ExternalInterface.NavMapFeedResponse},Grpc.Core.ServerCallContext)">
            <summary>
            Stream navigation map data.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="responseStream">Used for sending responses back to the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>A task indicating completion of the handler.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.UpdateSettings(Anki.Vector.ExternalInterface.UpdateSettingsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Update settings
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.PullJdocs(Anki.Vector.ExternalInterface.PullJdocsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Pull Jdocs
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.StartUpdateEngine(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.ServerCallContext)">
            <summary>
            StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of 
            UpdateStatusResponse Events.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase.CheckUpdateStatus(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.ServerCallContext)">
            <summary>
            CheckUpdateStatus tells if the robot is ready to reboot and update.
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient">
            <summary>Client for ExternalInterface</summary>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.#ctor(Grpc.Core.Channel)">
            <summary>Creates a new client for ExternalInterface</summary>
            <param name="channel">The channel to use to make remote calls.</param>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.#ctor(Grpc.Core.CallInvoker)">
            <summary>Creates a new client for ExternalInterface that uses a custom <c>CallInvoker</c>.</summary>
            <param name="callInvoker">The callInvoker to use to make remote calls.</param>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.#ctor">
            <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Protected constructor to allow creation of configured clients.</summary>
            <param name="configuration">The client configuration.</param>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ProtocolVersion(Anki.Vector.ExternalInterface.ProtocolVersionRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Checks the supported protocol version by passing in the client version and
            minimum host version and receiving a response to see whether the versions are supported.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ProtocolVersion(Anki.Vector.ExternalInterface.ProtocolVersionRequest,Grpc.Core.CallOptions)">
            <summary>
            Checks the supported protocol version by passing in the client version and
            minimum host version and receiving a response to see whether the versions are supported.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ProtocolVersionAsync(Anki.Vector.ExternalInterface.ProtocolVersionRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Checks the supported protocol version by passing in the client version and
            minimum host version and receiving a response to see whether the versions are supported.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ProtocolVersionAsync(Anki.Vector.ExternalInterface.ProtocolVersionRequest,Grpc.Core.CallOptions)">
            <summary>
            Checks the supported protocol version by passing in the client version and
            minimum host version and receiving a response to see whether the versions are supported.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SDKInitialization(Anki.Vector.ExternalInterface.SDKInitializationRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            SDK-only message to pass version info for device OS, Python version, etc.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SDKInitialization(Anki.Vector.ExternalInterface.SDKInitializationRequest,Grpc.Core.CallOptions)">
            <summary>
            SDK-only message to pass version info for device OS, Python version, etc.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SDKInitializationAsync(Anki.Vector.ExternalInterface.SDKInitializationRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            SDK-only message to pass version info for device OS, Python version, etc.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SDKInitializationAsync(Anki.Vector.ExternalInterface.SDKInitializationRequest,Grpc.Core.CallOptions)">
            <summary>
            SDK-only message to pass version info for device OS, Python version, etc.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveWheels(Anki.Vector.ExternalInterface.DriveWheelsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Sets the speed and acceleration for Vector's wheel motors.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveWheels(Anki.Vector.ExternalInterface.DriveWheelsRequest,Grpc.Core.CallOptions)">
            <summary>
            Sets the speed and acceleration for Vector's wheel motors.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveWheelsAsync(Anki.Vector.ExternalInterface.DriveWheelsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Sets the speed and acceleration for Vector's wheel motors.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveWheelsAsync(Anki.Vector.ExternalInterface.DriveWheelsRequest,Grpc.Core.CallOptions)">
            <summary>
            Sets the speed and acceleration for Vector's wheel motors.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimationTrigger(Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Requests that Vector play an animation trigger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimationTrigger(Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest,Grpc.Core.CallOptions)">
            <summary>
            Requests that Vector play an animation trigger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimationTriggerAsync(Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Requests that Vector play an animation trigger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimationTriggerAsync(Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest,Grpc.Core.CallOptions)">
            <summary>
            Requests that Vector play an animation trigger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimation(Anki.Vector.ExternalInterface.PlayAnimationRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Requests that Vector play an animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimation(Anki.Vector.ExternalInterface.PlayAnimationRequest,Grpc.Core.CallOptions)">
            <summary>
            Requests that Vector play an animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimationAsync(Anki.Vector.ExternalInterface.PlayAnimationRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Requests that Vector play an animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlayAnimationAsync(Anki.Vector.ExternalInterface.PlayAnimationRequest,Grpc.Core.CallOptions)">
            <summary>
            Requests that Vector play an animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimations(Anki.Vector.ExternalInterface.ListAnimationsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Constructs and returns a list of animations.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimations(Anki.Vector.ExternalInterface.ListAnimationsRequest,Grpc.Core.CallOptions)">
            <summary>
            Constructs and returns a list of animations.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimationsAsync(Anki.Vector.ExternalInterface.ListAnimationsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Constructs and returns a list of animations.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimationsAsync(Anki.Vector.ExternalInterface.ListAnimationsRequest,Grpc.Core.CallOptions)">
            <summary>
            Constructs and returns a list of animations.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimationTriggers(Anki.Vector.ExternalInterface.ListAnimationTriggersRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Constructs and returns a list of animation triggers.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimationTriggers(Anki.Vector.ExternalInterface.ListAnimationTriggersRequest,Grpc.Core.CallOptions)">
            <summary>
            Constructs and returns a list of animation triggers.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimationTriggersAsync(Anki.Vector.ExternalInterface.ListAnimationTriggersRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Constructs and returns a list of animation triggers.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ListAnimationTriggersAsync(Anki.Vector.ExternalInterface.ListAnimationTriggersRequest,Grpc.Core.CallOptions)">
            <summary>
            Constructs and returns a list of animation triggers.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveHead(Anki.Vector.ExternalInterface.MoveHeadRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Moves Vector's head.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveHead(Anki.Vector.ExternalInterface.MoveHeadRequest,Grpc.Core.CallOptions)">
            <summary>
            Moves Vector's head.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveHeadAsync(Anki.Vector.ExternalInterface.MoveHeadRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Moves Vector's head.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveHeadAsync(Anki.Vector.ExternalInterface.MoveHeadRequest,Grpc.Core.CallOptions)">
            <summary>
            Moves Vector's head.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveLift(Anki.Vector.ExternalInterface.MoveLiftRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Moves Vector's lift.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveLift(Anki.Vector.ExternalInterface.MoveLiftRequest,Grpc.Core.CallOptions)">
            <summary>
            Moves Vector's lift.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveLiftAsync(Anki.Vector.ExternalInterface.MoveLiftRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Moves Vector's lift.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.MoveLiftAsync(Anki.Vector.ExternalInterface.MoveLiftRequest,Grpc.Core.CallOptions)">
            <summary>
            Moves Vector's lift.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StopAllMotors(Anki.Vector.ExternalInterface.StopAllMotorsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StopAllMotors(Anki.Vector.ExternalInterface.StopAllMotorsRequest,Grpc.Core.CallOptions)">
            <summary>
            Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StopAllMotorsAsync(Anki.Vector.ExternalInterface.StopAllMotorsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StopAllMotorsAsync(Anki.Vector.ExternalInterface.StopAllMotorsRequest,Grpc.Core.CallOptions)">
            <summary>
            Stop all motor commands requested: MoveHead, MoveLift and DriveWheels.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisplayFaceImageRGB(Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Sets screen (Vector's face) to a solid color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisplayFaceImageRGB(Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest,Grpc.Core.CallOptions)">
            <summary>
            Sets screen (Vector's face) to a solid color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisplayFaceImageRGBAsync(Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Sets screen (Vector's face) to a solid color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisplayFaceImageRGBAsync(Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest,Grpc.Core.CallOptions)">
            <summary>
            Sets screen (Vector's face) to a solid color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EventStream(Anki.Vector.ExternalInterface.EventRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Streaming events endpoint
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EventStream(Anki.Vector.ExternalInterface.EventRequest,Grpc.Core.CallOptions)">
            <summary>
            Streaming events endpoint
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ExternalAudioStreamPlayback(Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Play audio using Vector's speaker
            </summary>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ExternalAudioStreamPlayback(Grpc.Core.CallOptions)">
            <summary>
            Play audio using Vector's speaker
            </summary>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.BehaviorControl(Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Integrate with and acquire control of Vector's AI system.
            </summary>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.BehaviorControl(Grpc.Core.CallOptions)">
            <summary>
            Integrate with and acquire control of Vector's AI system.
            </summary>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.AssumeBehaviorControl(Anki.Vector.ExternalInterface.BehaviorControlRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Acquire control of Vector's AI system.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.AssumeBehaviorControl(Anki.Vector.ExternalInterface.BehaviorControlRequest,Grpc.Core.CallOptions)">
            <summary>
            Acquire control of Vector's AI system.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RequestEnrolledNames(Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get a list of names and their IDs.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RequestEnrolledNames(Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest,Grpc.Core.CallOptions)">
            <summary>
            Get a list of names and their IDs.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RequestEnrolledNamesAsync(Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get a list of names and their IDs.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RequestEnrolledNamesAsync(Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest,Grpc.Core.CallOptions)">
            <summary>
            Get a list of names and their IDs.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateEnrolledFaceByID(Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Update the name enrolled for a given face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateEnrolledFaceByID(Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest,Grpc.Core.CallOptions)">
            <summary>
            Update the name enrolled for a given face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateEnrolledFaceByIDAsync(Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Update the name enrolled for a given face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateEnrolledFaceByIDAsync(Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest,Grpc.Core.CallOptions)">
            <summary>
            Update the name enrolled for a given face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseEnrolledFaceByID(Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Erase the enrollment (name) record for the face with this ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseEnrolledFaceByID(Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest,Grpc.Core.CallOptions)">
            <summary>
            Erase the enrollment (name) record for the face with this ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseEnrolledFaceByIDAsync(Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Erase the enrollment (name) record for the face with this ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseEnrolledFaceByIDAsync(Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest,Grpc.Core.CallOptions)">
            <summary>
            Erase the enrollment (name) record for the face with this ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseAllEnrolledFaces(Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Erase the enrollment (name) records for all faces.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseAllEnrolledFaces(Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest,Grpc.Core.CallOptions)">
            <summary>
            Erase the enrollment (name) records for all faces.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseAllEnrolledFacesAsync(Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Erase the enrollment (name) records for all faces.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.EraseAllEnrolledFacesAsync(Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest,Grpc.Core.CallOptions)">
            <summary>
            Erase the enrollment (name) records for all faces.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CancelActionByIdTag(Anki.Vector.ExternalInterface.CancelActionByIdTagRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Cancel action by id
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CancelActionByIdTag(Anki.Vector.ExternalInterface.CancelActionByIdTagRequest,Grpc.Core.CallOptions)">
            <summary>
            Cancel action by id
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CancelActionByIdTagAsync(Anki.Vector.ExternalInterface.CancelActionByIdTagRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Cancel action by id
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CancelActionByIdTagAsync(Anki.Vector.ExternalInterface.CancelActionByIdTagRequest,Grpc.Core.CallOptions)">
            <summary>
            Cancel action by id
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToPose(Anki.Vector.ExternalInterface.GoToPoseRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tells Vector to drive to the specified pose and orientation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToPose(Anki.Vector.ExternalInterface.GoToPoseRequest,Grpc.Core.CallOptions)">
            <summary>
            Tells Vector to drive to the specified pose and orientation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToPoseAsync(Anki.Vector.ExternalInterface.GoToPoseRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tells Vector to drive to the specified pose and orientation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToPoseAsync(Anki.Vector.ExternalInterface.GoToPoseRequest,Grpc.Core.CallOptions)">
            <summary>
            Tells Vector to drive to the specified pose and orientation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DockWithCube(Anki.Vector.ExternalInterface.DockWithCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tells Vector to dock with a light cube with a given approach angle and distance.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DockWithCube(Anki.Vector.ExternalInterface.DockWithCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Tells Vector to dock with a light cube with a given approach angle and distance.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DockWithCubeAsync(Anki.Vector.ExternalInterface.DockWithCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tells Vector to dock with a light cube with a given approach angle and distance.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DockWithCubeAsync(Anki.Vector.ExternalInterface.DockWithCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Tells Vector to dock with a light cube with a given approach angle and distance.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOffCharger(Anki.Vector.ExternalInterface.DriveOffChargerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Drive Vector off the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOffCharger(Anki.Vector.ExternalInterface.DriveOffChargerRequest,Grpc.Core.CallOptions)">
            <summary>
            Drive Vector off the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOffChargerAsync(Anki.Vector.ExternalInterface.DriveOffChargerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Drive Vector off the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOffChargerAsync(Anki.Vector.ExternalInterface.DriveOffChargerRequest,Grpc.Core.CallOptions)">
            <summary>
            Drive Vector off the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOnCharger(Anki.Vector.ExternalInterface.DriveOnChargerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Drive Vector onto the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOnCharger(Anki.Vector.ExternalInterface.DriveOnChargerRequest,Grpc.Core.CallOptions)">
            <summary>
            Drive Vector onto the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOnChargerAsync(Anki.Vector.ExternalInterface.DriveOnChargerRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Drive Vector onto the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveOnChargerAsync(Anki.Vector.ExternalInterface.DriveOnChargerRequest,Grpc.Core.CallOptions)">
            <summary>
            Drive Vector onto the charger.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FindFaces(Anki.Vector.ExternalInterface.FindFacesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector look for faces by turning and angling his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FindFaces(Anki.Vector.ExternalInterface.FindFacesRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector look for faces by turning and angling his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FindFacesAsync(Anki.Vector.ExternalInterface.FindFacesRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector look for faces by turning and angling his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FindFacesAsync(Anki.Vector.ExternalInterface.FindFacesRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector look for faces by turning and angling his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.LookAroundInPlace(Anki.Vector.ExternalInterface.LookAroundInPlaceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector look around in place by turning and moving his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.LookAroundInPlace(Anki.Vector.ExternalInterface.LookAroundInPlaceRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector look around in place by turning and moving his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.LookAroundInPlaceAsync(Anki.Vector.ExternalInterface.LookAroundInPlaceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector look around in place by turning and moving his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.LookAroundInPlaceAsync(Anki.Vector.ExternalInterface.LookAroundInPlaceRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector look around in place by turning and moving his head
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollBlock(Anki.Vector.ExternalInterface.RollBlockRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector roll his block, regardless of relative position and orientation
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollBlock(Anki.Vector.ExternalInterface.RollBlockRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector roll his block, regardless of relative position and orientation
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollBlockAsync(Anki.Vector.ExternalInterface.RollBlockRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector roll his block, regardless of relative position and orientation
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollBlockAsync(Anki.Vector.ExternalInterface.RollBlockRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector roll his block, regardless of relative position and orientation
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PhotosInfo(Anki.Vector.ExternalInterface.PhotosInfoRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get the photos info.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PhotosInfo(Anki.Vector.ExternalInterface.PhotosInfoRequest,Grpc.Core.CallOptions)">
            <summary>
            Get the photos info.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PhotosInfoAsync(Anki.Vector.ExternalInterface.PhotosInfoRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get the photos info.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PhotosInfoAsync(Anki.Vector.ExternalInterface.PhotosInfoRequest,Grpc.Core.CallOptions)">
            <summary>
            Get the photos info.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.Photo(Anki.Vector.ExternalInterface.PhotoRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.Photo(Anki.Vector.ExternalInterface.PhotoRequest,Grpc.Core.CallOptions)">
            <summary>
            Get a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PhotoAsync(Anki.Vector.ExternalInterface.PhotoRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PhotoAsync(Anki.Vector.ExternalInterface.PhotoRequest,Grpc.Core.CallOptions)">
            <summary>
            Get a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.Thumbnail(Anki.Vector.ExternalInterface.ThumbnailRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get a thumbnail by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.Thumbnail(Anki.Vector.ExternalInterface.ThumbnailRequest,Grpc.Core.CallOptions)">
            <summary>
            Get a thumbnail by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ThumbnailAsync(Anki.Vector.ExternalInterface.ThumbnailRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get a thumbnail by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ThumbnailAsync(Anki.Vector.ExternalInterface.ThumbnailRequest,Grpc.Core.CallOptions)">
            <summary>
            Get a thumbnail by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeletePhoto(Anki.Vector.ExternalInterface.DeletePhotoRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Delete a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeletePhoto(Anki.Vector.ExternalInterface.DeletePhotoRequest,Grpc.Core.CallOptions)">
            <summary>
            Delete a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeletePhotoAsync(Anki.Vector.ExternalInterface.DeletePhotoRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Delete a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeletePhotoAsync(Anki.Vector.ExternalInterface.DeletePhotoRequest,Grpc.Core.CallOptions)">
            <summary>
            Delete a photo by ID.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveStraight(Anki.Vector.ExternalInterface.DriveStraightRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tells Vector to drive in a straight line.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveStraight(Anki.Vector.ExternalInterface.DriveStraightRequest,Grpc.Core.CallOptions)">
            <summary>
            Tells Vector to drive in a straight line.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveStraightAsync(Anki.Vector.ExternalInterface.DriveStraightRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tells Vector to drive in a straight line.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DriveStraightAsync(Anki.Vector.ExternalInterface.DriveStraightRequest,Grpc.Core.CallOptions)">
            <summary>
            Tells Vector to drive in a straight line.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnInPlace(Anki.Vector.ExternalInterface.TurnInPlaceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Turn the robot around its current position.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnInPlace(Anki.Vector.ExternalInterface.TurnInPlaceRequest,Grpc.Core.CallOptions)">
            <summary>
            Turn the robot around its current position.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnInPlaceAsync(Anki.Vector.ExternalInterface.TurnInPlaceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Turn the robot around its current position.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnInPlaceAsync(Anki.Vector.ExternalInterface.TurnInPlaceRequest,Grpc.Core.CallOptions)">
            <summary>
            Turn the robot around its current position.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetHeadAngle(Anki.Vector.ExternalInterface.SetHeadAngleRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector's head to move to a given angle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetHeadAngle(Anki.Vector.ExternalInterface.SetHeadAngleRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector's head to move to a given angle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetHeadAngleAsync(Anki.Vector.ExternalInterface.SetHeadAngleRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector's head to move to a given angle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetHeadAngleAsync(Anki.Vector.ExternalInterface.SetHeadAngleRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector's head to move to a given angle.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetLiftHeight(Anki.Vector.ExternalInterface.SetLiftHeightRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector's lift to move to a given height.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetLiftHeight(Anki.Vector.ExternalInterface.SetLiftHeightRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector's lift to move to a given height.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetLiftHeightAsync(Anki.Vector.ExternalInterface.SetLiftHeightRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector's lift to move to a given height.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetLiftHeightAsync(Anki.Vector.ExternalInterface.SetLiftHeightRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector's lift to move to a given height.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnTowardsFace(Anki.Vector.ExternalInterface.TurnTowardsFaceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to turn towards this face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnTowardsFace(Anki.Vector.ExternalInterface.TurnTowardsFaceRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to turn towards this face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnTowardsFaceAsync(Anki.Vector.ExternalInterface.TurnTowardsFaceRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to turn towards this face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.TurnTowardsFaceAsync(Anki.Vector.ExternalInterface.TurnTowardsFaceRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to turn towards this face.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToObject(Anki.Vector.ExternalInterface.GoToObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to drive to the specified object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToObject(Anki.Vector.ExternalInterface.GoToObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to drive to the specified object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToObjectAsync(Anki.Vector.ExternalInterface.GoToObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to drive to the specified object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.GoToObjectAsync(Anki.Vector.ExternalInterface.GoToObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to drive to the specified object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollObject(Anki.Vector.ExternalInterface.RollObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to roll his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollObject(Anki.Vector.ExternalInterface.RollObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to roll his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollObjectAsync(Anki.Vector.ExternalInterface.RollObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to roll his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.RollObjectAsync(Anki.Vector.ExternalInterface.RollObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to roll his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PopAWheelie(Anki.Vector.ExternalInterface.PopAWheelieRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to "pop a wheelie" using his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PopAWheelie(Anki.Vector.ExternalInterface.PopAWheelieRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to "pop a wheelie" using his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PopAWheelieAsync(Anki.Vector.ExternalInterface.PopAWheelieRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Tell Vector to "pop a wheelie" using his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PopAWheelieAsync(Anki.Vector.ExternalInterface.PopAWheelieRequest,Grpc.Core.CallOptions)">
            <summary>
            Tell Vector to "pop a wheelie" using his cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PickupObject(Anki.Vector.ExternalInterface.PickupObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Instruct the robot to pick up the supplied object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PickupObject(Anki.Vector.ExternalInterface.PickupObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Instruct the robot to pick up the supplied object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PickupObjectAsync(Anki.Vector.ExternalInterface.PickupObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Instruct the robot to pick up the supplied object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PickupObjectAsync(Anki.Vector.ExternalInterface.PickupObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Instruct the robot to pick up the supplied object.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlaceObjectOnGroundHere(Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Ask Vector to place the object he is carrying on the ground at the current location.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlaceObjectOnGroundHere(Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest,Grpc.Core.CallOptions)">
            <summary>
            Ask Vector to place the object he is carrying on the ground at the current location.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlaceObjectOnGroundHereAsync(Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Ask Vector to place the object he is carrying on the ground at the current location.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PlaceObjectOnGroundHereAsync(Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest,Grpc.Core.CallOptions)">
            <summary>
            Ask Vector to place the object he is carrying on the ground at the current location.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetMasterVolume(Anki.Vector.ExternalInterface.MasterVolumeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set the Robot's master volume
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetMasterVolume(Anki.Vector.ExternalInterface.MasterVolumeRequest,Grpc.Core.CallOptions)">
            <summary>
            Set the Robot's master volume
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetMasterVolumeAsync(Anki.Vector.ExternalInterface.MasterVolumeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set the Robot's master volume
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetMasterVolumeAsync(Anki.Vector.ExternalInterface.MasterVolumeRequest,Grpc.Core.CallOptions)">
            <summary>
            Set the Robot's master volume
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.BatteryState(Anki.Vector.ExternalInterface.BatteryStateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Check the current state of the battery.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.BatteryState(Anki.Vector.ExternalInterface.BatteryStateRequest,Grpc.Core.CallOptions)">
            <summary>
            Check the current state of the battery.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.BatteryStateAsync(Anki.Vector.ExternalInterface.BatteryStateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Check the current state of the battery.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.BatteryStateAsync(Anki.Vector.ExternalInterface.BatteryStateRequest,Grpc.Core.CallOptions)">
            <summary>
            Check the current state of the battery.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.VersionState(Anki.Vector.ExternalInterface.VersionStateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get the versioning information for Vector.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.VersionState(Anki.Vector.ExternalInterface.VersionStateRequest,Grpc.Core.CallOptions)">
            <summary>
            Get the versioning information for Vector.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.VersionStateAsync(Anki.Vector.ExternalInterface.VersionStateRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get the versioning information for Vector.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.VersionStateAsync(Anki.Vector.ExternalInterface.VersionStateRequest,Grpc.Core.CallOptions)">
            <summary>
            Get the versioning information for Vector.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SayText(Anki.Vector.ExternalInterface.SayTextRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector speak text.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SayText(Anki.Vector.ExternalInterface.SayTextRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector speak text.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SayTextAsync(Anki.Vector.ExternalInterface.SayTextRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Make Vector speak text.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SayTextAsync(Anki.Vector.ExternalInterface.SayTextRequest,Grpc.Core.CallOptions)">
            <summary>
            Make Vector speak text.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ConnectCube(Anki.Vector.ExternalInterface.ConnectCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Attempt to connect to a cube. If a cube is currently connected,
            this will do nothing.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ConnectCube(Anki.Vector.ExternalInterface.ConnectCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Attempt to connect to a cube. If a cube is currently connected,
            this will do nothing.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ConnectCubeAsync(Anki.Vector.ExternalInterface.ConnectCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Attempt to connect to a cube. If a cube is currently connected,
            this will do nothing.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ConnectCubeAsync(Anki.Vector.ExternalInterface.ConnectCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Attempt to connect to a cube. If a cube is currently connected,
            this will do nothing.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisconnectCube(Anki.Vector.ExternalInterface.DisconnectCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisconnectCube(Anki.Vector.ExternalInterface.DisconnectCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisconnectCubeAsync(Anki.Vector.ExternalInterface.DisconnectCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DisconnectCubeAsync(Anki.Vector.ExternalInterface.DisconnectCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FlashCubeLights(Anki.Vector.ExternalInterface.FlashCubeLightsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Signal a connected cube to flash its lights using the default cube
            flash animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FlashCubeLights(Anki.Vector.ExternalInterface.FlashCubeLightsRequest,Grpc.Core.CallOptions)">
            <summary>
            Signal a connected cube to flash its lights using the default cube
            flash animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FlashCubeLightsAsync(Anki.Vector.ExternalInterface.FlashCubeLightsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Signal a connected cube to flash its lights using the default cube
            flash animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.FlashCubeLightsAsync(Anki.Vector.ExternalInterface.FlashCubeLightsRequest,Grpc.Core.CallOptions)">
            <summary>
            Signal a connected cube to flash its lights using the default cube
            flash animation.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ForgetPreferredCube(Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Forget the robot's preferred cube. This will cause the robot to
            connect to the cube with the highest RSSI (signal strength) next
            time a connection is requested. Saves this preference to disk.
            The next cube that the robot connects to will become its
            preferred cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ForgetPreferredCube(Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Forget the robot's preferred cube. This will cause the robot to
            connect to the cube with the highest RSSI (signal strength) next
            time a connection is requested. Saves this preference to disk.
            The next cube that the robot connects to will become its
            preferred cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ForgetPreferredCubeAsync(Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Forget the robot's preferred cube. This will cause the robot to
            connect to the cube with the highest RSSI (signal strength) next
            time a connection is requested. Saves this preference to disk.
            The next cube that the robot connects to will become its
            preferred cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.ForgetPreferredCubeAsync(Anki.Vector.ExternalInterface.ForgetPreferredCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Forget the robot's preferred cube. This will cause the robot to
            connect to the cube with the highest RSSI (signal strength) next
            time a connection is requested. Saves this preference to disk.
            The next cube that the robot connects to will become its
            preferred cube.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetPreferredCube(Anki.Vector.ExternalInterface.SetPreferredCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set the robot's preferred cube and save it to disk. The robot
            will always attempt to connect to this cube if it is available.
            This is only used in simulation for now.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetPreferredCube(Anki.Vector.ExternalInterface.SetPreferredCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Set the robot's preferred cube and save it to disk. The robot
            will always attempt to connect to this cube if it is available.
            This is only used in simulation for now.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetPreferredCubeAsync(Anki.Vector.ExternalInterface.SetPreferredCubeRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set the robot's preferred cube and save it to disk. The robot
            will always attempt to connect to this cube if it is available.
            This is only used in simulation for now.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetPreferredCubeAsync(Anki.Vector.ExternalInterface.SetPreferredCubeRequest,Grpc.Core.CallOptions)">
            <summary>
            Set the robot's preferred cube and save it to disk. The robot
            will always attempt to connect to this cube if it is available.
            This is only used in simulation for now.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeleteCustomObjects(Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Causes the robot to forget about custom objects it currently knows about.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeleteCustomObjects(Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest,Grpc.Core.CallOptions)">
            <summary>
            Causes the robot to forget about custom objects it currently knows about.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeleteCustomObjectsAsync(Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Causes the robot to forget about custom objects it currently knows about.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DeleteCustomObjectsAsync(Anki.Vector.ExternalInterface.DeleteCustomObjectsRequest,Grpc.Core.CallOptions)">
            <summary>
            Causes the robot to forget about custom objects it currently knows about.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CreateFixedCustomObject(Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CreateFixedCustomObject(Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CreateFixedCustomObjectAsync(Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CreateFixedCustomObjectAsync(Anki.Vector.ExternalInterface.CreateFixedCustomObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Creates a permanent custom object instance in the robot's world, with no connection to the vision system.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DefineCustomObject(Anki.Vector.ExternalInterface.DefineCustomObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Creates a custom object with distinct custom marker(s).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DefineCustomObject(Anki.Vector.ExternalInterface.DefineCustomObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Creates a custom object with distinct custom marker(s).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DefineCustomObjectAsync(Anki.Vector.ExternalInterface.DefineCustomObjectRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Creates a custom object with distinct custom marker(s).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.DefineCustomObjectAsync(Anki.Vector.ExternalInterface.DefineCustomObjectRequest,Grpc.Core.CallOptions)">
            <summary>
            Creates a custom object with distinct custom marker(s).
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetCubeLights(Anki.Vector.ExternalInterface.SetCubeLightsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set each of the lights on the currently connected cube based on two
            rgb values each and timing data for how to transition between them.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetCubeLights(Anki.Vector.ExternalInterface.SetCubeLightsRequest,Grpc.Core.CallOptions)">
            <summary>
            Set each of the lights on the currently connected cube based on two
            rgb values each and timing data for how to transition between them.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetCubeLightsAsync(Anki.Vector.ExternalInterface.SetCubeLightsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set each of the lights on the currently connected cube based on two
            rgb values each and timing data for how to transition between them.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetCubeLightsAsync(Anki.Vector.ExternalInterface.SetCubeLightsRequest,Grpc.Core.CallOptions)">
            <summary>
            Set each of the lights on the currently connected cube based on two
            rgb values each and timing data for how to transition between them.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.AudioFeed(Anki.Vector.ExternalInterface.AudioFeedRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Request an audio feed from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.AudioFeed(Anki.Vector.ExternalInterface.AudioFeedRequest,Grpc.Core.CallOptions)">
            <summary>
            Request an audio feed from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CameraFeed(Anki.Vector.ExternalInterface.CameraFeedRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Request a camera feed from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CameraFeed(Anki.Vector.ExternalInterface.CameraFeedRequest,Grpc.Core.CallOptions)">
            <summary>
            Request a camera feed from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CaptureSingleImage(Anki.Vector.ExternalInterface.CaptureSingleImageRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Request a single image to be captured and sent from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CaptureSingleImage(Anki.Vector.ExternalInterface.CaptureSingleImageRequest,Grpc.Core.CallOptions)">
            <summary>
            Request a single image to be captured and sent from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CaptureSingleImageAsync(Anki.Vector.ExternalInterface.CaptureSingleImageRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Request a single image to be captured and sent from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CaptureSingleImageAsync(Anki.Vector.ExternalInterface.CaptureSingleImageRequest,Grpc.Core.CallOptions)">
            <summary>
            Request a single image to be captured and sent from the robot.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetEyeColor(Anki.Vector.ExternalInterface.SetEyeColorRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set Vector's eye color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetEyeColor(Anki.Vector.ExternalInterface.SetEyeColorRequest,Grpc.Core.CallOptions)">
            <summary>
            Set Vector's eye color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetEyeColorAsync(Anki.Vector.ExternalInterface.SetEyeColorRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Set Vector's eye color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.SetEyeColorAsync(Anki.Vector.ExternalInterface.SetEyeColorRequest,Grpc.Core.CallOptions)">
            <summary>
            Set Vector's eye color.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.NavMapFeed(Anki.Vector.ExternalInterface.NavMapFeedRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Stream navigation map data.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.NavMapFeed(Anki.Vector.ExternalInterface.NavMapFeedRequest,Grpc.Core.CallOptions)">
            <summary>
            Stream navigation map data.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateSettings(Anki.Vector.ExternalInterface.UpdateSettingsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Update settings
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateSettings(Anki.Vector.ExternalInterface.UpdateSettingsRequest,Grpc.Core.CallOptions)">
            <summary>
            Update settings
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateSettingsAsync(Anki.Vector.ExternalInterface.UpdateSettingsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Update settings
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.UpdateSettingsAsync(Anki.Vector.ExternalInterface.UpdateSettingsRequest,Grpc.Core.CallOptions)">
            <summary>
            Update settings
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PullJdocs(Anki.Vector.ExternalInterface.PullJdocsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Pull Jdocs
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PullJdocs(Anki.Vector.ExternalInterface.PullJdocsRequest,Grpc.Core.CallOptions)">
            <summary>
            Pull Jdocs
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PullJdocsAsync(Anki.Vector.ExternalInterface.PullJdocsRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Pull Jdocs
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.PullJdocsAsync(Anki.Vector.ExternalInterface.PullJdocsRequest,Grpc.Core.CallOptions)">
            <summary>
            Pull Jdocs
            Added by wayne@codaris.com 
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StartUpdateEngine(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of 
            UpdateStatusResponse Events.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StartUpdateEngine(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.CallOptions)">
            <summary>
            StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of 
            UpdateStatusResponse Events.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StartUpdateEngineAsync(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of 
            UpdateStatusResponse Events.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.StartUpdateEngineAsync(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.CallOptions)">
            <summary>
            StartUpdateEngine cycles the update-engine service (to start a new check for an update) and sets up a stream of 
            UpdateStatusResponse Events.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CheckUpdateStatus(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            CheckUpdateStatus tells if the robot is ready to reboot and update.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CheckUpdateStatus(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.CallOptions)">
            <summary>
            CheckUpdateStatus tells if the robot is ready to reboot and update.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The response received from the server.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CheckUpdateStatusAsync(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            CheckUpdateStatus tells if the robot is ready to reboot and update.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            <param name="cancellationToken">An optional token for canceling the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.CheckUpdateStatusAsync(Anki.Vector.ExternalInterface.CheckUpdateStatusRequest,Grpc.Core.CallOptions)">
            <summary>
            CheckUpdateStatus tells if the robot is ready to reboot and update.
            </summary>
            <param name="request">The request to send to the server.</param>
            <param name="options">The options for the call.</param>
            <returns>The call object.</returns>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.BindService(Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.ExternalInterface.BindService(Grpc.Core.ServiceBinderBase,Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceBase)">
            <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MappedNamingStrategy`1">
            <summary>
            Naming strategy that uses a static JsonMapping property on the class to map property names to JSON object keys
            </summary>
            <typeparam name="T">The same class as the JsonObject attribute is used on</typeparam>
            <seealso cref="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy" />
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MappedNamingStrategy`1.propertyMapping">
            <summary>The property mapping dictionary loaded from the class</summary>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.MappedNamingStrategy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.ExternalInterface.MappedNamingStrategy`1"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Classes with MappedNamingStrategy must have static JsonMapping property</exception>
        </member>
        <member name="M:Anki.Vector.ExternalInterface.MappedNamingStrategy`1.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.IHttpJsonData">
            <summary>
            Ensures these types can be serialized for HTTP API
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Jdoc.DocVersionFieldNumber">
            <summary>Field number for the "doc_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Jdoc.FmtVersionFieldNumber">
            <summary>Field number for the "fmt_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Jdoc.ClientMetadataFieldNumber">
            <summary>Field number for the "client_metadata" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Jdoc.JsonDocFieldNumber">
            <summary>Field number for the "json_doc" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateSettingsRequest.SettingsFieldNumber">
            <summary>Field number for the "settings" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.RobotSettingsConfig">
            <summary>
            Updated by wayne@codaris.com
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.Clock24HourFieldNumber">
            <summary>Field number for the "clock_24_hour" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.EyeColorFieldNumber">
            <summary>Field number for the "eye_color" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.DefaultLocationFieldNumber">
            <summary>Field number for the "default_location" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.DistIsMetricFieldNumber">
            <summary>Field number for the "dist_is_metric" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.LocaleFieldNumber">
            <summary>Field number for the "locale" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.MasterVolumeFieldNumber">
            <summary>Field number for the "master_volume" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.TempIsFahrenheitFieldNumber">
            <summary>Field number for the "temp_is_fahrenheit" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.TimeZoneFieldNumber">
            <summary>Field number for the "time_zone" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotSettingsConfig.ButtonWakewordFieldNumber">
            <summary>Field number for the "button_wakeword" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateSettingsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateSettingsResponse.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateSettingsResponse.DocFieldNumber">
            <summary>Field number for the "doc" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ResponseStatus">
            <summary>
            A shared response message sent back as part of most requests.
            This will indicate the generic state of the request.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ResponseStatus.Code">
            <summary>
            The generic status code to give high-level insight into the progress of a given message.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ResponseStatus.Types">
            <summary>Container for nested types declared in the ResponseStatus message type.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode.ResponseReceived">
            <summary>
            The message has completed as expected.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode.RequestProcessing">
            <summary>
            The message has been sent to the robot.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode.Ok">
            <summary>
            The message has been handled successfully at the interface level.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode.Forbidden">
            <summary>
            The user was not authorizied.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode.NotFound">
            <summary>
            The requested attribute was not found.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode.ErrorUpdateInProgress">
            <summary>
            Currently updating values from another call.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MessagesReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/messages.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.MessagesReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/messages.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.FacialExpression">
            <summary>
            This is an int8 on the clad side.
            Proto field names are prefixed with "EXPRESSION_"
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FacialExpression.ExpressionUnknown">
            <summary>
            e.g. expression estimation disabled.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FacialExpression.ExpressionCount">
            <summary>
            Clad does not account for "Unknown" in the count.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FaceEnrollmentResult.SawWrongFace">
            <summary>
            Failures:
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AlignmentType">
            <summary>
            This is a uint8 in CLAD
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlignmentType.LiftFinger">
            <summary>
            Align the tips of the lift fingers with the target object
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlignmentType.LiftPlate">
            <summary>
            Align the flat part of the lift with the object (useful for getting the fingers in the cube's grooves)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlignmentType.Body">
            <summary>
            Align the front of Vector's body (useful for when the lift is up)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AlignmentType.Custom">
            <summary>
            For use with distanceFromMarker parameter
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioConstants">
            <summary>
            Constants associated with the audio feed
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioConstants.Null">
            <summary>
            error value
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioConstants.MicDetectionDirections">
            <summary>
            The number of audio directions the four microphones can isolate
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioConstants.SampleCountsPerEngineMessage">
            <summary>
            The number of audio samples in each internal audio chunk
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioConstants.SampleCountsPerSdkMessage">
            <summary>
            The number of audio samples delivered in each audio feed response
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioConstants.MicrophoneSampleRate">
            <summary>
            The sampling rate victor's microphones record at
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioConstants.ProcessedSampleRate">
            <summary>
            The sampling rate the robot processes audio at
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioProcessingMode">
            <summary>
            The robot can process audio in a variety of ways
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioProcessingMode.AudioUnknown">
            <summary>
            error value
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioProcessingMode.AudioOff">
            <summary>
            deactivates audio SDK mode
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioProcessingMode.AudioFastMode">
            <summary>
            unprocessed single microphone data - most performant on robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioProcessingMode.AudioDirectionalMode">
            <summary>
            beamforming support for focusing on specific direction - sounds cleanest
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioProcessingMode.AudioVoiceDetectMode">
            <summary>
            multi-microphone non-beamforming - best for voice detection programs
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AttentionTransferReason">
            <summary>
            NOTE: must match attentionTransferTypes.clad
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.KeepAlivePing">
            <summary>
            A null message used by streams to verify that the client is
            still connected.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AnimationTrigger">
            <summary>
            An animation trigger object.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AnimationTrigger.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AnimationTrigger.Name">
            <summary>
            The name of a given animation trigger.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.Animation">
            <summary>
            An animation object.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Animation.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.Animation.Name">
            <summary>
            The name of a given animation.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DriveWheelsRequest">
            <summary>
            See the DriveWheels rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveWheelsRequest.LeftWheelMmpsFieldNumber">
            <summary>Field number for the "left_wheel_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveWheelsRequest.RightWheelMmpsFieldNumber">
            <summary>Field number for the "right_wheel_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveWheelsRequest.LeftWheelMmps2FieldNumber">
            <summary>Field number for the "left_wheel_mmps2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveWheelsRequest.RightWheelMmps2FieldNumber">
            <summary>Field number for the "right_wheel_mmps2" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DriveWheelsResponse">
            <summary>
            See the DriveWheels rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveWheelsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DriveWheelsResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MoveHeadRequest">
            <summary>
            See the MoveHead rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MoveHeadRequest.SpeedRadPerSecFieldNumber">
            <summary>Field number for the "speed_rad_per_sec" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MoveHeadResponse">
            <summary>
            See the MoveHead rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MoveHeadResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.MoveHeadResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MoveLiftRequest">
            <summary>
            See the MoveLift rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MoveLiftRequest.SpeedRadPerSecFieldNumber">
            <summary>Field number for the "speed_rad_per_sec" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MoveLiftResponse">
            <summary>
            See the MoveLift rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MoveLiftResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.MoveLiftResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.StopAllMotorsRequest">
            <summary>
            See the StopAllMotors rpc for more details.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.StopAllMotorsResponse">
            <summary>
            See the StopAllMotors rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StopAllMotorsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest">
            <summary>
            See PlayAnimationTrigger rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.AnimationTriggerFieldNumber">
            <summary>Field number for the "animation_trigger" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.AnimationTrigger">
            <summary>
            The animation trigger to play.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.LoopsFieldNumber">
            <summary>Field number for the "loops" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.Loops">
            <summary>
            The number of times to play the animation in a row.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.UseLiftSafeFieldNumber">
            <summary>Field number for the "use_lift_safe" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.UseLiftSafe">
            <summary>
            Automatically ignore the lift track if Vector is currently carrying an object.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.IgnoreBodyTrackFieldNumber">
            <summary>Field number for the "ignore_body_track" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.IgnoreBodyTrack">
            <summary>
            Ignore any movement of Vector's body when playing the animation.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.IgnoreHeadTrackFieldNumber">
            <summary>Field number for the "ignore_head_track" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.IgnoreHeadTrack">
            <summary>
            Ignore any movement of Vector's head when playing the animation.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.IgnoreLiftTrackFieldNumber">
            <summary>Field number for the "ignore_lift_track" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationTriggerRequest.IgnoreLiftTrack">
            <summary>
            Ignore any movement of Vector's lift when playing the animation.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PlayAnimationRequest">
            <summary>
            See PlayAnimation rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationRequest.AnimationFieldNumber">
            <summary>Field number for the "animation" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationRequest.Animation">
            <summary>
            The animation to play.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationRequest.LoopsFieldNumber">
            <summary>Field number for the "loops" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationRequest.Loops">
            <summary>
            The number of times to play the animation in a row.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationRequest.IgnoreBodyTrackFieldNumber">
            <summary>Field number for the "ignore_body_track" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationRequest.IgnoreBodyTrack">
            <summary>
            Ignore any movement of Vector's body in the given animation.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationRequest.IgnoreHeadTrackFieldNumber">
            <summary>Field number for the "ignore_head_track" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationRequest.IgnoreHeadTrack">
            <summary>
            Ignore any movement of Vector's head in the given animation.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationRequest.IgnoreLiftTrackFieldNumber">
            <summary>Field number for the "ignore_lift_track" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationRequest.IgnoreLiftTrack">
            <summary>
            Ignore any movement of Vector's lift in the given animation.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PlayAnimationResponse">
            <summary>
            See PlayAnimation rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationResponse.Result">
            <summary>
            Information on whether the animation played successfully.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlayAnimationResponse.AnimationFieldNumber">
            <summary>Field number for the "animation" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PlayAnimationResponse.Animation">
            <summary>
            The animation that the robot executed.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ListAnimationsRequest">
            <summary>
            See ListAnimations rpc for more details.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ListAnimationsResponse">
            <summary>
            See ListAnimations rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ListAnimationsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ListAnimationsResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ListAnimationsResponse.AnimationNamesFieldNumber">
            <summary>Field number for the "animation_names" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ListAnimationsResponse.AnimationNames">
            <summary>
            The animations that Vector knows.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ListAnimationTriggersRequest">
            <summary>
            See ListAnimationTriggers rpc for more details.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ListAnimationTriggersResponse">
            <summary>
            See ListAnimationTriggers rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ListAnimationTriggersResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ListAnimationTriggersResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ListAnimationTriggersResponse.AnimationTriggerNamesFieldNumber">
            <summary>Field number for the "animation_trigger_names" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ListAnimationTriggersResponse.AnimationTriggerNames">
            <summary>
            The animation triggers that Vector knows.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest">
            <summary>
            See DisplayFaceImageRGB rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.FaceDataFieldNumber">
            <summary>Field number for the "face_data" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.FaceData">
            <summary>
            The image to render.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.DurationMsFieldNumber">
            <summary>Field number for the "duration_ms" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.DurationMs">
            <summary>
            How long to display the image on the face.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.InterruptRunningFieldNumber">
            <summary>Field number for the "interrupt_running" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.InterruptRunning">
            <summary>
            If this image should overwrite any current images on the face.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.DisplayFaceImageRGBResponse">
            <summary>
            See DisplayFaceImageRGB rpc for more details.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DisplayFaceImageRGBResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DisplayFaceImageRGBResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Status.FeatureStatusFieldNumber">
            <summary>Field number for the "feature_status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Status.MeetVictorFaceScanStartedFieldNumber">
            <summary>Field number for the "meet_victor_face_scan_started" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Status.MeetVictorFaceScanCompleteFieldNumber">
            <summary>Field number for the "meet_victor_face_scan_complete" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Status.FaceEnrollmentCompletedFieldNumber">
            <summary>Field number for the "face_enrollment_completed" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.Status.StatusTypeOneofCase">
            <summary>Enum of possible cases for the "status_type" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.WakeWord.WakeWordBeginFieldNumber">
            <summary>Field number for the "wake_word_begin" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.WakeWord.WakeWordEndFieldNumber">
            <summary>Field number for the "wake_word_end" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.WakeWord.WakeWordTypeOneofCase">
            <summary>Enum of possible cases for the "wake_word_type" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TimeStampedStatus.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TimeStampedStatus.TimestampUtcFieldNumber">
            <summary>Field number for the "timestamp_utc" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.XFieldNumber">
            <summary>Field number for the "x" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PoseStruct.X">
            <summary>
            Translation
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.YFieldNumber">
            <summary>Field number for the "y" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.ZFieldNumber">
            <summary>Field number for the "z" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.Q0FieldNumber">
            <summary>Field number for the "q0" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PoseStruct.Q0">
            <summary>
            Rotation quaternion
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.Q1FieldNumber">
            <summary>Field number for the "q1" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.Q2FieldNumber">
            <summary>Field number for the "q2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.Q3FieldNumber">
            <summary>Field number for the "q3" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PoseStruct.OriginIdFieldNumber">
            <summary>Field number for the "origin_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PoseStruct.OriginId">
            <summary>
            Which coordinate frame this pose is in (0 for none or unknown)
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AccelData">
            <summary>
            All values are in mm/s^2.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AccelData.XFieldNumber">
            <summary>Field number for the "x" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AccelData.YFieldNumber">
            <summary>Field number for the "y" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AccelData.ZFieldNumber">
            <summary>Field number for the "z" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.GyroData">
            <summary>
            All values are in rad/s.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GyroData.XFieldNumber">
            <summary>Field number for the "x" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GyroData.YFieldNumber">
            <summary>Field number for the "y" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GyroData.ZFieldNumber">
            <summary>Field number for the "z" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProxData.DistanceMmFieldNumber">
            <summary>Field number for the "distance_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProxData.SignalQualityFieldNumber">
            <summary>Field number for the "signal_quality" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProxData.UnobstructedFieldNumber">
            <summary>Field number for the "unobstructed" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ProxData.Unobstructed">
            <summary>
            The sensor has confirmed it has not detected anything up to its max range
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProxData.FoundObjectFieldNumber">
            <summary>Field number for the "found_object" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ProxData.FoundObject">
            <summary>
            The sensor detected an object in the valid operating range
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProxData.IsLiftInFovFieldNumber">
            <summary>Field number for the "is_lift_in_fov" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ProxData.IsLiftInFov">
            <summary>
            Lift (or object on lift) is occluding the sensor
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TouchData.RawTouchValueFieldNumber">
            <summary>Field number for the "raw_touch_value" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.TouchData.RawTouchValue">
            <summary>
            Raw input from the touch sensor
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TouchData.IsBeingTouchedFieldNumber">
            <summary>Field number for the "is_being_touched" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.TouchData.IsBeingTouched">
            <summary>
            Robot's context aware evaluation of whether it currently is or isn't being touched
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.PoseFieldNumber">
            <summary>Field number for the "pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.PoseAngleRadFieldNumber">
            <summary>Field number for the "pose_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.PosePitchRadFieldNumber">
            <summary>Field number for the "pose_pitch_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.LeftWheelSpeedMmpsFieldNumber">
            <summary>Field number for the "left_wheel_speed_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.RightWheelSpeedMmpsFieldNumber">
            <summary>Field number for the "right_wheel_speed_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.HeadAngleRadFieldNumber">
            <summary>Field number for the "head_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.LiftHeightMmFieldNumber">
            <summary>Field number for the "lift_height_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.AccelFieldNumber">
            <summary>Field number for the "accel" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.GyroFieldNumber">
            <summary>Field number for the "gyro" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.CarryingObjectIdFieldNumber">
            <summary>Field number for the "carrying_object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.CarryingObjectOnTopIdFieldNumber">
            <summary>Field number for the "carrying_object_on_top_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotState.CarryingObjectOnTopId">
            <summary>
            Not supported by engine
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.HeadTrackingObjectIdFieldNumber">
            <summary>Field number for the "head_tracking_object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.LocalizedToObjectIdFieldNumber">
            <summary>Field number for the "localized_to_object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.LastImageTimeStampFieldNumber">
            <summary>Field number for the "last_image_time_stamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.ProxDataFieldNumber">
            <summary>Field number for the "prox_data" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotState.TouchDataFieldNumber">
            <summary>Field number for the "touch_data" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CladPoint.XFieldNumber">
            <summary>Field number for the "x" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CladPoint.YFieldNumber">
            <summary>Field number for the "y" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CladRect.XTopLeftFieldNumber">
            <summary>Field number for the "x_top_left" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CladRect.YTopLeftFieldNumber">
            <summary>Field number for the "y_top_left" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CladRect.WidthFieldNumber">
            <summary>Field number for the "width" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CladRect.HeightFieldNumber">
            <summary>Field number for the "height" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedFace.FaceId">
            <summary>
            negative: tracked but not recognized; positive: recognized face
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.TimestampFieldNumber">
            <summary>Field number for the "timestamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.PoseFieldNumber">
            <summary>Field number for the "pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.ImgRectFieldNumber">
            <summary>Field number for the "img_rect" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedFace.ImgRect">
            <summary>
            position in image coords
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedFace.Name">
            <summary>
            Empty if none assigned yet
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.ExpressionFieldNumber">
            <summary>Field number for the "expression" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.ExpressionValuesFieldNumber">
            <summary>Field number for the "expression_values" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedFace.ExpressionValues">
            <summary>
            Individual expression values histogram, sums to 100 (Exception: all zero if expression=Unknown)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.LeftEyeFieldNumber">
            <summary>Field number for the "left_eye" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RobotObservedFace.LeftEye">
            <summary>
            Face landmarks
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.RightEyeFieldNumber">
            <summary>Field number for the "right_eye" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.NoseFieldNumber">
            <summary>Field number for the "nose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotObservedFace.MouthFieldNumber">
            <summary>Field number for the "mouth" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.RobotChangedObservedFaceID">
            <summary>
            RobotChangedObservedFaceID
             This generally happens when a tracked face (negative ID) is recognized and
             receives a positive ID or when face records get merged
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotChangedObservedFaceID.OldIdFieldNumber">
            <summary>Field number for the "old_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotChangedObservedFaceID.NewIdFieldNumber">
            <summary>Field number for the "new_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FaceEnrollmentCompleted.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FaceEnrollmentCompleted.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FaceEnrollmentCompleted.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CancelFaceEnrollmentResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LoadedKnownFace.SecondsSinceFirstEnrolledFieldNumber">
            <summary>Field number for the "seconds_since_first_enrolled" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LoadedKnownFace.SecondsSinceLastUpdatedFieldNumber">
            <summary>Field number for the "seconds_since_last_updated" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LoadedKnownFace.SecondsSinceLastSeenFieldNumber">
            <summary>Field number for the "seconds_since_last_seen" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LoadedKnownFace.LastSeenSecondsSinceEpochFieldNumber">
            <summary>Field number for the "last_seen_seconds_since_epoch" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LoadedKnownFace.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LoadedKnownFace.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RequestEnrolledNamesResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RequestEnrolledNamesResponse.FacesFieldNumber">
            <summary>Field number for the "faces" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest.OldNameFieldNumber">
            <summary>Field number for the "old_name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest.NewNameFieldNumber">
            <summary>Field number for the "new_name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EraseAllEnrolledFacesResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.ObservedIdFieldNumber">
            <summary>Field number for the "observed_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.ObservedId">
            <summary>
            The ID of a specific observed face to enroll (0 for next one we see)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.SaveIdFieldNumber">
            <summary>Field number for the "save_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.SaveId">
            <summary>
            The ID of an existing face to merge final enrollment into (0 for none,
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.SaveToRobotFieldNumber">
            <summary>Field number for the "save_to_robot" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.SaveToRobot">
            <summary>
            Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.SayNameFieldNumber">
            <summary>Field number for the "say_name" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.SayName">
            <summary>
            Play say-name/celebration animations on success before completing
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.UseMusicFieldNumber">
            <summary>Field number for the "use_music" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.UseMusic">
            <summary>
            Starts special music during say-name animations (will leave music playing!)
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetFaceToEnrollResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveOffChargerResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveOffChargerResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveOnChargerResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveOnChargerResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FindFacesResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FindFacesResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LookAroundInPlaceResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LookAroundInPlaceResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.RollBlockRequest">
             <summary>
            this triggers a Vector Behavior, different from RollObjectRequest which triggers an Action
             </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollBlockResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollBlockResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.WakeWordEnd.IntentHeardFieldNumber">
            <summary>Field number for the "intent_heard" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.WakeWordEnd.IntentJsonFieldNumber">
            <summary>Field number for the "intent_json" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserIntent.IntentIdFieldNumber">
            <summary>Field number for the "intent_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserIntent.JsonDataFieldNumber">
            <summary>Field number for the "json_data" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoInfo.PhotoIdFieldNumber">
            <summary>Field number for the "photo_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoInfo.TimestampUtcFieldNumber">
            <summary>Field number for the "timestamp_utc" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoInfo.PhotoCopiedToAppFieldNumber">
            <summary>Field number for the "photo_copied_to_app" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoInfo.ThumbCopiedToAppFieldNumber">
            <summary>Field number for the "thumb_copied_to_app" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotosInfoResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotosInfoResponse.PhotoInfosFieldNumber">
            <summary>Field number for the "photo_infos" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoRequest.PhotoIdFieldNumber">
            <summary>Field number for the "photo_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoPathMessage.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoPathMessage.FullPathFieldNumber">
            <summary>Field number for the "full_path" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoResponse.ImageFieldNumber">
            <summary>Field number for the "image" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ThumbnailRequest.PhotoIdFieldNumber">
            <summary>Field number for the "photo_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ThumbnailPathMessage.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ThumbnailPathMessage.FullPathFieldNumber">
            <summary>Field number for the "full_path" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ThumbnailResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ThumbnailResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ThumbnailResponse.ImageFieldNumber">
            <summary>Field number for the "image" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DeletePhotoRequest.PhotoIdFieldNumber">
            <summary>Field number for the "photo_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DeletePhotoResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DeletePhotoResponse.SuccessFieldNumber">
            <summary>Field number for the "success" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PhotoTaken.PhotoIdFieldNumber">
            <summary>Field number for the "photo_id" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PathMotionProfile">
            <summary>
            Struct containing all the information relevant to how a 
            path should be modified or traversed.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.SpeedMmpsFieldNumber">
            <summary>Field number for the "speed_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.AccelMmps2FieldNumber">
            <summary>Field number for the "accel_mmps2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.DecelMmps2FieldNumber">
            <summary>Field number for the "decel_mmps2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.PointTurnSpeedRadPerSecFieldNumber">
            <summary>Field number for the "point_turn_speed_rad_per_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.PointTurnAccelRadPerSec2FieldNumber">
            <summary>Field number for the "point_turn_accel_rad_per_sec2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.PointTurnDecelRadPerSec2FieldNumber">
            <summary>Field number for the "point_turn_decel_rad_per_sec2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.DockSpeedMmpsFieldNumber">
            <summary>Field number for the "dock_speed_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.DockAccelMmps2FieldNumber">
            <summary>Field number for the "dock_accel_mmps2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.DockDecelMmps2FieldNumber">
            <summary>Field number for the "dock_decel_mmps2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.ReverseSpeedMmpsFieldNumber">
            <summary>Field number for the "reverse_speed_mmps" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PathMotionProfile.IsCustomFieldNumber">
            <summary>Field number for the "is_custom" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ActionResult">
            <summary>
            These codes are duplicated from actionResults.clad file and need to be kept in sync 
            The possible results of running an action.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ActionResult.Types">
            <summary>Container for nested types declared in the ActionResult message type.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode">
            <summary>
            The possible results of running an action.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.ActionResultSuccess">
            <summary>
            Action completed successfully.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.ActionResultRunning">
            <summary>
            Action is still running.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.ActionResultCancelledWhileRunning">
            <summary>
            Action was cancelled by SDK request
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NotStarted">
            <summary>
            Initial state of an Action to indicate it has not yet started.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.Abort">
            <summary>
            Action aborted itself (e.g. had invalid attributes, or a runtime failure).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.AnimAborted">
            <summary>
            Animation Action aborted itself (e.g. there was an error playing the animation).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.BadMarker">
            <summary>
            There was an error related to vision markers.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.BadMessageTag">
            <summary>
            There was a problem related to a subscribed or unsupported message tag
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.BadObject">
            <summary>
            There was a problem with the Object ID provided (e.g. there is no Object with that ID).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.BadPose">
            <summary>
            There was a problem with the Pose provided.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.BadTag">
            <summary>
            The SDK-provided tag was bad.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.ChargerUnpluggedAbort">
            <summary>
            Vector is on the charger but cannot sense the contacts. Charger may be unplugged.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.FailedSettingCalibration">
            <summary>
            Shouldn't occur outside of factory.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.FollowingPathButNotTraversing">
            <summary>
            There was an error following the planned path.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.Interrupted">
            <summary>
            The action was interrupted by another Action or Behavior.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.InvalidOffTreadsState">
            <summary>
            The robot ended up in an "off treads state" not valid for this action (e.g. the robot was placed on its back while executing a turn).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.MismatchedUpAxis">
            <summary>
            The Up Axis of a carried object doesn't match the desired placement pose.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NoAnimName">
            <summary>
            No valid Animation name was found.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NoDistanceSet">
            <summary>
            An invalid distance value was given.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NoFace">
            <summary>
            There was a problem with the Face ID (e.g. Vector doesn't no where it is).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NoGoalSet">
            <summary>
            No goal pose was set.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NoPreactionPoses">
            <summary>
            No pre-action poses were found (e.g. could not get into position).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NotCarryingObjectAbort">
            <summary>
            No object is being carried, but the action requires one.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NotOnChargerAbort">
            <summary>
            Vector is expected to be on the charger, but is not.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NullSubaction">
            <summary>
            No sub-action was provided.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.PathPlanningFailedAbort">
            <summary>
            Vector was unable to plan a path.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.PickupObjectUnexpectedlyMoving">
            <summary>
            The object that Vector is attempting to pickup is unexpectedly moving (e.g it is being moved by someone else).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.SendMessageToRobotFailed">
            <summary>
            Shouldn't occur in SDK usage.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.StillCarryingObject">
            <summary>
            Vector is unexpectedly still carrying an object.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.Timeout">
            <summary>
            The Action timed out before completing correctly.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.TracksLocked">
            <summary>
            One or more movement tracks (Head, Lift, Body, Face, Backpack Lights, Audio) are already being used by another Action.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.UnexpectedDockAction">
            <summary>
            There was an internal error related to an unexpected type of dock action.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.UnknownToolCode">
            <summary>
            Shouldn't occur outside of factory.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.UpdateDerivedFailed">
            <summary>
            There was a problem in the subclass's update on the robot.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.VisualObservationFailed">
            <summary>
            Vector did not see the expected result (e.g. unable to see cube in the expected position after a related action).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.ShouldntDriveOnCharger">
            <summary>
            Action is not permitted on the charger.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.Retry">
            <summary>
            The Action failed, but may succeed if retried.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.DidNotReachPreactionPose">
            <summary>
            Failed to get into position.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.FailedTraversingPath">
            <summary>
            Failed to follow the planned path.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.LastPickAndPlaceFailed">
            <summary>
            The previous attempt to pick and place an object failed.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.MotorStoppedMakingProgress">
            <summary>
            The required motor isn't moving so the action cannot complete.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NotCarryingObjectRetry">
            <summary>
            Not carrying an object when it was expected, but may succeed if the action is retried.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.NotOnChargerRetry">
            <summary>
            Driving onto the charger failed, but may succeed if the action is retried.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.PathPlanningFailedRetry">
            <summary>
            Vector was unable to plan a path, but may succeed if the action is retried.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.PlacementGoalNotFree">
            <summary>
            There is no room to place the object at the desired destination.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.PickupObjectUnexpectedlyNotMoving">
            <summary>
            The object that Vector thought he was lifting didn't start moving, so he must have missed.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.StillOnCharger">
            <summary>
            Vector failed to drive off the charger.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode.UnexpectedPitchAngle">
            <summary>
            Vector's pitch is at an unexpected angle for the Action.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CancelActionByIdTagRequest">
            <summary>
            Cancel a previously-requested action. Action requests include GoToPoseRequest, DockWithCubeRequest, DriveStraightRequest, TurnInPlaceRequest, SetHeadAngleRequest, and SetLiftHeightRequest.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CancelActionByIdTagRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.CancelActionByIdTagRequest.IdTag">
            <summary>
            Use the id_tag provided to the action request
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CancelActionByIdTagResponse">
            <summary>
            Response from the robot to CancelActionByIdTagRequest.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CancelActionByIdTagResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.CancelActionByIdTagResponse.Status">
            <summary>
            A generic status.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.GoToPoseRequest">
            <summary>
            GotoPose
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseRequest.XMmFieldNumber">
            <summary>Field number for the "x_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseRequest.YMmFieldNumber">
            <summary>Field number for the "y_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseRequest.RadFieldNumber">
            <summary>Field number for the "rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseRequest.MotionProfFieldNumber">
            <summary>Field number for the "motion_prof" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToPoseResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.DistanceFromMarkerMmFieldNumber">
            <summary>Field number for the "distance_from_marker_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.ApproachAngleRadFieldNumber">
            <summary>Field number for the "approach_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.AlignmentTypeFieldNumber">
            <summary>Field number for the "alignment_type" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.UseApproachAngleFieldNumber">
            <summary>Field number for the "use_approach_angle" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.UsePreDockPoseFieldNumber">
            <summary>Field number for the "use_pre_dock_pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.MotionProfFieldNumber">
            <summary>Field number for the "motion_prof" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DockWithCubeResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightRequest.SpeedMmpsFieldNumber">
            <summary>Field number for the "speed_mmps" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DriveStraightRequest.SpeedMmps">
            <summary>
            Speed should be positive
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightRequest.DistMmFieldNumber">
            <summary>Field number for the "dist_mm" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.DriveStraightRequest.DistMm">
            <summary>
            Use +ve for forward, -ve for backward
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightRequest.ShouldPlayAnimationFieldNumber">
            <summary>Field number for the "should_play_animation" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.DriveStraightResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.TurnInPlaceRequest">
            <summary>
            TurnInPlace
            If isAbsolute == 0, turns the specified number of radians, relative to the robot's current heading*
            If isAbsolute != 0, turns to the specified absolute orientation.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.AngleRadFieldNumber">
            <summary>Field number for the "angle_rad" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.TurnInPlaceRequest.AngleRad">
            <summary>
            relative mode: positive turns left negative turns right
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.SpeedRadPerSecFieldNumber">
            <summary>Field number for the "speed_rad_per_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.AccelRadPerSec2FieldNumber">
            <summary>Field number for the "accel_rad_per_sec2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.TolRadFieldNumber">
            <summary>Field number for the "tol_rad" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.TurnInPlaceRequest.TolRad">
            <summary>
            This should be no smaller than POINT_TURN_ANGLE_TOL (DEG_TO_RAD(2.f)).
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.IsAbsoluteFieldNumber">
            <summary>Field number for the "is_absolute" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.TurnInPlaceRequest.IsAbsolute">
            <summary>
            Smaller values are ignored except 0 which is interpreted to mean
            default tolerance of POINT_TURN_ANGLE_TOL.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnInPlaceResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SetHeadAngleRequest">
            <summary>
            SetHeadAngle
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleRequest.AngleRadFieldNumber">
            <summary>Field number for the "angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleRequest.MaxSpeedRadPerSecFieldNumber">
            <summary>Field number for the "max_speed_rad_per_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleRequest.AccelRadPerSec2FieldNumber">
            <summary>Field number for the "accel_rad_per_sec2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleRequest.DurationSecFieldNumber">
            <summary>Field number for the "duration_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetHeadAngleResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SetLiftHeightRequest">
            <summary>
            SetLiftHeight
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightRequest.HeightMmFieldNumber">
            <summary>Field number for the "height_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightRequest.MaxSpeedRadPerSecFieldNumber">
            <summary>Field number for the "max_speed_rad_per_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightRequest.AccelRadPerSec2FieldNumber">
            <summary>Field number for the "accel_rad_per_sec2" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightRequest.DurationSecFieldNumber">
            <summary>Field number for the "duration_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetLiftHeightResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.TurnTowardsFaceRequest">
            <summary>
            TurnTowardsFace
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnTowardsFaceRequest.FaceIdFieldNumber">
            <summary>Field number for the "face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnTowardsFaceRequest.MaxTurnAngleRadFieldNumber">
            <summary>Field number for the "max_turn_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnTowardsFaceRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnTowardsFaceRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnTowardsFaceResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.TurnTowardsFaceResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.GoToObjectRequest">
            <summary>
            GoToObject
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectRequest.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectRequest.MotionProfFieldNumber">
            <summary>Field number for the "motion_prof" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectRequest.DistanceFromObjectOriginMmFieldNumber">
            <summary>Field number for the "distance_from_object_origin_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectRequest.UsePreDockPoseFieldNumber">
            <summary>Field number for the "use_pre_dock_pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.GoToObjectResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.RollObjectRequest">
            <summary>
            RollObject
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.RollObjectRequest.ObjectId">
            <summary>
            negative value means "currently selected object"
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.MotionProfFieldNumber">
            <summary>Field number for the "motion_prof" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.ApproachAngleRadFieldNumber">
            <summary>Field number for the "approach_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.UseApproachAngleFieldNumber">
            <summary>Field number for the "use_approach_angle" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.UsePreDockPoseFieldNumber">
            <summary>Field number for the "use_pre_dock_pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.RollObjectResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PopAWheelieRequest">
            <summary>
            PopAWheelie
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PopAWheelieRequest.ObjectId">
            <summary>
            negative value means "currently selected object"
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.MotionProfFieldNumber">
            <summary>Field number for the "motion_prof" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.ApproachAngleRadFieldNumber">
            <summary>Field number for the "approach_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.UseApproachAngleFieldNumber">
            <summary>Field number for the "use_approach_angle" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.UsePreDockPoseFieldNumber">
            <summary>Field number for the "use_pre_dock_pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PopAWheelieResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PickupObjectRequest">
            <summary>
            PickupObject
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.ObjectIdFieldNumber">
            <summary>Field number for the "object_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.PickupObjectRequest.ObjectId">
            <summary>
            negative value means "currently selected object"
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.MotionProfFieldNumber">
            <summary>Field number for the "motion_prof" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.ApproachAngleRadFieldNumber">
            <summary>Field number for the "approach_angle_rad" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.UseApproachAngleFieldNumber">
            <summary>Field number for the "use_approach_angle" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.UsePreDockPoseFieldNumber">
            <summary>Field number for the "use_pre_dock_pose" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PickupObjectResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest">
            <summary>
            PlaceObjectOnGroundHere
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest.IdTagFieldNumber">
            <summary>Field number for the "id_tag" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereRequest.NumRetriesFieldNumber">
            <summary>Field number for the "num_retries" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PlaceObjectOnGroundHereResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.BatteryLevelFieldNumber">
            <summary>Field number for the "battery_level" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.BatteryVoltsFieldNumber">
            <summary>Field number for the "battery_volts" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.IsChargingFieldNumber">
            <summary>Field number for the "is_charging" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.IsOnChargerPlatformFieldNumber">
            <summary>Field number for the "is_on_charger_platform" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.SuggestedChargerSecFieldNumber">
            <summary>Field number for the "suggested_charger_sec" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.BatteryStateResponse.CubeBatteryFieldNumber">
            <summary>Field number for the "cube_battery" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CubeBattery.LevelFieldNumber">
            <summary>Field number for the "level" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CubeBattery.FactoryIdFieldNumber">
            <summary>Field number for the "factory_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CubeBattery.BatteryVoltsFieldNumber">
            <summary>Field number for the "battery_volts" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CubeBattery.TimeSinceLastReadingSecFieldNumber">
            <summary>Field number for the "time_since_last_reading_sec" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CubeBattery.Types">
            <summary>Container for nested types declared in the CubeBattery message type.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.VersionStateResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.VersionStateResponse.OsVersionFieldNumber">
            <summary>Field number for the "os_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.VersionStateResponse.EngineBuildIdFieldNumber">
            <summary>Field number for the "engine_build_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SayTextRequest.TextFieldNumber">
            <summary>Field number for the "text" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SayTextRequest.UseVectorVoiceFieldNumber">
            <summary>Field number for the "use_vector_voice" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SayTextRequest.DurationScalarFieldNumber">
            <summary>Field number for the "duration_scalar" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SayTextResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SayTextResponse.StateFieldNumber">
            <summary>Field number for the "state" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SayTextResponse.Types">
            <summary>Container for nested types declared in the SayTextResponse message type.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.EmotionEventsFieldNumber">
            <summary>Field number for the "emotion_events" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.StimulationInfo.EmotionEvents">
            <summary>
            may be empty
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.VelocityFieldNumber">
            <summary>Field number for the "velocity" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.StimulationInfo.Velocity">
            <summary>
            value per second
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.AccelFieldNumber">
            <summary>Field number for the "accel" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.StimulationInfo.Accel">
            <summary>
            value per sec per sec
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.ValueBeforeEventFieldNumber">
            <summary>Field number for the "value_before_event" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.StimulationInfo.ValueBeforeEvent">
            <summary>
            matches value if there were no emotion events
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.MinValueFieldNumber">
            <summary>Field number for the "min_value" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.StimulationInfo.MaxValueFieldNumber">
            <summary>Field number for the "max_value" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioSendModeRequest">
            <summary>
            Request how the robot should process and send audio
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioSendModeRequest.ModeFieldNumber">
            <summary>Field number for the "mode" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioSendModeChanged">
            <summary>
            Event sent when the robot changes the mode it's processing and sending audio
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioSendModeChanged.ModeFieldNumber">
            <summary>Field number for the "mode" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioChunk">
            <summary>
            One frame of robot audio data and associated metadata
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.RobotTimeStampFieldNumber">
            <summary>Field number for the "robot_time_stamp" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.RobotTimeStamp">
            <summary>
            robot time at the final chunk of this audio sample group transmission
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.GroupIdFieldNumber">
            <summary>Field number for the "group_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.GroupId">
            <summary>
            the id of this sample transmission group
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.ChunkIdFieldNumber">
            <summary>Field number for the "chunk_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.ChunkId">
            <summary>
            the current batched chunk id within in this group id
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.AudioChunkCountFieldNumber">
            <summary>Field number for the "audio_chunk_count" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.AudioChunkCount">
            <summary>
            number of chunks batched within this group id
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.SignalPowerFieldNumber">
            <summary>Field number for the "signal_power" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.SignalPower">
            <summary>
            mono audio amplitude samples
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.DirectionStrengthsFieldNumber">
            <summary>Field number for the "direction_strengths" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.DirectionStrengths">
            <summary>
            histogram data of which directions this audio chunk came from
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.SourceDirectionFieldNumber">
            <summary>Field number for the "source_direction" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.SourceDirection">
            <summary>
            0-11, with 12 representing "invalid"
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.SourceConfidenceFieldNumber">
            <summary>Field number for the "source_confidence" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.SourceConfidence">
            <summary>
            accuracy of the calculated source_direction
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioChunk.NoiseFloorPowerFieldNumber">
            <summary>Field number for the "noise_floor_power" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioChunk.NoiseFloorPower">
            <summary>
            power value, convert to db with log_10(value)
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioFeedRequest">
            <summary>
            Request the robot to send audio data
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AudioFeedResponse">
            <summary>
            Streamed audio data from the robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.RobotTimeStampFieldNumber">
            <summary>Field number for the "robot_time_stamp" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.RobotTimeStamp">
            <summary>
            robot time at the transmission of this audio sample group
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.GroupIdFieldNumber">
            <summary>Field number for the "group_id" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.GroupId">
            <summary>
            the index of this audio feed response
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.SignalPowerFieldNumber">
            <summary>Field number for the "signal_power" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.SignalPower">
            <summary>
            mono audio amplitude samples
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.DirectionStrengthsFieldNumber">
            <summary>Field number for the "direction_strengths" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.DirectionStrengths">
            <summary>
            histogram data of which directions this audio chunk came from
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.SourceDirectionFieldNumber">
            <summary>Field number for the "source_direction" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.SourceDirection">
            <summary>
            0-11, with 12 representing "invalid"
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.SourceConfidenceFieldNumber">
            <summary>Field number for the "source_confidence" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.SourceConfidence">
            <summary>
            accuracy of the calculated source_direction
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AudioFeedResponse.NoiseFloorPowerFieldNumber">
            <summary>Field number for the "noise_floor_power" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.AudioFeedResponse.NoiseFloorPower">
            <summary>
            power value, convert to db with log_10(value)
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamPrepare">
            <summary>
            Preflight and initialization for audio streaming to robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamPrepare.AudioFrameRateFieldNumber">
            <summary>Field number for the "audio_frame_rate" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExternalAudioStreamPrepare.AudioFrameRate">
            <summary>
            8000 - 16025
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamPrepare.AudioVolumeFieldNumber">
            <summary>Field number for the "audio_volume" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExternalAudioStreamPrepare.AudioVolume">
            <summary>
            0 - 100
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamChunk">
            <summary>
            Send chunk of audio data to stream on robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamChunk.AudioChunkSizeBytesFieldNumber">
            <summary>Field number for the "audio_chunk_size_bytes" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExternalAudioStreamChunk.AudioChunkSizeBytes">
             <summary>
            current engine maximum of 1024 bytes
             </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamChunk.AudioChunkSamplesFieldNumber">
            <summary>Field number for the "audio_chunk_samples" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ExternalAudioStreamChunk.AudioChunkSamples">
             <summary>
            16-bit little-endian PCM audio data
             </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamComplete">
            <summary>
            Send notification of last chunk of audio sent to robot
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamCancel">
            <summary>
            Cancel a playing external robot audio stream
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamRequest">
            <summary>
            Request to stream audio to the robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamRequest.AudioStreamPrepareFieldNumber">
            <summary>Field number for the "audio_stream_prepare" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamRequest.AudioStreamChunkFieldNumber">
            <summary>Field number for the "audio_stream_chunk" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamRequest.AudioStreamCompleteFieldNumber">
            <summary>Field number for the "audio_stream_complete" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamRequest.AudioStreamCancelFieldNumber">
            <summary>Field number for the "audio_stream_cancel" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamRequest.AudioRequestTypeOneofCase">
            <summary>Enum of possible cases for the "audio_request_type" oneof.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamPlaybackComplete">
            <summary>
            Audio has been played on the Robot
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamPlaybackFailure">
            <summary>
            Audio playback failure
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamBufferOverrun">
            <summary>
            Audio has been sent to robot that would overrun the memory buffer
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamBufferOverrun.AudioSamplesSentFieldNumber">
            <summary>Field number for the "audio_samples_sent" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamBufferOverrun.AudioSamplesPlayedFieldNumber">
            <summary>Field number for the "audio_samples_played" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamResponse">
            <summary>
            Response from streaming audio to robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamResponse.AudioStreamPlaybackCompleteFieldNumber">
            <summary>Field number for the "audio_stream_playback_complete" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamResponse.AudioStreamBufferOverrunFieldNumber">
            <summary>Field number for the "audio_stream_buffer_overrun" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ExternalAudioStreamResponse.AudioStreamPlaybackFailyerFieldNumber">
            <summary>Field number for the "audio_stream_playback_failyer" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ExternalAudioStreamResponse.AudioResponseTypeOneofCase">
            <summary>Enum of possible cases for the "audio_response_type" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MasterVolumeRequest.VolumeLevelFieldNumber">
            <summary>Field number for the "volume_level" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.MasterVolumeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.EnableMarkerDetectionRequest">
            <summary>
            When enabled, RobotObservedObject messages will be produced
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableMarkerDetectionRequest.EnableFieldNumber">
            <summary>Field number for the "enable" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableMarkerDetectionResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.EnableFaceDetectionRequest">
            <summary>
            When enabled, RobotObservedFace messages will be produced
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableFaceDetectionRequest.EnableFieldNumber">
            <summary>Field number for the "enable" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableFaceDetectionRequest.EnableSmileDetectionFieldNumber">
            <summary>Field number for the "enable_smile_detection" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableFaceDetectionRequest.EnableExpressionEstimationFieldNumber">
            <summary>Field number for the "enable_expression_estimation" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableFaceDetectionRequest.EnableBlinkDetectionFieldNumber">
            <summary>Field number for the "enable_blink_detection" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableFaceDetectionRequest.EnableGazeDetectionFieldNumber">
            <summary>Field number for the "enable_gaze_detection" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableFaceDetectionResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.EnableMotionDetectionRequest">
            <summary>
            When enabled, RobotObservedMotion messages will be produced
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableMotionDetectionRequest.EnableFieldNumber">
            <summary>Field number for the "enable" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableMotionDetectionResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.EnableMirrorModeRequest">
            <summary>
            When enabled, camera feed will appear on the robot's face, along with any 
            detections that are enabled from above messages
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableMirrorModeRequest.EnableFieldNumber">
            <summary>Field number for the "enable" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableMirrorModeResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.MirrorModeDisabled">
            <summary>
            Sent if MirrorMode (camera feed displayed on face) is currently enabled but is automatically
            being disabled
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.EnableImageStreamingRequest">
            <summary>
            Toggle image streaming at the given resolution
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableImageStreamingRequest.EnableFieldNumber">
            <summary>Field number for the "enable" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EnableImageStreamingResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.IsImageStreamingEnabledRequest">
            <summary>
            Request whether or not image streaming is enabled on the robot
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.IsImageStreamingEnabledResponse">
            <summary>
            Indicates whether or not image streaming is enabled on the robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.IsImageStreamingEnabledResponse.IsImageStreamingEnabledFieldNumber">
            <summary>Field number for the "is_image_streaming_enabled" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.VisionModesAutoDisabled">
            <summary>
            Sent when vision modes are automatically disabled due to the SDK no longer having control
            of the robot
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ImageChunk">
            <summary>
            One frame of image data and associated metadata
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.FrameTimeStampFieldNumber">
            <summary>Field number for the "frame_time_stamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.ImageIdFieldNumber">
            <summary>Field number for the "image_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.WidthFieldNumber">
            <summary>Field number for the "width" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.HeightFieldNumber">
            <summary>Field number for the "height" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.ImageEncodingFieldNumber">
            <summary>Field number for the "image_encoding" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.DisplayIndexFieldNumber">
            <summary>Field number for the "display_index" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.ImageChunkCountFieldNumber">
            <summary>Field number for the "image_chunk_count" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.ChunkIdFieldNumber">
            <summary>Field number for the "chunk_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ImageChunk.Types">
            <summary>Container for nested types declared in the ImageChunk message type.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding.RawGray">
            <summary>
            no compression
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding.RawRgb">
            <summary>
            no compression, just [RGBRGBRG...]
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding.JpegMinimizedGray">
            <summary>
            Minimized grayscale JPEG - no header, no footer, no byte stuffing
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding.JpegMinimizedColor">
            <summary>
            Minimized grayscale JPEG - no header, no footer, no byte stuffing, with added color data
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CameraFeedResponse.FrameTimeStampFieldNumber">
            <summary>Field number for the "frame_time_stamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CameraFeedResponse.ImageIdFieldNumber">
            <summary>Field number for the "image_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CameraFeedResponse.ImageEncodingFieldNumber">
            <summary>Field number for the "image_encoding" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CameraFeedResponse.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CaptureSingleImageResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CaptureSingleImageResponse.FrameTimeStampFieldNumber">
            <summary>Field number for the "frame_time_stamp" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CaptureSingleImageResponse.ImageIdFieldNumber">
            <summary>Field number for the "image_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CaptureSingleImageResponse.ImageEncodingFieldNumber">
            <summary>Field number for the "image_encoding" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CaptureSingleImageResponse.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetEyeColorRequest.HueFieldNumber">
            <summary>Field number for the "hue" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetEyeColorRequest.SaturationFieldNumber">
            <summary>Field number for the "saturation" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SetEyeColorResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SDKInitializationRequest.SdkModuleVersionFieldNumber">
            <summary>Field number for the "sdk_module_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SDKInitializationRequest.PythonVersionFieldNumber">
            <summary>Field number for the "python_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SDKInitializationRequest.PythonImplementationFieldNumber">
            <summary>Field number for the "python_implementation" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SDKInitializationRequest.OsVersionFieldNumber">
            <summary>Field number for the "os_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SDKInitializationRequest.CpuVersionFieldNumber">
            <summary>Field number for the "cpu_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.SDKInitializationResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AppIntentRequest.IntentFieldNumber">
            <summary>Field number for the "intent" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AppIntentRequest.ParamFieldNumber">
            <summary>Field number for the "param" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AppIntentResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureStatus.FeatureNameFieldNumber">
            <summary>Field number for the "feature_name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureStatus.SourceFieldNumber">
            <summary>Field number for the "source" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.FeatureStatus.Source">
            <summary>
            Voice, App, AI, Unknown
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagRequest.FeatureNameFieldNumber">
            <summary>Field number for the "feature_name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagResponse.ValidFeatureFieldNumber">
            <summary>Field number for the "valid_feature" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagResponse.FeatureEnabledFieldNumber">
            <summary>Field number for the "feature_enabled" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagListRequest.RequestListFieldNumber">
            <summary>Field number for the "request_list" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagListResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FeatureFlagListResponse.ListFieldNumber">
            <summary>Field number for the "list" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AttentionTransfer.ReasonFieldNumber">
            <summary>Field number for the "reason" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AttentionTransfer.SecondsAgoFieldNumber">
            <summary>Field number for the "seconds_ago" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LatestAttentionTransfer.AttentionTransferFieldNumber">
            <summary>Field number for the "attention_transfer" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.LatestAttentionTransfer.OneofMessageTypeOneofCase">
            <summary>Enum of possible cases for the "oneof_message_type" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LatestAttentionTransferResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.LatestAttentionTransferResponse.LatestAttentionTransferFieldNumber">
            <summary>Field number for the "latest_attention_transfer" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateAndRestartResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckUpdateStatusResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckUpdateStatusResponse.UpdateStatusFieldNumber">
            <summary>Field number for the "update_status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckUpdateStatusResponse.ExpectedFieldNumber">
            <summary>Field number for the "expected" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckUpdateStatusResponse.ProgressFieldNumber">
            <summary>Field number for the "progress" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckUpdateStatusResponse.UpdateVersionFieldNumber">
            <summary>Field number for the "update_version" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CheckUpdateStatusResponse.Types">
            <summary>Container for nested types declared in the CheckUpdateStatusResponse message type.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckCloudResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckCloudResponse.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckCloudResponse.StatusMessageFieldNumber">
            <summary>Field number for the "status_message" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckCloudResponse.NumPacketsFieldNumber">
            <summary>Field number for the "num_packets" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.CheckCloudResponse.ExpectedPacketsFieldNumber">
            <summary>Field number for the "expected_packets" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.CheckCloudResponse.Types">
            <summary>Container for nested types declared in the CheckCloudResponse message type.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.NavMapReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/nav_map.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.NavMapReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/nav_map.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.NavNodeContentType">
            <summary>
            Every tile in the nav map will be tagged with a content key referring to
            the different environmental elements that Vector can identify.
            </summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.NavMapQuadInfo">
            <summary>
            An individual sample of vector's nav map.  This quad's size will vary and
            depends on the resolution the map requires to effectively identify
            boundaries in the environment.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapQuadInfo.ContentFieldNumber">
            <summary>Field number for the "content" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapQuadInfo.DepthFieldNumber">
            <summary>Field number for the "depth" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapQuadInfo.ColorRgbaFieldNumber">
            <summary>Field number for the "color_rgba" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.NavMapInfo">
            <summary>
            General information about the nav map as a whole.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapInfo.RootDepthFieldNumber">
            <summary>Field number for the "root_depth" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapInfo.RootSizeMmFieldNumber">
            <summary>Field number for the "root_size_mm" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapInfo.RootCenterXFieldNumber">
            <summary>Field number for the "root_center_x" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapInfo.RootCenterYFieldNumber">
            <summary>Field number for the "root_center_y" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapInfo.RootCenterZFieldNumber">
            <summary>Field number for the "root_center_z" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.NavMapFeedRequest">
            <summary>
            Requests nav map data from the robot at a specified maximum update frequency.
            Responses in the nav map stream may be sent less frequently if the robot does
            not consider there to be relevant new information.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapFeedRequest.FrequencyFieldNumber">
            <summary>Field number for the "frequency" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.NavMapFeedResponse">
            <summary>
            A full nav map sent from the robot.  It contains an origin_id that
            which can be compared against the robot's current origin_id, general
            info about the map, and a collection of quads representing the map's
            content.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapFeedResponse.OriginIdFieldNumber">
            <summary>Field number for the "origin_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapFeedResponse.MapInfoFieldNumber">
            <summary>Field number for the "map_info" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NavMapFeedResponse.QuadInfosFieldNumber">
            <summary>Field number for the "quad_infos" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.OnboardingStepsReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/onboardingSteps.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.OnboardingStepsReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/onboardingSteps.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ResponseStatusReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/response_status.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.ResponseStatusReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/response_status.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SettingsReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/settings.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SettingsReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/settings.proto</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.RobotSetting">
            <summary>
            RobotSetting enum values are not in all caps for historical reasons.
            Changing that now would involve a format migration because we're now
            saving robot settings jdocs in the cloud.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AccountSettingsConfig.DataCollectionFieldNumber">
            <summary>Field number for the "data_collection" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.AccountSettingsConfig.AppLocaleFieldNumber">
            <summary>Field number for the "app_locale" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AccountSettingsConfig.OneofDataCollectionOneofCase">
            <summary>Enum of possible cases for the "oneof_data_collection" oneof.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.AccountSettingsConfig.OneofAppLocaleOneofCase">
            <summary>Enum of possible cases for the "oneof_app_locale" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserEntitlementsConfig.KickstarterEyesFieldNumber">
            <summary>Field number for the "kickstarter_eyes" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.UserEntitlementsConfig.OneofKickstarterEyesOneofCase">
            <summary>Enum of possible cases for the "oneof_kickstarter_eyes" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NamedJdoc.JdocTypeFieldNumber">
            <summary>Field number for the "jdoc_type" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.NamedJdoc.DocFieldNumber">
            <summary>Field number for the "doc" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PullJdocsRequest.JdocTypesFieldNumber">
            <summary>Field number for the "jdoc_types" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PullJdocsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.PullJdocsResponse.NamedJdocsFieldNumber">
            <summary>Field number for the "named_jdocs" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateAccountSettingsRequest.AccountSettingsFieldNumber">
            <summary>Field number for the "account_settings" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateAccountSettingsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateAccountSettingsResponse.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateAccountSettingsResponse.DocFieldNumber">
            <summary>Field number for the "doc" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateUserEntitlementsRequest.UserEntitlementsFieldNumber">
            <summary>Field number for the "user_entitlements" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateUserEntitlementsResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateUserEntitlementsResponse.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UpdateUserEntitlementsResponse.DocFieldNumber">
            <summary>Field number for the "doc" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.JdocsChanged.JdocTypesFieldNumber">
            <summary>Field number for the "jdoc_types" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.SharedReflection">
            <summary>Holder for reflection information generated from anki_vector/messaging/shared.proto</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.SharedReflection.Descriptor">
            <summary>File descriptor for anki_vector/messaging/shared.proto</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersionRequest.ClientVersionFieldNumber">
            <summary>Field number for the "client_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersionRequest.MinHostVersionFieldNumber">
            <summary>Field number for the "min_host_version" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersionResponse.ResultFieldNumber">
            <summary>Field number for the "result" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ProtocolVersionResponse.HostVersionFieldNumber">
            <summary>Field number for the "host_version" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.ProtocolVersionResponse.Types">
            <summary>Container for nested types declared in the ProtocolVersionResponse message type.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ConnectionResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.ConnectionResponse.IsPrimaryFieldNumber">
            <summary>Field number for the "is_primary" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.Event">
            <summary>
            Messages originating from the engine
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.TimeStampedStatusFieldNumber">
            <summary>Field number for the "time_stamped_status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.WakeWordFieldNumber">
            <summary>Field number for the "wake_word" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.AttentionTransferFieldNumber">
            <summary>Field number for the "attention_transfer" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.RobotObservedFaceFieldNumber">
            <summary>Field number for the "robot_observed_face" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.RobotChangedObservedFaceIdFieldNumber">
            <summary>Field number for the "robot_changed_observed_face_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.ObjectEventFieldNumber">
            <summary>Field number for the "object_event" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.StimulationInfoFieldNumber">
            <summary>Field number for the "stimulation_info" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.PhotoTakenFieldNumber">
            <summary>Field number for the "photo_taken" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.RobotStateFieldNumber">
            <summary>Field number for the "robot_state" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.CubeBatteryFieldNumber">
            <summary>Field number for the "cube_battery" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.KeepAliveFieldNumber">
            <summary>Field number for the "keep_alive" field.</summary>
        </member>
        <member name="P:Anki.Vector.ExternalInterface.Event.KeepAlive">
            <summary>
            Used by Vector to verify the connection is still alive.
            </summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.ConnectionResponseFieldNumber">
            <summary>Field number for the "connection_response" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.JdocsChangedFieldNumber">
            <summary>Field number for the "jdocs_changed" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.AlexaAuthEventFieldNumber">
            <summary>Field number for the "alexa_auth_event" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.MirrorModeDisabledFieldNumber">
            <summary>Field number for the "mirror_mode_disabled" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.VisionModesAutoDisabledFieldNumber">
            <summary>Field number for the "vision_modes_auto_disabled" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.CheckUpdateStatusResponseFieldNumber">
            <summary>Field number for the "check_update_status_response" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.Event.UserIntentFieldNumber">
            <summary>Field number for the "user_intent" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.Event.EventTypeOneofCase">
            <summary>Enum of possible cases for the "event_type" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.FilterList.ListFieldNumber">
            <summary>Field number for the "list" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EventRequest.WhiteListFieldNumber">
            <summary>Field number for the "white_list" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EventRequest.BlackListFieldNumber">
            <summary>Field number for the "black_list" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EventRequest.ConnectionIdFieldNumber">
            <summary>Field number for the "connection_id" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.EventRequest.ListTypeOneofCase">
            <summary>Enum of possible cases for the "list_type" oneof.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EventResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.EventResponse.EventFieldNumber">
            <summary>Field number for the "event" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserAuthenticationRequest.UserSessionIdFieldNumber">
            <summary>Field number for the "user_session_id" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserAuthenticationRequest.ClientNameFieldNumber">
            <summary>Field number for the "client_name" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserAuthenticationResponse.StatusFieldNumber">
            <summary>Field number for the "status" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserAuthenticationResponse.CodeFieldNumber">
            <summary>Field number for the "code" field.</summary>
        </member>
        <member name="F:Anki.Vector.ExternalInterface.UserAuthenticationResponse.ClientTokenGuidFieldNumber">
            <summary>Field number for the "client_token_guid" field.</summary>
        </member>
        <member name="T:Anki.Vector.ExternalInterface.UserAuthenticationResponse.Types">
            <summary>Container for nested types declared in the UserAuthenticationResponse message type.</summary>
        </member>
        <member name="T:Anki.Vector.FaceComponent">
            <summary>
            Manage the state of the faces on the robot.
            </summary>
        </member>
        <member name="M:Anki.Vector.FaceComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.FaceComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.FaceComponent.GetEnrolledFaces">
            <summary>
            Gets the enrolled faces.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains an enumeration of <see cref="T:Anki.Vector.Types.KnownFace"/> instances.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.SetFaceToEnroll(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enrolls face into the robot (untested)
            </summary>
            <param name="name">The name of the person to enroll.</param>
            <param name="observedFaceId">The ID of a specific observed face to enroll (0 for next one we see)</param>
            <param name="saveToExistingFaceId">The ID of an existing face to merge final enrollment into (0 for none).</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.EnrollFace(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enrolls face into the robot (untested)
            </summary>
            <param name="name">The name of the person to enroll.</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.EnrollFace(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enrolls face into the robot (untested)
            </summary>
            <param name="name">The name of the person to enroll.</param>
            <param name="observedFaceId">The ID of a specific observed face to enroll (0 for next one we see)</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.EnrollFace(System.String,Anki.Vector.Objects.Face,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enrolls face into the robot (untested)
            </summary>
            <param name="name">The name.</param>
            <param name="faceToEnroll">The specific observed face to enroll.</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>
            A task that represents the asynchronous operation; the task result contains the result from the robot.
            </returns>
            <exception cref="T:System.ArgumentNullException">faceToEnroll</exception>
        </member>
        <member name="M:Anki.Vector.FaceComponent.UpdateEnrolledFace(Anki.Vector.Types.KnownFace,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates an existing enrolled face
            </summary>
            <param name="faceToUpdate">An existing face to merge final enrollment into.</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.UpdateEnrolledFace(Anki.Vector.Types.KnownFace,Anki.Vector.Objects.Face,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates an existing enrolled face
            </summary>
            <param name="faceToUpdate">An existing face to merge final enrollment into.</param>
            <param name="faceToEnroll">The specific observed face to enroll.</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.UpdateEnrolledFace(Anki.Vector.Types.KnownFace,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates an existing enrolled face
            </summary>
            <param name="faceToUpdate">An existing face to merge final enrollment into.</param>
            <param name="observedFaceId">The ID of a specific observed face to enroll (0 for next one we see)</param>
            <param name="saveToRobot">Save the robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)</param>
            <param name="sayName">Play say-name/celebration animations on success before completing</param>
            <param name="useMusic">Starts special music during say-name animations (will leave music playing)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.CancelFaceEnrollment">
            <summary>
            Cancels the face enrollment.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.UpdateEnrolledFaceName(System.Int32,System.String,System.String)">
            <summary>
            Updates the name of the enrolled face.
            </summary>
            <param name="faceId">The ID of the face to rename.</param>
            <param name="oldName">The old name of the face (must be correct, otherwise message is ignored).</param>
            <param name="newName">The new name for the face.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.UpdateEnrolledFaceName(Anki.Vector.Types.KnownFace,System.String)">
            <summary>
            Updates the name of the enrolled face.
            </summary>
            <param name="face">The face to rename.</param>
            <param name="newName">The new name.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.EraseEnrolledFace(System.Int32)">
            <summary>
            Erases the enrollment (name) record for the face.
            </summary>
            <param name="faceId">The face identifier.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.EraseEnrolledFace(Anki.Vector.Types.KnownFace)">
            <summary>
            Erases the enrollment (name) record for the face.
            </summary>
            <param name="face">The face.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.EraseAllEnrolledFaces">
            <summary>
            Erase the enrollment (name) records for all faces.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.FaceComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.GrpcUtil.IAsyncDuplexEventLoop`1">
            <summary>
            Async event loop interface
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <seealso cref="T:Anki.Vector.GrpcUtil.IAsyncEventLoop" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Anki.Vector.GrpcUtil.IAsyncDuplexEventLoop`1.Call(`0)">
            <summary>
            Makes a call to the stream.  If the loop is not started yet, this starts it.
            </summary>
            <param name="request">The request.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2">
            <summary>
            Provides an abstraction around a GRPC AsyncDuplexStreamingCall.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:Anki.Vector.GrpcUtil.IAsyncDuplexEventLoop`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.ShutdownTimeout">
            <summary>
            The shutdown timeout in milliseconds.
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.startFunction">
            <summary>
            The start function which is executed to begin the feed.
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.resultAction">
            <summary>
            The result action called every time an event is received.
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.endAction">
            <summary>
            The action called when the loop ends
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.exceptionHandler">
            <summary>
            The action called when an exception occurs
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.feed">
            <summary>
            The GPRC streaming call instance
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.cancellationTokenSource">
            <summary>
            The cancellation token source for terminating the feed
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.startTaskCompletionSource">
            <summary>
            The feed loop start completion source
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.endTaskCompletionSource">
            <summary>
            The feed loop end completion source
            </summary>
        </member>
        <member name="P:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.Exception">
            <summary>
            Gets the last exception that terminated the event loop, if it was terminated by exception.
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.#ctor(System.Func{System.Threading.CancellationToken,Grpc.Core.AsyncDuplexStreamingCall{`0,`1}},System.Action{`1},System.Action,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2" /> class.
            </summary>
            <param name="startFunction">The start function.</param>
            <param name="resultAction">The result action.</param>
            <param name="endAction">The end action.</param>
            <param name="exceptionHandler">The exception handler.</param>
        </member>
        <member name="P:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.IsActive">
            <summary>
            Gets a value indicating whether the event loop is active.
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.Start">
            <summary>
            Starts the event loop.  The loop will run in a background thread and call the resultAction function every time a response is received
            from the stream.  This task will complete when the loop starts.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.StartAsync">
            <summary>
            Starts the event loop asynchronously and call the resultAction function every time a response is received
            from the stream.  This task will complete when the loop ends.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">The event loop has already been started.</exception>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.End">
            <summary>
            Ends the event loop.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.Call(`0)">
            <summary>
            Makes a call to the stream.  If the loop is not started yet, this starts it.
            </summary>
            <param name="request">The request.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncDuplexEventLoop`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Anki.Vector.GrpcUtil.IAsyncEventLoop">
            <summary>
            Async event loop interface
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Anki.Vector.GrpcUtil.IAsyncEventLoop.IsActive">
            <summary>
            Gets a value indicating whether the event loop is active.
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.IAsyncEventLoop.Start">
            <summary>
            Starts the event loop.  The loop will run in a background thread and call the resultAction function every time a response is received
            from the stream.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.IAsyncEventLoop.End">
            <summary>
            Ends the event loop.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.GrpcUtil.AsyncEventLoop`1">
            <summary>
            Concrete implementation of the AsyncEventLoop for GRPC.  Takes an AsyncStreamingCall function and an action to process when
            each event comes in.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:Anki.Vector.GrpcUtil.IAsyncEventLoop" />
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.ShutdownTimeout">
            <summary>
            The shutdown timeout in milliseconds.
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.startFunction">
            <summary>
            The feed start function
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.resultAction">
            <summary>
            The result action
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.endAction">
            <summary>
            The action called when the loop ends
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.exceptionHandler">
            <summary>
            The action called when an exception occurs
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.cancellationTokenSource">
            <summary>
            The cancellation token source for terminating the feed
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.startTaskCompletionSource">
            <summary>
            The feed loop start task completion source
            </summary>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.endTaskCompletionSource">
            <summary>
            The feed loop end task completion source
            </summary>
        </member>
        <member name="P:Anki.Vector.GrpcUtil.AsyncEventLoop`1.Exception">
            <summary>
            Gets the last exception that terminated the event loop, if it was terminated by exception.
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncEventLoop`1.#ctor(System.Func{System.Threading.CancellationToken,Grpc.Core.AsyncServerStreamingCall{`0}},System.Action{`0},System.Action,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.GrpcUtil.AsyncEventLoop`1" /> class.
            </summary>
            <param name="startFunction">The function called to start the stream.</param>
            <param name="resultAction">The function called with each stream result.</param>
            <param name="endAction">The optional action called when the stream ends.</param>
            <param name="exceptionHandler">The optional exception handler.</param>
        </member>
        <member name="P:Anki.Vector.GrpcUtil.AsyncEventLoop`1.IsActive">
            <summary>
            Gets a value indicating whether the event loop is active.
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncEventLoop`1.Start">
            <summary>
            Starts the event loop.  The loop will run in a background thread and call the resultAction function every time a response is received
            from the stream.  This task will complete when the loop starts.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncEventLoop`1.StartAsync">
            <summary>
            Starts the event loop asynchronously and call the resultAction function every time a response is received
            from the stream.  This task will complete when the loop ends.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.InvalidOperationException">The event loop has already been started.</exception>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncEventLoop`1.End">
            <summary>
            Ends the event loop.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="F:Anki.Vector.GrpcUtil.AsyncEventLoop`1.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncEventLoop`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Anki.Vector.GrpcUtil.AsyncEventLoop`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Anki.Vector.IRemoteRobotConfiguration">
            <summary>
            Robot configuration information for remote (over the Internet) connections.  This structure does not include IP address, instead it has a <see cref="P:Anki.Vector.IRemoteRobotConfiguration.RemoteHost"/>
            property which can contain an IP address or hostname and optionally include the port to connect with.
            </summary>
        </member>
        <member name="P:Anki.Vector.IRemoteRobotConfiguration.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.IRemoteRobotConfiguration.Certificate">
            <summary>
            Gets the certificate text.
            </summary>
        </member>
        <member name="P:Anki.Vector.IRemoteRobotConfiguration.RemoteHost">
            <summary>
            Gets the remote robot host and port.  This can be an IP address (196.168.5.123) or host name (home.whatever.com") optionally followed by a colon and 
            the port to connect to (196.168.5.123:4545 or home.whatever.com:4444)
            </summary>
        </member>
        <member name="P:Anki.Vector.IRemoteRobotConfiguration.RobotName">
            <summary>
            Gets the name of the robot.  This is in the form "Vector-XXXX"
            </summary>
        </member>
        <member name="P:Anki.Vector.IRemoteRobotConfiguration.SerialNumber">
            <summary>
            Gets the robot serial number.
            </summary>
        </member>
        <member name="T:Anki.Vector.IRobotConfiguration">
            <summary>
            Robot configuration information
            </summary>
        </member>
        <member name="P:Anki.Vector.IRobotConfiguration.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.IRobotConfiguration.Certificate">
            <summary>
            Gets the certificate text.
            </summary>
        </member>
        <member name="P:Anki.Vector.IRobotConfiguration.IPAddress">
            <summary>
            Gets the robot IP address
            </summary>
        </member>
        <member name="P:Anki.Vector.IRobotConfiguration.RobotName">
            <summary>
            Gets the name of the robot.  This is in the form "Vector-XXXX"
            </summary>
        </member>
        <member name="P:Anki.Vector.IRobotConfiguration.SerialNumber">
            <summary>
            Gets the robot serial number.
            </summary>
        </member>
        <member name="T:Anki.Vector.MotorSpeed">
            <summary>
            The speed of the motors for drive and move
            </summary>
        </member>
        <member name="F:Anki.Vector.MotorSpeed.Slow">
            <summary>The slow speed</summary>
        </member>
        <member name="F:Anki.Vector.MotorSpeed.Medium">
            <summary>The medium (default) speed</summary>
        </member>
        <member name="F:Anki.Vector.MotorSpeed.Fast">
            <summary>The fast speed</summary>
        </member>
        <member name="T:Anki.Vector.DriveDirection">
            <summary>
            The drive direction (forwards or backwards)
            </summary>
        </member>
        <member name="F:Anki.Vector.DriveDirection.None">
            <summary>No forward/backward movement</summary>
        </member>
        <member name="F:Anki.Vector.DriveDirection.Forwards">
            <summary>Move forwards movement</summary>
        </member>
        <member name="F:Anki.Vector.DriveDirection.Backwards">
            <summary>Move backwards movement</summary>
        </member>
        <member name="T:Anki.Vector.TurnDirection">
            <summary>
            The drive turn direction (left, right)
            </summary>
        </member>
        <member name="F:Anki.Vector.TurnDirection.None">
            <summary>No turning</summary>
        </member>
        <member name="F:Anki.Vector.TurnDirection.Right">
            <summary>Turn right</summary>
        </member>
        <member name="F:Anki.Vector.TurnDirection.Left">
            <summary>Turn left</summary>
        </member>
        <member name="T:Anki.Vector.MoveDirection">
            <summary>
            The direction for moving head or lift (up, down)
            </summary>
        </member>
        <member name="F:Anki.Vector.MoveDirection.None">
            <summary>No up/down movement</summary>
        </member>
        <member name="F:Anki.Vector.MoveDirection.Up">
            <summary>Up movement</summary>
        </member>
        <member name="F:Anki.Vector.MoveDirection.Down">
            <summary>Down movement</summary>
        </member>
        <member name="T:Anki.Vector.MotorComponent">
            <summary>
            Controls the low-level motor functions.
            </summary>
        </member>
        <member name="M:Anki.Vector.MotorComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.MotorComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.MotorComponent.SetWheelMotors(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Tell Vector to move his wheels / treads at a given speed.  The wheels will continue to move at that speed until commanded to drive at a new speed.
            To unlock the wheel track set all speeds to zero (0).
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="leftWheelSpeed">Speed of the left tread (in millimeters per second)</param>
            <param name="rightWheelSpeed">Speed of the right tread (in millimeters per second)</param>
            <param name="leftWheelAccel">Acceleration of left tread (in millimeters per second squared)</param>
            <param name="rightWheelAccel">Acceleration of right tread (in millimeters per second squared)</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.SetHeadMotor(System.Single)">
            <summary>
            Tell Vector’s head motor to move with a certain speed.  Positive speed for up, negative speed for down.
            To unlock the head track call with speed of zero (0).
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="speed">Motor speed for Vector’s head, measured in radians per second.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.SetLiftMotor(System.Single)">
            <summary>
            Tell Vector’s lift motor to move with a certain speed.  Positive speed for up, negative speed for down. 
            To unlock the lift track call with speed of zero (0).
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="speed">Motor speed for Vector’s lift, measured in radians per second.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.StopAllMotors">
            <summary>
            Tell Vector to stop all motors.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.Drive(Anki.Vector.DriveDirection,Anki.Vector.TurnDirection,Anki.Vector.MotorSpeed)">
            <summary>
            Drives Vector based on direction and speed
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="driveDirection">The drive direction.</param>
            <param name="turnDirection">The turn direction.</param>
            <param name="speed">The speed.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.MoveHead(Anki.Vector.MoveDirection,Anki.Vector.MotorSpeed)">
            <summary>
            Moves the head based on direction and speed
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="moveDirection">The move direction.</param>
            <param name="speed">The speed.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.MoveLift(Anki.Vector.MoveDirection,Anki.Vector.MotorSpeed)">
            <summary>
            Moves the lift based on direction and speed
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="moveDirection">The move direction.</param>
            <param name="speed">The speed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.PickSpeed(Anki.Vector.MotorSpeed,System.Single,System.Single,System.Single)">
            <summary>
            Picks the speed.
            </summary>
            <remarks>Requires behavior control; see <see cref="M:Anki.Vector.ControlComponent.RequestControl(System.Int32)"/>.</remarks>
            <param name="speed">The speed.</param>
            <param name="slow">The slow.</param>
            <param name="medium">The medium.</param>
            <param name="fast">The fast.</param>
            <returns>The selected speed value</returns>
        </member>
        <member name="M:Anki.Vector.MotorComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.NavMapComponent">
            <summary>
            Represents Vector's navigation memory map.
            <para>The NavMapComponent object subscribes for nav memory map updates from the robot to store and dispatch.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Component" />
        </member>
        <member name="F:Anki.Vector.NavMapComponent.navMapFeed">
            <summary>
            The camera event loop
            </summary>
        </member>
        <member name="P:Anki.Vector.NavMapComponent.Frequency">
            <summary>
            Gets the map frequency.
            </summary>
        </member>
        <member name="P:Anki.Vector.NavMapComponent.LatestNavMap">
            <summary>
            Gets the latest nav map.
            </summary>
        </member>
        <member name="E:Anki.Vector.NavMapComponent.NavMapUpdate">
            <summary>
            Occurs when nav map updated
            </summary>
        </member>
        <member name="M:Anki.Vector.NavMapComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.NavMapComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="P:Anki.Vector.NavMapComponent.IsFeedActive">
            <summary>
            Gets a value indicating whether the nav map feed is active.
            </summary>
        </member>
        <member name="M:Anki.Vector.NavMapComponent.StartFeed(System.Single)">
            <summary>
            Starts the nav map feed.  The feed will run in a background thread and raise the <see cref="P:Anki.Vector.NavMapComponent.LatestNavMap" /> event for each map change.  It will
            also update the <see cref="P:Anki.Vector.NavMapComponent.LatestNavMap" /> property.
            </summary>
            <param name="frequency">The navmap polling frequency.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.NavMapComponent.StopFeed">
            <summary>
            Stops the nav map feed.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.NavMapComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.Objects.Charger">
            <summary>
            Vector’s charger object, which the robot can observe and drive toward. We get an <see cref="E:Anki.Vector.WorldComponent.ObjectObserved"/> message when 
            the robot sees the charger.
            </summary>
            <seealso cref="T:Anki.Vector.Objects.ObservableObject" />
        </member>
        <member name="M:Anki.Vector.Objects.Charger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Objects.Charger" /> class.
            </summary>
            <param name="objectId">The object identifier.</param>
        </member>
        <member name="P:Anki.Vector.Objects.Charger.ObjectTypeName">
            <summary>
            Gets the name of the object type.
            </summary>
        </member>
        <member name="T:Anki.Vector.Objects.CustomBoxArchetype">
            <summary>
            Custom object cuboid definition.
            </summary>
            <seealso cref="T:Anki.Vector.Objects.CustomObjectArchetype" />
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.MarkerFront">
            <summary>
            Gets or sets the marker affixed to the front of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.MarkerBack">
            <summary>
            Gets or sets the marker affixed to the back of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.MarkerTop">
            <summary>
            Gets or sets the marker affixed to the top of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.MarkerBottom">
            <summary>
            Gets or sets the marker affixed to the bottom of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.MarkerLeft">
            <summary>
            Gets or sets the marker affixed to the left of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.MarkerRight">
            <summary>
            Gets or sets the marker affixed to the right of the object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.DepthMm">
            <summary>
            Gets or sets the depth of the object (in millimeters) (X axis).
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.WidthMm">
            <summary>
            Gets or sets the width of the object (in millimeters) (Y axis).
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomBoxArchetype.HeightMm">
            <summary>
            Gets or sets the height of the object (in millimeters) (Z axis).
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomBoxArchetype.Validate">
            <summary>
            Validates the custom object definition; raising an exception if invalid.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomBoxArchetype.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Anki.Vector.Objects.CustomBoxArchetype.ToRobotCustomBoxDefinition">
            <summary>
            Converts to robot CustomBoxDefinition instance.
            </summary>
            <returns>Robot custom box definition.</returns>
        </member>
        <member name="T:Anki.Vector.Objects.CustomCubeArchetype">
            <summary>
            Custom object cube definition
            </summary>
            <seealso cref="T:Anki.Vector.Objects.CustomObjectArchetype" />
        </member>
        <member name="P:Anki.Vector.Objects.CustomCubeArchetype.Marker">
            <summary>
            Gets or sets the marker affixed to every side of the cube.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomCubeArchetype.SizeMm">
            <summary>
            Gets or sets the size of each side of the cube (in millimeters).
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomCubeArchetype.Validate">
            <summary>
            Validates the custom object definition; raising an exception if invalid.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomCubeArchetype.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Anki.Vector.Objects.CustomCubeArchetype.ToRobotCustomCubeDefinition">
            <summary>
            Converts to robot CustomCubeDefinition instance.
            </summary>
            <returns>Robot custom cube definition.</returns>
        </member>
        <member name="T:Anki.Vector.Objects.CustomObject">
            <summary>
            An object defined by the SDK observed by the robot.  The object will reference a <see cref="T:Anki.Vector.Objects.CustomObjectArchetype"/>, with additional instance data.
            </summary>
            <seealso cref="T:Anki.Vector.Objects.ObservableObject" />
        </member>
        <member name="P:Anki.Vector.Objects.CustomObject.Archetype">
            <summary>
            Gets the archetype defining this custom object's properties.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomObject.#ctor(System.Int32,Anki.Vector.Objects.CustomObjectArchetype)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Objects.CustomObject" /> class.
            </summary>
            <param name="objectId">The object identifier.</param>
            <param name="archetype">The archetype defining this custom object's properties.</param>
        </member>
        <member name="P:Anki.Vector.Objects.CustomObject.ObjectTypeName">
            <summary>
            Gets the name of the object type.
            </summary>
        </member>
        <member name="T:Anki.Vector.Objects.CustomObjectArchetype">
            <summary>
            Abstract base class for all custom object definition types
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomObjectArchetype.CustomObjectType">
            <summary>
            Gets the type of the custom object.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomObjectArchetype.MarkerWidthMm">
            <summary>
            Gets or sets the width of the printed marker (in millimeters).
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomObjectArchetype.MarkerHeightMm">
            <summary>
            Gets or sets the height of the printed marker (in millimeters).
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomObjectArchetype.Bind(Anki.Vector.Types.CustomObjectType)">
            <summary>
            Binds this definition to the specified custom object type.
            </summary>
            <param name="customObjectType">Type of the custom object.</param>
        </member>
        <member name="M:Anki.Vector.Objects.CustomObjectArchetype.Unbind">
            <summary>
            Detaches this instance.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomObjectArchetype.Validate">
            <summary>
            Validates the custom object definition; raising an exception if invalid.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomObjectArchetype.SetProperty``1(``0@,``0)">
            <summary>
            Sets the custom object property; preventing changes to attached object definitions.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">Cannot change the definition of defined custom objects.</exception>
        </member>
        <member name="T:Anki.Vector.Objects.CustomWallArchetype">
            <summary>
            Custom object wall definition
            </summary>
            <seealso cref="T:Anki.Vector.Objects.CustomObjectArchetype" />
        </member>
        <member name="P:Anki.Vector.Objects.CustomWallArchetype.Marker">
            <summary>
            Gets or sets the marker affixed to every side of the cube.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomWallArchetype.WidthMm">
            <summary>
            Gets or sets the width of the object (in millimeters) (Y axis).
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.CustomWallArchetype.HeightMm">
            <summary>
            Gets or sets the height of the object (in millimeters) (Z axis).
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomWallArchetype.Validate">
            <summary>
            Validates the custom object definition; raising an exception if invalid.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.CustomWallArchetype.ToRobotCustomWallDefinition">
            <summary>
            Converts to robot CustomWallDefinition instance.
            </summary>
            <returns>Robot custom wall definition instance.</returns>
        </member>
        <member name="M:Anki.Vector.Objects.CustomWallArchetype.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Objects.Extensions">
            <summary>
            Object extension methods
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.Extensions.ToSdkObjectType(Anki.Vector.ExternalInterface.ObjectType)">
            <summary>
            Converts the enumeration.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The library type</returns>
        </member>
        <member name="M:Anki.Vector.Objects.Extensions.ToSdkCustomObjectType(Anki.Vector.ExternalInterface.ObjectType)">
            <summary>
            Gets the type of the custom object from the objectType parameter
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>SDK Custom object type value</returns>
        </member>
        <member name="T:Anki.Vector.Objects.Face">
            <summary>
            A single face that Vector has detected.
            <para>May represent a face that has previously been enrolled, in which case name will hold the name that it was enrolled with.</para>
            <para>Each Face instance has a <see cref="P:Anki.Vector.Objects.Face.FaceId"/> integer - This may change if Vector later gets an improved view and makes a different 
            prediction about which face he is looking at.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Objects.ObservableObject" />
        </member>
        <member name="P:Anki.Vector.Objects.Face.Expression">
            <summary>
            Gets the facial expression Vector has recognized on the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.ExpressionValues">
            <summary>
            Gets individual expression values histogram, sums to 100
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.FaceId">
            <summary>
            Gets the internal ID assigned to the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.LeftEye">
            <summary>
            Gets points representing the outline of the left eye.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.Mouth">
            <summary>
            Gets points representing the outline of the mouth
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.Name">
            <summary>
            Gets the name Vector has associated with the face.  Empty if face is not recognized or enrolled
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.Nose">
            <summary>
            Gets points representing the outline of the nose.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.Face.RightEye">
            <summary>
            Gets points representing the outline of the right eye.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.Face.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Objects.Face" /> class.
            </summary>
            <param name="faceId">The face identifier.</param>
        </member>
        <member name="M:Anki.Vector.Objects.Face.OnFaceObserved(Anki.Vector.Events.RobotObservedFaceEventArgs)">
            <summary>
            Called when the face is observed
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Objects.Face.OnChangeObservedFaceId(Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs)">
            <summary>
            Call when the <see cref="E:ChangeObservedFaceId" /> event.
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Anki.Vector.Objects.Face.ObjectTypeName">
            <summary>
            Gets the name of the object type.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.Face.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Objects.FacialExpression">
            <summary>
            Facial expressions
            </summary>
        </member>
        <member name="F:Anki.Vector.Objects.FacialExpression.Unknown">
            <summary>Unknown expression</summary>
        </member>
        <member name="F:Anki.Vector.Objects.FacialExpression.Neutral">
            <summary>Neutral expression</summary>
        </member>
        <member name="F:Anki.Vector.Objects.FacialExpression.Happiness">
            <summary>Happy expression</summary>
        </member>
        <member name="F:Anki.Vector.Objects.FacialExpression.Surprise">
            <summary>Surprise expression</summary>
        </member>
        <member name="F:Anki.Vector.Objects.FacialExpression.Anger">
            <summary>Angry expression</summary>
        </member>
        <member name="F:Anki.Vector.Objects.FacialExpression.Sadness">
            <summary>Sad expression</summary>
        </member>
        <member name="T:Anki.Vector.Objects.LightCube">
            <summary>
            Represents Vector’s Cube.
            <para>The LightCube object has four LEDs that Vector can actively manipulate and communicate with.</para>
            <para>As Vector drives around, he uses the position of objects that he recognizes, including his cube, to localize himself, 
            taking note of the <see cref="T:Anki.Vector.Types.Pose"/> of the objects.</para>
            <para>You can subscribe to cube events including <see cref="E:Anki.Vector.WorldComponent.ObjectTapped"/>, <see cref="E:Anki.Vector.WorldComponent.ObjectAppeared"/>, 
            and <see cref="E:Anki.Vector.WorldComponent.ObjectDisappeared"/>.</para>
            <para>Vector supports 1 LightCube.</para>
            </summary>
            <seealso cref="T:Anki.Vector.Objects.ObservableObject" />
        </member>
        <member name="F:Anki.Vector.Objects.LightCube.robot">
            <summary>The robot instance</summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.FactoryId">
            <summary>
            Gets the unique hardware id of the physical cube.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.IsConnected">
            <summary>
            Gets a value indicating whether the cube is currently connected to the robot.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.IsMoving">
            <summary>
            Gets a value indicating whether the cube’s accelerometer indicates that the cube is moving.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastMovedTime">
            <summary>
            Gets the time the object was last moved.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastMovedTimestamp">
            <summary>
            Gets the last moved robot timestamp.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastMovedStartTime">
            <summary>
            Gets the time the object most recently started moving 
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastMovedStartTimestamp">
            <summary>
            Gets the time the object most recently started moving in robot time.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.UpAxis">
            <summary>
            Gets the object’s up_axis value from the last time it changed.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastUpAxisTime">
            <summary>
            Gets the time the object’s orientation last changed
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastUpAxisTimestamp">
            <summary>
            Gets the robot timestamp when the object’s orientation last changed
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastTappedTime">
            <summary>
            Gets the time the object was last tapped 
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.LastTappedTimestamp">
            <summary>
            Gets the robot timestamp when the object was last tapped
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.TopFaceOrientationRad">
            <summary>
            Gets the angular distance from the current reported up axis.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.#ctor(System.Int32,Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Objects.LightCube" /> class.
            </summary>
            <param name="objectId">The object identifier.</param>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.SetLightCorners(Anki.Vector.Types.Light)">
            <summary>
            Set the light for all corners.
            </summary>
            <param name="light">The settings for all the lights.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the function.</returns>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.SetLightCorners(Anki.Vector.Types.Light,Anki.Vector.Types.Light,Anki.Vector.Types.Light,Anki.Vector.Types.Light)">
            <summary>
            Set the light for each corner.
            </summary>
            <param name="light1">The settings for the first light.</param>
            <param name="light2">The settings for the second light.</param>
            <param name="light3">The settings for the third light.</param>
            <param name="light4">The settings for the fourth light.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the function.</returns>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.SetLightCorners(Anki.Vector.Types.Light,Anki.Vector.Types.Light,Anki.Vector.Types.Light,Anki.Vector.Types.Light,Anki.Vector.Types.ColorProfile,System.Boolean)">
            <summary>
            Set the light for each corner.
            </summary>
            <param name="light1">The settings for the first light.</param>
            <param name="light2">The settings for the second light.</param>
            <param name="light3">The settings for the third light.</param>
            <param name="light4">The settings for the fourth light.</param>
            <param name="colorProfile">The color profile for the cube lights.</param>
            <param name="rotate">if set to <c>true</c> rotate the colors.</param>
            <returns>
            A task that represents the asynchronous operation; the task result contains the result from the function.
            </returns>
            <exception cref="T:System.ArgumentNullException">light1 or light2 or light3 or light4</exception>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.SetLightsOff">
            <summary>
            Set all lights off on the cube
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the function.</returns>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.OnObjectObserved(Anki.Vector.Events.RobotObservedObjectEventArgs)">
            <summary>
            Process the <see cref="E:ObjectObserved" /> event.
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.OnObjectConnectionState(Anki.Vector.Events.RobotObjectConnectionStateEventArgs)">
            <summary>
            Process the <see cref="E:ObjectConnectionState" /> event.
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectConnectionStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.OnObjectMoved(Anki.Vector.Events.RobotObjectMovedEventArgs)">
            <summary>
            Process the <see cref="E:ObjectMoved" /> event.
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectMovedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.OnObjectStoppedMoving">
            <summary>
            Process the <see cref="E:ObjectStoppedMoving" /> event.
            </summary>
            <returns>The move duration</returns>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.OnObjectUpAxisChanged(Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs)">
            <summary>
            Processes the <see cref="E:ObjectUpAxisChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Objects.LightCube.OnObjectTapped(Anki.Vector.Events.RobotObjectTappedEventArgs)">
            <summary>
            Processes the <see cref="E:ObjectTapped" /> event.
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectTappedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Anki.Vector.Objects.LightCube.ObjectTypeName">
            <summary>
            Gets the name of the object type.
            </summary>
        </member>
        <member name="T:Anki.Vector.Objects.ObjectType">
            <summary>
            The type of the object
            </summary>
        </member>
        <member name="F:Anki.Vector.Objects.ObjectType.InvalidObject">
            <summary>Invalid object</summary>
        </member>
        <member name="F:Anki.Vector.Objects.ObjectType.UnknownObject">
            <summary>Unknown object</summary>
        </member>
        <member name="F:Anki.Vector.Objects.ObjectType.BlockLightcube1">
            <summary>Light cube</summary>
        </member>
        <member name="F:Anki.Vector.Objects.ObjectType.CustomObject">
            <summary>Custom object</summary>
        </member>
        <member name="F:Anki.Vector.Objects.ObjectType.ChargerBasic">
            <summary>Charger</summary>
        </member>
        <member name="T:Anki.Vector.Objects.ObjectWithId">
            <summary>
            Object tracked with an ObjectId
            </summary>
            <seealso cref="T:Anki.Vector.Objects.ObservableObject" />
        </member>
        <member name="P:Anki.Vector.Objects.ObjectWithId.ObjectId">
            <summary>
            Gets the internal ID assigned to the object.  This value can only be assigned once as it is static on the robot.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.ObjectWithId.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Objects.ObjectWithId" /> class.
            </summary>
            <param name="objectId">The object identifier.</param>
        </member>
        <member name="M:Anki.Vector.Objects.ObjectWithId.OnObjectObserved(Anki.Vector.Events.RobotObservedObjectEventArgs)">
            <summary>
            Called when the object is observed
            </summary>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Objects.ObjectWithId.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Objects.ObservableObject">
            <summary>
            Represents any object Vector can see in the world.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.IsVisible">
            <summary>
            Gets a value indicating whether the element has been observed recently.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.LastImageRect">
            <summary>
            Gets the location in 2d camera space where this object was last seen.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.LastObservedTime">
            <summary>
            Gets the time this object was last seen 
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.LastObservedTimestamp">
            <summary>
            Gets the time this object was last seen according to Vector’s time.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.Pose">
            <summary>
            Gets the pose of this object in the world.
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.LastEventTime">
            <summary>
            Gets or sets the time of the last event
            </summary>
        </member>
        <member name="F:Anki.Vector.Objects.ObservableObject.cancellationTokenSource">
            <summary>
            Gets the cancellation token source for terminating the disappear event
            </summary>
        </member>
        <member name="P:Anki.Vector.Objects.ObservableObject.ObjectTypeName">
            <summary>
            Gets the name of the object type.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.ObservableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Objects.ObservableObject" /> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Objects.ObservableObject.DispatchDisappearEvent(System.Action{Anki.Vector.Objects.ObservableObject},System.Int32)">
            <summary>
            Dispatches the disappear event.  Cancels the previous iteration each time it is called.
            </summary>
            <param name="handler">The handler.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.Objects.UpAxis">
            <summary>
            The up access of the object
            </summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.InvalidAxis">
            <summary>Invalid axis</summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.XNegative">
            <summary>Negative X axis is up</summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.XPositive">
            <summary>Positive X axis is up</summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.YNegative">
            <summary>Negative Y axis is up</summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.YPositive">
            <summary>Positive X axis is up</summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.ZNegative">
            <summary>Negative Z axis up</summary>
        </member>
        <member name="F:Anki.Vector.Objects.UpAxis.ZPositive">
            <summary>Positive Z axis up</summary>
        </member>
        <member name="T:Anki.Vector.PhotoComponent">
            <summary>
            Access the photos on Vector.
            </summary>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.PhotoComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.GetPhotoInfo">
            <summary>
            Request the photo information from the robot.
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.GetPhoto(System.UInt32)">
            <summary>
            Download a full-resolution photo from the robot's storage.
            </summary>
            <param name="photoId">The photo identifier.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorRequestException">Unable to retrieve photo from Vector</exception>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.GetPhoto(Anki.Vector.Types.PhotoInfo)">
            <summary>
            Download a full-resolution photo from the robot's storage.
            </summary>
            <param name="photoInfo">The photo information.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.GetThumbnail(System.UInt32)">
            <summary>
            Download a thumbnail of a given photo from the robot's storage.
            <para>You may use this function to pull all of the images off the robot in a smaller format, and then determine which one to download as full resolution.</para>
            </summary>
            <param name="photoId">The photo identifier.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorRequestException">Unable to retrieve photo from Vector</exception>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.GetThumbnail(Anki.Vector.Types.PhotoInfo)">
            <summary>
            Download a thumbnail of a given photo from the robot's storage.
            <para>You may use this function to pull all of the images off the robot in a smaller format, and then determine which one to download as full resolution.</para>
            </summary>
            <param name="photoInfo">The photo information.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorRequestException">Unable to retrieve photo from Vector</exception>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.DeletePhoto(System.UInt32)">
            <summary>
            Deletes the photo from the robot.
            </summary>
            <param name="photoId">The photo identifier.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.DeletePhoto(Anki.Vector.Types.PhotoInfo)">
            <summary>
            Deletes the photo from the robot.
            </summary>
            <param name="photoInfo">The photo information.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.PhotoComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.ProximitySensorData">
            <summary>
            A distance sample from the time-of-flight sensor with metadata describing reliability of the measurement
            <para>The proximity sensor is located near the bottom of Vector between the two front wheels, facing forward.The reported distance describes how far in front 
            of this sensor the robot feels an obstacle is. The sensor estimates based on time-of-flight information within a field of view which the engine resolves 
            to a certain quality value.</para>
            <para>Four additional flags are supplied by the engine to indicate whether this proximity data is considered valid for the robot’s internal 
            path finding.  Respecting these is optional, but will help your code respect the behavior of the robot’s innate object avoidance.</para>
            </summary>
        </member>
        <member name="P:Anki.Vector.ProximitySensorData.DistanceMm">
            <summary>
            Gets the distance between the sensor and a detected object
            </summary>
        </member>
        <member name="P:Anki.Vector.ProximitySensorData.IsLiftInFov">
            <summary>
            Gets a value indicating whether Vector’s lift is blocking the time-of-flight sensor. While the lift will send clear proximity signals, it’s not useful for object detection.
            </summary>
        </member>
        <member name="P:Anki.Vector.ProximitySensorData.FoundObject">
            <summary>
            Gets a value indicating whether the sensor detected an object in the valid operating range.
            </summary>
        </member>
        <member name="P:Anki.Vector.ProximitySensorData.Unobstructed">
            <summary>
            Gets a value indicating whether the sensor has confirmed it has not detected anything up to its max range.
            </summary>
        </member>
        <member name="P:Anki.Vector.ProximitySensorData.SignalQuality">
            <summary>
            Gets the quality of the detected object.  The proximity sensor detects obstacles within a given field of view, this value represents the likelihood of the reported 
            distance being a solid surface.
            </summary>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.#ctor(Anki.Vector.ExternalInterface.ProxData)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.ProximitySensorData"/> struct.
            </summary>
            <param name="proxData">The proximity data.</param>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.Equals(Anki.Vector.ProximitySensorData)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.op_Equality(Anki.Vector.ProximitySensorData,Anki.Vector.ProximitySensorData)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.op_Inequality(Anki.Vector.ProximitySensorData,Anki.Vector.ProximitySensorData)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.ProximitySensorData.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.ReserveBehaviorControl">
            <summary>
            A ReserveBehaviorControl object can be used to suppress the ordinary idle behaviors of the Robot and keep Vector still between SDK control instances.
            <para>Care must be taken when blocking background behaviors, as this may make Vector appear non-responsive.</para><para>As long as this object is not disposed, background behaviors will not activate, keeping Vector still while other SDK scripts may take control.  Highest-level behaviors like returning to
            the charger due to low battery will still activate.</para><para>If there is a need to keep background behaviors from activating in a single script, the class may be used to reserve behavior control while in scope.</para></summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Anki.Vector.ReserveBehaviorControl.robot">
            <summary>
            The robot
            </summary>
        </member>
        <member name="F:Anki.Vector.ReserveBehaviorControl.robotConfiguration">
            <summary>
            The robot configuration
            </summary>
        </member>
        <member name="M:Anki.Vector.ReserveBehaviorControl.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.ReserveBehaviorControl"/> class.
            </summary>
            <param name="reserveControl">if set to <c>true</c> to reserve control on construction.</param>
            <exception cref="T:Anki.Vector.Exceptions.VectorConfigurationException">No Robot Configuration found; please run the configuration tool to setup the robot connection.</exception>
        </member>
        <member name="M:Anki.Vector.ReserveBehaviorControl.#ctor(Anki.Vector.RobotConfiguration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.ReserveBehaviorControl" /> class.
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="reserveControl">if set to <c>true</c> to reserve control on construction.</param>
            <exception cref="T:Anki.Vector.Exceptions.VectorControlException">Unable to reserve behavior control</exception>
        </member>
        <member name="M:Anki.Vector.ReserveBehaviorControl.ReserveControl">
            <summary>
            Reserves control of Vector
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorControlException">Unable to reserve behavior control</exception>
        </member>
        <member name="M:Anki.Vector.ReserveBehaviorControl.ReleaseControl">
            <summary>
            Releases control of Vector
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="F:Anki.Vector.ReserveBehaviorControl.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Anki.Vector.ReserveBehaviorControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Anki.Vector.ReserveBehaviorControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Anki.Vector.ControlPriority">
            <summary>
            Vector control priority level
            </summary>
        </member>
        <member name="F:Anki.Vector.ControlPriority.OverrideBehaviors">
            <summary>
            Highest priority level. Suppresses most automatic physical reactions, use with caution. 
            </summary>
        </member>
        <member name="F:Anki.Vector.ControlPriority.Default">
            <summary>
            Normal priority level. Directly under mandatory physical reactions.
            </summary>
        </member>
        <member name="F:Anki.Vector.ControlPriority.ReserveControl">
            <summary>
            Enable long-running SDK control between script execution.  Not to be used for regular behavior control.
            </summary>
        </member>
        <member name="T:Anki.Vector.Robot">
            <summary>
            The main robot class for managing Vector.
            <para>The Robot object is responsible for managing the state and connections to a Vector, and is typically the entry-point to running the SDK.</para>
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="E:Anki.Vector.Robot.Error">
            <summary>
            Occurs when there is a background exception.
            </summary>
        </member>
        <member name="E:Anki.Vector.Robot.Connected">
            <summary>
            Occurs when the robot is fully connected.
            </summary>
        </member>
        <member name="E:Anki.Vector.Robot.Disconnected">
            <summary>
            Occurs when robot is disconnected.
            </summary>
        </member>
        <member name="E:Anki.Vector.Robot.Delocalized">
            <summary>
            Occurs when robot is delocalized  (i.e. whenever Vector no longer knows where he is - e.g.when he's picked up).
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Control">
            <summary>
            Gets the control component
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Camera">
            <summary>
            Gets the camera component
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Behavior">
            <summary>
            Gets the behavior component
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Motors">
            <summary>
            Gets the motors component
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Photos">
            <summary>
            Gets the photo component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Events">
            <summary>
            Gets the events component 
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Animation">
            <summary>
            Gets the animation component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Faces">
            <summary>
            Gets the face component
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Audio">
            <summary>
            Gets the audio component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Screen">
            <summary>
            Gets the screen component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Vision">
            <summary>
            Gets the vision component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.World">
            <summary>
            Gets the world component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.NavMap">
            <summary>
            Gets the navmap component.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.IsConnected">
            <summary>
            Gets a value indicating whether the robot is connected.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Acceleration">
            <summary>
            Gets the current accelerometer reading
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.CarryingObjectId">
            <summary>
            Gets the ID of the object currently being carried (-1 if none)
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Gyro">
            <summary>
            Gets the current gyroscope reading (x, y, z) 
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.HeadAngleRad">
            <summary>
            Gets Vector's head angle (up/down) in radians
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.HeadTrackingObjectId">
            <summary>
            Gets the ID of the object the head is tracking to (-1 if none)
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.LastImageTimestamp">
            <summary>
            Gets the robot's timestamp for the last image seen.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.LeftWheelSpeedMmps">
            <summary>
            Gets Vector’s left wheel speed in mm/sec
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.LiftHeightMm">
            <summary>
            Gets the height of Vector’s lift from the ground.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.LocalizedToObjectId">
            <summary>
            Gets the ID of the object that the robot is localized to (-1 if none)
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Pose">
            <summary>
            Gets the current pose (position and orientation) of Vector.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.PoseAngleRad">
            <summary>
            Gets Vector's pose angle (heading in X-Y plane) in radians
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.PosePitchRad">
            <summary>
            Gets Vector’s pose pitch (angle up/down) in radians
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Proximity">
            <summary>
            Gets the proximity sensor data.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.RightWheelSpeedMmps">
            <summary>
            Gets Vector's right wheel speed in mm/sec
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Status">
            <summary>
            Gets the various status properties of the robot.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.Touch">
            <summary>
            Gets state related to touch detection.
            </summary>
        </member>
        <member name="P:Anki.Vector.Robot.IPAddress">
            <summary>
            Gets the current IP address of the robot.  Can be null if remote Vector connection is used.
            </summary>
        </member>
        <member name="F:Anki.Vector.Robot.DefaultConnectionTimeout">
            <summary>
            The timeout for calls and connections in milliseconds
            </summary>
        </member>
        <member name="F:Anki.Vector.Robot.client">
            <summary>
            The GRPC and REST client
            </summary>
        </member>
        <member name="F:Anki.Vector.Robot.disconnecting">
            <summary>
            Has the disconnect method been called
            </summary>
        </member>
        <member name="M:Anki.Vector.Robot.PropagateException(System.Exception)">
            <summary>
            Propagates the exception by raising the error event.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Anki.Vector.Robot.NewConnection(Anki.Vector.IRobotConfiguration,System.Int32)">
            <summary>
            Connects to Vector and returns a robot instance.
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="timeout">The connection timeout in milliseconds.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the connected robot instance</returns>
        </member>
        <member name="M:Anki.Vector.Robot.NewConnection(System.Int32)">
            <summary>
            Connects to Vector using the first robot found in the configuration file and returns a robot instance.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the connected robot instance.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorConfigurationException">No Robot Configuration found; please run the configuration tool to setup the robot connection.</exception>
        </member>
        <member name="M:Anki.Vector.Robot.NewConnection(System.String,System.Int32)">
            <summary>
            Connects to Vector using the robot configuration that matches the name or serial number provided and returns a robot instance.
            </summary>
            <param name="nameOrSerialNumber">The name or serial number.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the connected robot instance.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorConfigurationException">No Robot Configuration with the name or serial number matching '{nameOrSerialNumber}' found.</exception>
        </member>
        <member name="M:Anki.Vector.Robot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Robot"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Robot.Events_RobotState(System.Object,Anki.Vector.Events.RobotStateEventArgs)">
            <summary>
            Handles the RobotState event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.Robot.Connect(Anki.Vector.IRobotConfiguration,System.Int32,System.Boolean)">
            <summary>
            Connect to Vector on the local network.  This will attempt to connect using the configured IP address (if provided) otherwise it will
            trigger an mDNS query to find Vector's IP address.  For connections to Vector over the Internet, use the <see cref="M:Anki.Vector.Robot.RemoteConnect(Anki.Vector.IRemoteRobotConfiguration,System.Int32)"/> method instead.
            </summary>
            <param name="robotConfiguration">The robot configuration.</param>
            <param name="timeout">Timeout in milliseconds</param>
            <param name="useZeroConfig">if set to <c>true</c> use zero configuration (mDNS).</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">robotConfiguration</exception>
            <exception cref="T:Anki.Vector.Exceptions.VectorNotFoundException">Unable to establish a connection to Vector.</exception>
            <exception cref="T:Anki.Vector.Exceptions.VectorInvalidVersionException">Your SDK version is not compatible with Vector’s version.</exception>
        </member>
        <member name="M:Anki.Vector.Robot.RemoteConnect(Anki.Vector.IRemoteRobotConfiguration,System.Int32)">
            <summary>
            Connects to the robot using the remote connection information.  This is used for connecting to Vector when he's not on the LAN.  This requires port forwarding on your 
            router to setup an external connection to Vector.  For connecting to Vector on the same network as this application, use the <see cref="M:Anki.Vector.Robot.Connect(Anki.Vector.IRobotConfiguration,System.Int32,System.Boolean)"/> method instead.
            </summary>
            <param name="robotConfiguration">The remote robot configuration.</param>
            <param name="timeout">The timeout.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">robotConfiguration</exception>
            <exception cref="T:Anki.Vector.Exceptions.VectorConfigurationException">Remote host not specified for remote connection.</exception>
        </member>
        <member name="M:Anki.Vector.Robot.StartConnection(Anki.Vector.Client)">
            <summary>
            Starts the connection by saving the client and initiating the event loop.  After this method return the robot is fully connected.
            </summary>
            <param name="client">The client.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.ReadBatteryState">
            <summary>
            Reads the state of the battery from the robot.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the battery state.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.ReadVersionState">
            <summary>
            Reads the the versioning information for Vector, including Vector’s OS version and engine build id.
            </summary>
            <returns>A task that represents the asynchronous operation; The task result contains robot version information.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.GetFeatureFlagList">
            <summary>
            Request the list of the current feature flags.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the robot setting.</returns>
            <remarks>To see which flags are enabled, use the Get Feature Flag command.</remarks>
        </member>
        <member name="M:Anki.Vector.Robot.GetFeatureFlag(System.String)">
            <summary>
            Request the current setting of a feature flag.
            </summary>
            <param name="name">The name of the feature to retrieve information about</param>
            <returns>A task that represents the asynchronous operation; the task result contains the robot setting.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.ReadRobotSettings">
            <summary>
            Gets the settings from the robot.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the robot setting.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.UpdateRobotSettings(Anki.Vector.Types.RobotSettings)">
            <summary>
            Updates the robot settings.
            </summary>
            <param name="settings">The settings to update.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the updated settings.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.ReadRobotLifetimeStats">
            <summary>
            Gets the robot lifetime stats.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the robot lifetime stats.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.GetLatestAttentionTransfer">
            <summary>
            Requests information about the most recent attention transfer
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the latest attention transfer.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.Disconnect">
            <summary>
            Disconnects from the Robot
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.Disconnect(System.Boolean)">
            <summary>
            Disconnects from the Robot.
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to disconnect from Vector.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.RunControlMethod``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,Grpc.Core.AsyncUnaryCall{``0}},System.String)">
            <summary>
            Runs the client behavior method.  If control was lost, this method will attempt to gain control.  If control was not requested
            this method will throw an exception.
            </summary>
            <typeparam name="T">The result type of the command</typeparam>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.RunControlMethod``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Runs the client behavior method.  If control was lost, this method will attempt to gain control.  If control was not requested
            this method will throw an exception.
            </summary>
            <typeparam name="T">The result type of the command</typeparam>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
            <exception cref="T:Anki.Vector.Exceptions.VectorNotConnectedException">Vector is not connected.</exception>
            <exception cref="T:Anki.Vector.Exceptions.VectorControlException">Unable to acquire control of Vector.</exception>
        </member>
        <member name="M:Anki.Vector.Robot.RunMethod``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,Grpc.Core.AsyncUnaryCall{``0}})">
            <summary>
            Runs the client method.
            </summary>
            <typeparam name="T">The result type of the command</typeparam>
            <param name="command">The command.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.RunMethod``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the client method.
            </summary>
            <typeparam name="T">The result type of the command</typeparam>
            <param name="command">The command.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result of the command.</returns>
        </member>
        <member name="M:Anki.Vector.Robot.StartStream``1(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,Grpc.Core.AsyncServerStreamingCall{``0}})">
            <summary>
            Starts a client stream.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="command">The command to run.</param>
            <returns>The async GRPC stream</returns>
        </member>
        <member name="M:Anki.Vector.Robot.StartStream``2(System.Func{Anki.Vector.ExternalInterface.ExternalInterface.ExternalInterfaceClient,Grpc.Core.AsyncDuplexStreamingCall{``0,``1}})">
            <summary>
            Starts a duplex client stream.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="command">The command to run.</param>
            <returns>The duplex async GRPC stream</returns>
        </member>
        <member name="F:Anki.Vector.Robot.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Anki.Vector.Robot.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Anki.Vector.Robot.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Anki.Vector.RobotConfiguration">
            <summary>
            The robot configuration information
            </summary>
            <seealso cref="T:Anki.Vector.IRobotConfiguration" />
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.RobotName">
            <summary>
            Gets or sets the name of the robot.  This is in the form "Vector-XXXX"
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.SerialNumber">
            <summary>Gets or sets the robot serial number.</summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.IPAddress">
            <summary>
            Gets or sets the IP address of the robot
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.RemoteHost">
            <summary>
            Gets or sets the remote vector host name and optional port.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.HasRemoteHost">
            <summary>
            Gets a value indicating whether this instance has remote host.
            </summary>
        </member>
        <member name="F:Anki.Vector.RobotConfiguration.GuidKey">
            <summary>The unique identifier INI field key</summary>
        </member>
        <member name="F:Anki.Vector.RobotConfiguration.IpKey">
            <summary>The ip INI field key</summary>
        </member>
        <member name="F:Anki.Vector.RobotConfiguration.NameKey">
            <summary>The robot name INI field key</summary>
        </member>
        <member name="F:Anki.Vector.RobotConfiguration.CertKey">
            <summary>The cert INI field key</summary>
        </member>
        <member name="F:Anki.Vector.RobotConfiguration.RemoteKey">
            <summary>The remote INI field key</summary>
        </member>
        <member name="P:Anki.Vector.RobotConfiguration.DefaultSdkConfigFilePath">
            <summary>
            Gets the default SDK configuration file path.
            </summary>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.Load">
            <summary>
            Loads the configuration file using the default SDK configuration file path.
            </summary>
            <returns>Robot configurations</returns>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.LoadDefault">
            <summary>
            Loads the first configuration entry from the default configuration file.
            </summary>
            <returns>Robot configuration</returns>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.Load(System.String)">
            <summary>
            Loads the configuration file using the specified SDK configuration file path.
            </summary>
            <param name="sdkConfigFilePath">The SDK configuration file path.</param>
            <returns>Robot configurations</returns>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.AddOrUpdate(Anki.Vector.RobotConfiguration)">
            <summary>
            Adds the specified robot configuration to the configuration file using the default SDK configuration file path.
            <para>The robot configuration is appended if new or updated if already exists</para>
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.AddOrUpdate(System.String,Anki.Vector.RobotConfiguration)">
            <summary>
            Adds the specified robot configuration to the configuration file using the specified SDK configuration file path.
            <para>The robot configuration is appended if new or updated if already exists</para>
            </summary>
            <param name="sdkConfigFilePath">The SDK configuration file path.</param>
            <param name="robot">The robot configuration.</param>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.Save(System.Collections.Generic.IEnumerable{Anki.Vector.RobotConfiguration})">
            <summary>
            Stores the specified robot configurations using the default SDK configuration file path.
            <para>Any robot configurations not in the list will be removed.</para>
            </summary>
            <param name="robots">The robot configurations.</param>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.Save(System.String,System.Collections.Generic.IEnumerable{Anki.Vector.RobotConfiguration})">
            <summary>
            Stores the specified robot configurations using the specified SDK configuration file path.
            <para>Any robot configurations not in the list will be removed.</para>
            </summary>
            <param name="sdkConfigFilePath">The SDK configuration file path.</param>
            <param name="robots">The robots configurations.</param>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.SaveFile(System.String,System.Collections.Generic.IEnumerable{Anki.Vector.RobotConfiguration},System.Boolean)">
            <summary>
            Saves the file.
            </summary>
            <param name="sdkConfigFilePath">The SDK configuration file path.</param>
            <param name="robots">The robots.</param>
            <param name="replaceAll">if set to <c>true</c> replace all entries with specified robots.</param>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.ReadConfig(System.String,IniParser.Model.KeyDataCollection)">
            <summary>
            Creates the configuration.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <param name="data">The data.</param>
            <returns>A filled robot configuration instance</returns>
        </member>
        <member name="M:Anki.Vector.RobotConfiguration.WriteConfig(Anki.Vector.RobotConfiguration,System.String,IniParser.Model.KeyDataCollection)">
            <summary>
            Updates the configuration file data
            </summary>
            <param name="robot">The robot configuration.</param>
            <param name="ankiVectorPath">The anki_vector folder path.</param>
            <param name="data">The configuration file data.</param>
        </member>
        <member name="T:Anki.Vector.RobotObject">
            <summary>
            Abstract base class for all robot owned objects.
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="E:Anki.Vector.RobotObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Anki.Vector.RobotObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the property value and raises the changed event.
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <param name="name">The name of the property.</param>
            <returns>True if property was changed</returns>
        </member>
        <member name="M:Anki.Vector.RobotObject.OnPropertyChanged(System.String)">
            <summary>
            Called when the property changed.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="T:Anki.Vector.RobotStatus">
            <summary>
            Robot Status class and exposed properties for Vector’s various states.
            </summary>
        </member>
        <member name="F:Anki.Vector.RobotStatus.status">
            <summary>
            The robot status value
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.AreMotorsMoving">
            <summary>
            True if Vector is currently moving any of his motors (head, arm or wheels/treads).
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsCarryingBlock">
            <summary>
            True if Vector is currently carrying a block.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsDockingToMarker">
            <summary>
            True if Vector has seen a marker and is actively heading toward it (for example his charger or cube).
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsPickedUp">
            <summary>
            True if Vector is currently picked up (in the air).
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsButtonPressed">
            <summary>
            True if Vector’s button is pressed.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsFalling">
            <summary>
            True if Vector is currently falling.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsAnimating">
            <summary>
            True if Vector is currently playing an animation.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsPathing">
            <summary>
            True if Vector is currently traversing a path.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsLiftInPos">
            <summary>
            True if Vector’s arm is in the desired position (False if still trying to move it there).
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsHeadInPos">
            <summary>
            True if Vector’s head is in the desired position (False if still trying to move there).
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsInCalmPowerMode">
            <summary>
            True if Vector is in calm power mode. Calm power mode is generally when Vector is sleeping or charging.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsOnCharger">
            <summary>
            True if Vector is currently on the charger.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsCharging">
            <summary>
            True if Vector is currently charging.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsCliffDetected">
            <summary>
            True if Vector detected a cliff using any of his four cliff sensors.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.AreWheelsMoving">
            <summary>
            True if Vector’s wheels/treads are currently moving.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsBeingHeld">
            <summary>
            True if Vector is being held.
            </summary>
        </member>
        <member name="P:Anki.Vector.RobotStatus.IsRobotMoving">
            <summary>
            True if Vector is in motion. This includes any of his motors (head, arm, wheels/tracks) and if he is being lifted, carried, or falling.
            </summary>
        </member>
        <member name="M:Anki.Vector.RobotStatus.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.RobotStatus"/> struct.
            </summary>
            <param name="robotStatus">The robot status.</param>
        </member>
        <member name="M:Anki.Vector.RobotStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.RobotStatus.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.RobotStatus.Equals(Anki.Vector.RobotStatus)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.RobotStatus.op_Equality(Anki.Vector.RobotStatus,Anki.Vector.RobotStatus)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.RobotStatus.op_Inequality(Anki.Vector.RobotStatus,Anki.Vector.RobotStatus)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.RobotStatus.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.ScreenComponent">
            <summary>
            Manage the state of the faces on the robot.
            </summary>
        </member>
        <member name="F:Anki.Vector.ScreenComponent.ScreenWidth">
            <summary>
            The screen width in pixels
            </summary>
        </member>
        <member name="F:Anki.Vector.ScreenComponent.ScreenHeight">
            <summary>
            The screen height in pixels
            </summary>
        </member>
        <member name="F:Anki.Vector.ScreenComponent.TotalPixels">
            <summary>
            The total number of pixels in the display
            </summary>
        </member>
        <member name="M:Anki.Vector.ScreenComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.ScreenComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.ScreenComponent.DisplayImageRgb565(System.Byte[],System.UInt32,System.Boolean)">
            <summary>
            Display an image on Vector's Screen (his "face").
            </summary>
            <param name="imageData">A byte array representing all of the pixels (16bit color in rgb565 format)</param>
            <param name="durationMs">The number of milliseconds the image should remain on Vector's face.</param>
            <param name="interruptRunning">Set to true so any currently-streaming animation will be aborted in favor of this.</param>
            <returns>
            A task that represents the asynchronous operation.  The task result contains the result of the operation.
            </returns>
        </member>
        <member name="M:Anki.Vector.ScreenComponent.DisplayImageRgb24(System.Byte[],System.UInt32,System.Boolean)">
            <summary>
            Display an image on Vector's Screen (his "face").
            </summary>
            <param name="imageData">A byte array representing all of the pixels (24bit color in RGB format)</param>
            <param name="durationMs">The number of milliseconds the image should remain on Vector's face.</param>
            <param name="interruptRunning">Set to true so any currently-streaming animation will be aborted in favor of this.</param>
            <returns>
            A task that represents the asynchronous operation.  The task result contains the result of the operation.
            </returns>
        </member>
        <member name="M:Anki.Vector.ScreenComponent.DisplayImageRgba32(System.Byte[],System.UInt32,System.Boolean)">
            <summary>
            Display an image on Vector's Screen (his "face").
            </summary>
            <param name="imageData">A byte array representing all of the pixels (32bit color in RGBA format)</param>
            <param name="durationMs">The number of milliseconds the image should remain on Vector's face.</param>
            <param name="interruptRunning">Set to true so any currently-streaming animation will be aborted in favor of this.</param>
            <returns>
            A task that represents the asynchronous operation.  The task result contains the result of the operation.
            </returns>
        </member>
        <member name="M:Anki.Vector.ScreenComponent.DisplaySolidColor(Anki.Vector.Types.Color,System.UInt32,System.Boolean)">
            <summary>
            Set Vector's Screen (his "face"). to a solid color.
            </summary>
            <param name="color">Desired color to set Vector's Screen.</param>
            <param name="durationMs">The number of milliseconds the image should remain on Vector's face.</param>
            <param name="interruptRunning">Set to true so any currently-streaming animation will be aborted in favor of this.</param>
            <returns>
            A task that represents the asynchronous operation.  The task result contains the result of the operation.
            </returns>
        </member>
        <member name="M:Anki.Vector.ScreenComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>
            A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:Anki.Vector.StimulationInfo">
            <summary>
            Vector stimulation info
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.Acceleration">
            <summary>
            Gets the acceleration per second squared.
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.EmotionEvents">
            <summary>
            Gets the emotion events.
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.MaxValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.MinValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.Value">
            <summary>
            Gets the stimulation value.
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.ValueBeforeEvent">
            <summary>
            Gets the stimulation value before event.  Matches value if there were no events.
            </summary>
        </member>
        <member name="P:Anki.Vector.StimulationInfo.Velocity">
            <summary>
            Gets the velocity per second
            </summary>
        </member>
        <member name="M:Anki.Vector.StimulationInfo.#ctor(Anki.Vector.ExternalInterface.StimulationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.StimulationInfo"/> class.
            </summary>
            <param name="stimulationInfo">The stimulation information.</param>
        </member>
        <member name="M:Anki.Vector.StimulationInfo.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.TouchSensorData">
            <summary>
            A touch sample from the capacitive touch sensor, accompanied with the robot’s conclusion on whether this is considered a valid touch.
            </summary>
        </member>
        <member name="P:Anki.Vector.TouchSensorData.IsBeingTouched">
            <summary>
            Gets a value indicating whether the robot’s conclusion on whether the current value is considered a valid touch.
            </summary>
        </member>
        <member name="P:Anki.Vector.TouchSensorData.RawTouchValue">
            <summary>
            Gets the detected sensitivity from the touch sensor.
            <para>This will not map to a constant raw value, as it may be impacted by various environmental factors such as whether the robot is on its charger, 
            being held, humidity, etc.</para>
            </summary>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.#ctor(Anki.Vector.ExternalInterface.TouchData)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.TouchSensorData"/> struct.
            </summary>
            <param name="touchData">The touch data.</param>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.Equals(Anki.Vector.TouchSensorData)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.op_Equality(Anki.Vector.TouchSensorData,Anki.Vector.TouchSensorData)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.op_Inequality(Anki.Vector.TouchSensorData,Anki.Vector.TouchSensorData)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.TouchSensorData.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Acceleration">
            <summary>
            Represents acceleration values
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Acceleration.X">
            <summary>
            Gets the x acceleration in mm/s^2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Acceleration.Y">
            <summary>
            Gets the y acceleration in mm/s^2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Acceleration.Z">
            <summary>
            Gets the z acceleration in mm/s^2
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Acceleration"/> struct.
            </summary>
            <param name="x">The x acceleration in mm/s^2.</param>
            <param name="y">The y acceleration in mm/s^2.</param>
            <param name="z">The z acceleration in mm/s^2.</param>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.#ctor(Anki.Vector.ExternalInterface.AccelData)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Acceleration"/> struct.
            </summary>
            <param name="accelData">The acceleration data.</param>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.Equals(Anki.Vector.Types.Acceleration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.op_Equality(Anki.Vector.Types.Acceleration,Anki.Vector.Types.Acceleration)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.op_Inequality(Anki.Vector.Types.Acceleration,Anki.Vector.Types.Acceleration)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Acceleration.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.ActionResult">
            <summary>
            The result of the action method
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ActionResult.StatusCode">
            <summary>
            Gets the status code.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ActionResult.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ActionResult.IsSuccess">
            <summary>
            Gets a value indicating whether this instance indicates success.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.ActionResult.#ctor(Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode,Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.ActionResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="resultCode">The results.</param>
        </member>
        <member name="T:Anki.Vector.Types.ActionResultCode">
            <summary>
            The result of an action
            </summary>
        </member>
        <member name="T:Anki.Vector.Types.ActionResultCodeExtensions">
            <summary>
            Extension methods for working with action result codes
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.ActionResultCodeExtensions.Convert(Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode)">
            <summary>
            Converts the specified action result code.
            </summary>
            <param name="actionResultCode">The action result code.</param>
            <returns>The SDK result code</returns>
        </member>
        <member name="T:Anki.Vector.Types.Angle">
            <summary>
            Angle extensions
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Angle.Degrees(System.Single)">
            <summary>
            Convert degrees into radians
            </summary>
            <param name="degrees">The number of degrees.</param>
            <returns>Radians</returns>
        </member>
        <member name="M:Anki.Vector.Types.Angle.Degrees(System.Int32)">
            <summary>
            Convert degrees into radians
            </summary>
            <param name="degrees">The number of degrees.</param>
            <returns>Radians</returns>
        </member>
        <member name="T:Anki.Vector.Types.AngularVelocity">
            <summary>
            Represents the angular velocity 
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.AngularVelocity.X">
            <summary>
            Gets the x velocity in rad/s
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.AngularVelocity.Y">
            <summary>
            Gets the y velocity in rad/s
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.AngularVelocity.Z">
            <summary>
            Gets the z velocity in rad/s
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.AngularVelocity"/> struct.
            </summary>
            <param name="x">The x velocity in rad/s.</param>
            <param name="y">The y velocity in rad/s.</param>
            <param name="z">The z velocity in rad/s.</param>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.#ctor(Anki.Vector.ExternalInterface.GyroData)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.AngularVelocity"/> struct.
            </summary>
            <param name="gyroData">The gyro data.</param>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.Equals(Anki.Vector.Types.AngularVelocity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.op_Equality(Anki.Vector.Types.AngularVelocity,Anki.Vector.Types.AngularVelocity)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.op_Inequality(Anki.Vector.Types.AngularVelocity,Anki.Vector.Types.AngularVelocity)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.AngularVelocity.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Animation">
            <summary>
            Animation that can be played by the robot.
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.Animation.robotAnimation">
            <summary>
            The underlying robot animation
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Animation.#ctor(Anki.Vector.ExternalInterface.Animation)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Animation"/> class.
            </summary>
            <param name="robotAnimation">The robot animation.</param>
        </member>
        <member name="P:Anki.Vector.Types.Animation.Name">
            <summary>
            Gets the name of the animation
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Animation.FriendlyName">
            <summary>
            Gets the friendly name of the animation
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Animation.ToRobotAnimation">
            <summary>
            Converts to a robot animation.
            </summary>
            <returns>An SDK animation instance</returns>
        </member>
        <member name="T:Anki.Vector.Types.AnimationTrigger">
            <summary>
            Animation trigger that can be played by the robot.
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.AnimationTrigger.robotAnimationTrigger">
            <summary>
            The underlying robot animation trigger
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.AnimationTrigger.#ctor(Anki.Vector.ExternalInterface.AnimationTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.AnimationTrigger"/> class.
            </summary>
            <param name="robotAnimationTrigger">The robot animation trigger.</param>
        </member>
        <member name="P:Anki.Vector.Types.AnimationTrigger.Name">
            <summary>
            Gets the name of the animation trigger
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.AnimationTrigger.FriendlyName">
            <summary>
            Gets the friendly name of the animation trigger
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.AnimationTrigger.ToRobotAnimationTrigger">
            <summary>
            Converts to a robot animation trigger
            </summary>
            <returns>An SDK animation trigger instance</returns>
        </member>
        <member name="T:Anki.Vector.Types.AttentionTransferReason">
            <summary>
            The reason for the last attention transfer
            </summary>
        </member>
        <member name="T:Anki.Vector.Types.AttentionTransferReasonExtensions">
            <summary>
            Extension methods for attention transfer reason enum
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.AttentionTransferReasonExtensions.Convert(Anki.Vector.ExternalInterface.AttentionTransferReason)">
            <summary>
            Converts from Robot attention transfer reason to SDK attention transfer reason
            </summary>
            <param name="attentionTransferReason">The attention transfer reason.</param>
            <returns>Converted result</returns>
        </member>
        <member name="T:Anki.Vector.Types.BatteryLevel">
            <summary>
            Battery level
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.BatteryLevel.Unknown">
            <summary>The level is unknown</summary>
        </member>
        <member name="F:Anki.Vector.Types.BatteryLevel.Low">
            <summary>3.6V or less. If on charger, 4V or less.</summary>
        </member>
        <member name="F:Anki.Vector.Types.BatteryLevel.Nominal">
            <summary>Normal operating levels.</summary>
        </member>
        <member name="F:Anki.Vector.Types.BatteryLevel.Full">
            <summary>This state can only be achieved when Vector is on the charger</summary>
        </member>
        <member name="T:Anki.Vector.Types.BatteryState">
            <summary>
            The state of the robot battery.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BatteryState.BatteryLevel">
            <summary>
            Gets the battery level.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BatteryState.BatteryVolts">
            <summary>
            Gets the battery volts.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BatteryState.IsCharging">
            <summary>
            Gets a value indicating whether the robot is charging.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BatteryState.IsOnChargerPlatform">
            <summary>
            Gets a value indicating whether the robot is on charger platform.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BatteryState.SuggestedChargerSec">
            <summary>
            Gets the suggested charger time in seconds.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BatteryState.CubeBattery">
            <summary>
            Gets the cube battery state.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.BatteryState.#ctor(Anki.Vector.ExternalInterface.BatteryStateResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.BatteryState"/> class.
            </summary>
            <param name="batteryStateResponse">The battery state response.</param>
        </member>
        <member name="T:Anki.Vector.Types.BehaviorResult">
            <summary>
            Result from the behavior methods
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BehaviorResult.StatusCode">
            <summary>
            Gets the status code.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.BehaviorResult.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.BehaviorResult.#ctor(Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode,Anki.Vector.ExternalInterface.BehaviorResults)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.BehaviorResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="results">The results.</param>
        </member>
        <member name="T:Anki.Vector.Types.BehaviorResultCode">
            <summary>
            The result of a behavior
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.BehaviorResultCodeExtensions.Convert(Anki.Vector.ExternalInterface.BehaviorResults)">
            <summary>
            Converts from Robot result code to SDK result code
            </summary>
            <param name="results">The behavior results.</param>
            <returns>Converted result</returns>
        </member>
        <member name="T:Anki.Vector.Types.ButtonWakeWord">
            <summary>
            The service that responds when clicking Vector's back button
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.ButtonWakeWord.HeyVector">
            <summary>The button triggers Hey Vector.</summary>
        </member>
        <member name="F:Anki.Vector.Types.ButtonWakeWord.Alexa">
            <summary>The button triggers Alexa.</summary>
        </member>
        <member name="T:Anki.Vector.Types.Color">
            <summary>
            Extensions for working with robot colors
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.R">
            <summary>
            Gets the red component value of this Color structure.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.G">
            <summary>
            Gets the green component value of this Color structure.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.B">
            <summary>
            Gets the blue component value of this Color structure.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Red">
            <summary>
            Gets the red color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Blue">
            <summary>
            Gets the blue color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Green">
            <summary>
            Gets the green color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Cyan">
            <summary>
            Gets the cyan color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Magenta">
            <summary>
            Gets the magenta color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Yellow">
            <summary>
            Gets the yellow color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.White">
            <summary>
            Gets the white color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Color.Black">
            <summary>
            Gets the black/off color
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Color"/> struct.
            </summary>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
        </member>
        <member name="M:Anki.Vector.Types.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.Equals(Anki.Vector.Types.Color)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.op_Equality(Anki.Vector.Types.Color,Anki.Vector.Types.Color)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.op_Inequality(Anki.Vector.Types.Color,Anki.Vector.Types.Color)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a color from RGB values
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <returns>Color instance</returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.ToRobotColor">
            <summary>
            Converts to robot color.
            </summary>
            <returns>The color in RGBA</returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.To565">
            <summary>
            Converts to 565 format.
            </summary>
            <returns>565 16bit value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Color.ToBytePair">
            <summary>
            Converts to 565 bytepair.
            </summary>
            <returns>Pair of 565 bytes</returns>
        </member>
        <member name="T:Anki.Vector.Types.ColorProfile">
            <summary>
            Applies transforms to make Vector’s lights and colors appear as intended, by limiting maximum channel intensity.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ColorProfile.RedMultiplier">
            <summary>
            Gets the multiplier used on the red channel.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ColorProfile.GreenMultiplier">
            <summary>
            Gets the multiplier used on the green channel.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ColorProfile.BlueMultiplier">
            <summary>
            Gets the multiplier used on the blue channel.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ColorProfile.WhiteBalancedCubeProfile">
            <summary>
            Gets the color profile balanced so that a max color value more closely resembles pure white.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ColorProfile.MaxProfile">
            <summary>
            Gets the color profile to get the maximum possible brightness out of each LED.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.ColorProfile"/> struct.
            </summary>
            <param name="redMultiplier">The red multiplier.</param>
            <param name="greenMultiplier">The green multiplier.</param>
            <param name="blueMultiplier">The blue multiplier.</param>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.AugmentColor(Anki.Vector.Types.Color)">
            <summary>
            Augments the color using the color profile
            </summary>
            <param name="originalColor">Color of the original.</param>
            <returns>The augmented color instance</returns>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.Equals(Anki.Vector.Types.ColorProfile)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.op_Equality(Anki.Vector.Types.ColorProfile,Anki.Vector.Types.ColorProfile)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ColorProfile.op_Inequality(Anki.Vector.Types.ColorProfile,Anki.Vector.Types.ColorProfile)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.CubeBatteryLevel">
            <summary>
            Cube battery level
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CubeBatteryLevel.Low">
            <summary>1.1V or less.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CubeBatteryLevel.Normal">
            <summary>Normal operating levels.</summary>
        </member>
        <member name="T:Anki.Vector.Types.CubeBatteryState">
            <summary>
             The state of the cube battery.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.CubeBatteryState.BatteryLevel">
            <summary>
            Gets the battery level.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.CubeBatteryState.BatteryVolts">
            <summary>
            Gets the battery volts.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.CubeBatteryState.FactoryId">
            <summary>
            Gets the factory identifier of the cube.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.CubeBatteryState.TimeSinceLastReadingSec">
            <summary>
            Gets the time since last reading in seconds.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.CubeBatteryState.#ctor(Anki.Vector.ExternalInterface.CubeBattery)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.CubeBatteryState"/> class.
            </summary>
            <param name="cubeBattery">The cube battery.</param>
        </member>
        <member name="T:Anki.Vector.Types.CustomObjectMarker">
            <summary>
            Defines all available custom object markers.
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.Undefined">
            <summary>
            The marker is not defined
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerCircles2">
            <summary>
            The custom marker circles2.  Images/SDK_2Circles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerCircles3">
            <summary>
            The custom marker circles3.  Images/SDK_3Circles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerCircles4">
            <summary>
            The custom marker circles4.  Images/SDK_4Circles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerCircles5">
            <summary>
            The custom marker circles5.  Images/SDK_5Circles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerDiamonds2">
            <summary>
            The custom marker diamonds2.  Images/SDK_2Diamonds.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerDiamonds3">
            <summary>
            The custom marker diamonds3.  Images/SDK_3Diamonds.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerDiamonds4">
            <summary>
            The custom marker diamonds4.  Images/SDK_4Diamonds.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerDiamonds5">
            <summary>
            The custom marker diamonds5.  Images/SDK_5Diamonds.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerHexagons2">
            <summary>
            The custom marker hexagons2.  Images/SDK_2Hexagons.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerHexagons3">
            <summary>
            The custom marker hexagons3.  Images/SDK_3Hexagons.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerHexagons4">
            <summary>
            The custom marker hexagons4.  Images/SDK_4Hexagons.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerHexagons5">
            <summary>
            The custom marker hexagons5.  Images/SDK_5Hexagons.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerTriangles2">
            <summary>
            The custom marker triangles2.  Images/SDK_2Triangles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerTriangles3">
            <summary>
            The custom marker triangles3.  Images/SDK_3Triangles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerTriangles4">
            <summary>
            The custom marker triangles4.  Images/SDK_4Triangles.png
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectMarker.CustomMarkerTriangles5">
            <summary>
            The custom marker triangles5.  Images/SDK_5Triangles.png
            </summary>
        </member>
        <member name="T:Anki.Vector.Types.CustomObjectMarkerExtensions">
            <summary>
            Convert custom object marker to robot marker
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.CustomObjectMarkerExtensions.ToRobotMarker(Anki.Vector.Types.CustomObjectMarker)">
            <summary>
            Converts to robot marker.
            </summary>
            <param name="customObjectMarker">The custom object marker.</param>
            <returns>Robot custom object marker</returns>
        </member>
        <member name="T:Anki.Vector.Types.CustomObjectType">
            <summary>
            Custom object type.
            <para>Vector has 20 slots for custom object types.  You can define a <see cref="T:Anki.Vector.ExternalInterface.CustomBoxDefinition"/>, <see cref="T:Anki.Vector.ExternalInterface.CustomCubeDefinition"/>, or <see cref="T:Anki.Vector.ExternalInterface.CustomWallDefinition"/> 
            in these slots and Vector will recognize objects of those types.</para>
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.None">
            <summary>Not a custom object type.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type1">
            <summary>Custom object type #1.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type2">
            <summary>Custom object type #2.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type3">
            <summary>Custom object type #3.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type4">
            <summary>Custom object type #4.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type5">
            <summary>Custom object type #5.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type6">
            <summary>Custom object type #6.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type7">
            <summary>Custom object type #7.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type8">
            <summary>Custom object type #8.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type9">
            <summary>Custom object type #9.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type10">
            <summary>Custom object type #10.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type11">
            <summary>Custom object type #11.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type12">
            <summary>Custom object type #12.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type13">
            <summary>Custom object type #13.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type14">
            <summary>Custom object type #14.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type15">
            <summary>Custom object type #15.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type16">
            <summary>Custom object type #16.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type17">
            <summary>Custom object type #17.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type18">
            <summary>Custom object type #18.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type19">
            <summary>Custom object type #19.</summary>
        </member>
        <member name="F:Anki.Vector.Types.CustomObjectType.Type20">
            <summary>Custom object type #20.</summary>
        </member>
        <member name="T:Anki.Vector.Types.CustomObjectTypeExtensions">
            <summary>
            Convert custom object type to robot type
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.CustomObjectTypeExtensions.ToRobotType(Anki.Vector.Types.CustomObjectType)">
            <summary>
            Converts to robot type.
            </summary>
            <param name="customObjectType">Type of the custom object.</param>
            <returns>Robot custom object type</returns>
        </member>
        <member name="T:Anki.Vector.Types.EyeColor">
            <summary>
            Vector's eye color setting
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.TipOverTeal">
            <summary>Teal</summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.OverfitOrange">
            <summary>Orange</summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.UncannyYellow">
            <summary>Yellow</summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.NonLinearLime">
            <summary>Lime</summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.SingularitySapphire">
            <summary>Sapphire</summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.FalsePositivePurple">
            <summary>Purple</summary>
        </member>
        <member name="F:Anki.Vector.Types.EyeColor.ConfusionMatrixGreen">
            <summary>Green</summary>
        </member>
        <member name="T:Anki.Vector.Types.IAnimation">
            <summary>
            Interface for animation and animation triggers
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.IAnimation.Name">
            <summary>
            Gets the name of the animation or trigger
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.IAnimation.FriendlyName">
            <summary>
            Gets the friendly name of the animation or trigger
            </summary>
        </member>
        <member name="T:Anki.Vector.Types.ImageEncoding">
            <summary>
            The image encoding
            </summary>
        </member>
        <member name="T:Anki.Vector.Types.ImageRect">
            <summary>
            Image coordinates and size
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:Anki.Vector.Types.ImageRect.X">
            <summary>
            Gets the top left x value of where the object was last visible within Vector’s camera view.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ImageRect.Y">
            <summary>
            Gets the top left y value of where the object was last visible within Vector’s camera view..
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ImageRect.Width">
            <summary>
            Gets the width of the object from when it was last visible within Vector’s camera view..
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.ImageRect.Height">
            <summary>
            Gets the height of the object from when it was last visible within Vector’s camera view.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.#ctor(Anki.Vector.ExternalInterface.CladRect)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.ImageRect"/> class.
            </summary>
            <param name="cladRect">The robot rectangle object.</param>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.Equals(Anki.Vector.Types.ImageRect)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.op_Equality(Anki.Vector.Types.ImageRect,Anki.Vector.Types.ImageRect)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.op_Inequality(Anki.Vector.Types.ImageRect,Anki.Vector.Types.ImageRect)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.ImageRect.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.KnownFace">
            <summary>
            A face that Vector has detected.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.FaceId">
            <summary>
            Gets the internal ID assigned to the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.Name">
            <summary>
            Gets the name Vector has associated with the face.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.SecondsSinceFirstEnrolled">
            <summary>
            Gets the seconds since face was first enrolled.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.SecondsSinceLastSeen">
            <summary>
            Gets the seconds since face was last seen.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.SecondsSinceLastUpdated">
            <summary>
            Gets the seconds since face was last updated.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.FirstEnrolled">
            <summary>
            Gets the first enrolled.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.LastSeen">
            <summary>
            Gets the last seen.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.LastUpdated">
            <summary>
            Gets the last updated.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.KnownFace.LastSeenTimestamp">
            <summary>
            Gets the last seen timestamp.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.KnownFace.#ctor(Anki.Vector.ExternalInterface.LoadedKnownFace)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.KnownFace"/> class.
            </summary>
            <param name="knownFace">The known face.</param>
        </member>
        <member name="T:Anki.Vector.Types.LatestAttentionTransfer">
            <summary>
            Vector attention transfer info event args
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.LatestAttentionTransfer.Reason">
            <summary>
            Gets the reason that the attention was changed.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.LatestAttentionTransfer.SecondsAgo">
            <summary>
            Gets how long ago the attention was changed.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.LatestAttentionTransfer.#ctor(Anki.Vector.ExternalInterface.LatestAttentionTransfer)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.LatestAttentionTransfer"/> class.
            </summary>
            <param name="attentionTransfer">The attention transfer information.</param>
        </member>
        <member name="M:Anki.Vector.Types.LatestAttentionTransfer.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Light">
            <summary>
            Lights are used with Vector's Cube.
            <para>Lights may either be "on" or "off", though in practice any colors may be assigned to either state (including no color/light).</para>
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Light.OnColor">
            <summary>
            Gets or sets the color shown when the light is on.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Light.OffColor">
            <summary>
            Gets or sets the color shown when the light is off.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Light.OnPeriodMs">
            <summary>
            Gets or sets the number of milliseconds the light should be "on" for for each cycle.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Light.OffPeriodMs">
            <summary>
            Gets or sets the number of milliseconds the light should be "off" for for each cycle.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Light.TransitionOnPeriodMs">
            <summary>
            Gets or sets the number of milliseconds to take to transition the light to the on color.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Light.TransitionOffPeriodMs">
            <summary>
            Gets or sets the number of milliseconds to take to transition the light to the off color.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Light"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Light.#ctor(Anki.Vector.Types.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Light"/> class.
            </summary>
            <param name="onColor">Color shown when the light is on.</param>
        </member>
        <member name="M:Anki.Vector.Types.Light.#ctor(Anki.Vector.Types.Color,Anki.Vector.Types.Color,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Light"/> class.
            </summary>
            <param name="onColor">Color shown when the light is on.</param>
            <param name="offColor">Color shown when the light is off.</param>
            <param name="onPeriodMs">The number of milliseconds the light should be "on" for for each cycle.</param>
            <param name="offPeriodMs">The number of milliseconds the light should be "off" for for each cycle.</param>
            <param name="transitionOnPeriodMs">The number of milliseconds to take to transition the light to the on color.</param>
            <param name="transitionOffPeriodMs">The number of milliseconds to take to transition the light to the off color.</param>
        </member>
        <member name="M:Anki.Vector.Types.Light.AddToRequest(Anki.Vector.ExternalInterface.SetCubeLightsRequest,Anki.Vector.Types.ColorProfile)">
            <summary>
            Add this light to the request
            </summary>
            <param name="request">The request.</param>
            <param name="colorProfile">The color profile.</param>
        </member>
        <member name="T:Anki.Vector.Types.Matrix">
            <summary>
            Simplified matrix struct
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.Matrix.data">
            <summary>
            The matrix data
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Matrix"/> struct.
            </summary>
            <param name="rows">The rows.</param>
            <param name="cols">The cols.</param>
        </member>
        <member name="P:Anki.Vector.Types.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:System.Single"/> with the specified row.
            </summary>
            <value>
            The <see cref="T:System.Single"/>.
            </value>
            <param name="row">The row.</param>
            <param name="col">The col.</param>
            <returns>The specified matrix value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Matrix.Equals(Anki.Vector.Types.Matrix)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Matrix.op_Equality(Anki.Vector.Types.Matrix,Anki.Vector.Types.Matrix)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Matrix.op_Inequality(Anki.Vector.Types.Matrix,Anki.Vector.Types.Matrix)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.MotionProfile">
            <summary>
            Tells Vector how to drive when receiving navigation and movement actions such as GoToPose and DockWithCube.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.AccelMmps2">
            <summary>
            Gets or sets the acceleration in mm/s2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.DecelMmps2">
            <summary>
            Gets or sets the deceleration in mm/s2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.DockAccelMmps2">
            <summary>
            Gets or sets the docking acceleration mm/s2.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.DockDecelMmps2">
            <summary>
            Gets or sets the docking deceleration in mm/s2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.DockSpeedMmps">
            <summary>
            Gets or sets the docking speed in mm/s2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.PointTurnAccelRadPerSec2">
            <summary>
            Gets or sets the point turn acceleration in radians/s2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.PointTurnDecelRadPerSec2">
            <summary>
            Gets or sets the point turn deceleration in radians/s2
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.PointTurnSpeedRadPerSec">
            <summary>
            Gets or sets the point turn speed in radians/s
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.ReverseSpeedMmps">
            <summary>
            Gets or sets the reverse speed mm/s
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.SpeedMmps">
            <summary>
            Gets or sets the forward speed in mm/s
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.MotionProfile.IsCustom">
            <summary>
            Gets a value indicating whether this motion profile has been customized
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.MotionProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.MotionProfile"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.MotionProfile.#ctor(Anki.Vector.ExternalInterface.PathMotionProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.MotionProfile"/> class.
            </summary>
            <param name="motionProfile">The motion profile.</param>
        </member>
        <member name="M:Anki.Vector.Types.MotionProfile.SetDefault">
            <summary>
            Sets motion profile back to the default values
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.MotionProfile.ToPathMotionProfile">
            <summary>
            To the robot path motion profile type.
            </summary>
            <returns>Robot PathMotionProfile</returns>
        </member>
        <member name="T:Anki.Vector.Types.NavMapGrid">
            <summary>
            A navigation memory map, stored as a quad-tree.
            </summary>
            <seealso cref="T:Anki.Vector.Types.NavMapGridNode" />
        </member>
        <member name="P:Anki.Vector.Types.NavMapGrid.OriginId">
            <summary>
            Gets the origin identifier
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGrid.#ctor(Anki.Vector.ExternalInterface.NavMapFeedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.NavMapGrid"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="T:Anki.Vector.Types.NavNodeContentType">
            <summary>
            The content types for a <see cref="T:Anki.Vector.Types.NavMapGridNode" />.
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeUnknown">
            <summary>The contents of the node is unknown.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeClearOfObstacle">
            <summary>The node is clear of obstacles, because Vector has seen objects on the other side, but it might contain a cliff. The node will be marked as either <see cref="F:Anki.Vector.Types.NavNodeContentType.NavNodeCliff"/> or <see cref="F:Anki.Vector.Types.NavNodeContentType.NavNodeClearOfCliff"/> once Vector has driven there.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeClearOfCliff">
            <summary>The node is clear of any cliffs (a sharp drop) or obstacles.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeObstacleCube">
            <summary>The node contains a <see cref="T:Anki.Vector.Objects.LightCube"/>.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeObstacleProximity">
            <summary>The node contains a proximity detected obstacle which has not been explored.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeObstacleProximityExplored">
            <summary>The node contains a proximity detected obstacle which has been explored.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeObstacleUnrecognized">
            <summary>The node contains an unrecognized obstacle.</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeCliff">
            <summary>The node contains a cliff (a sharp drop).</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeInterestingEdge">
            <summary>The node contains a visible edge (based on the camera feed).</summary>
        </member>
        <member name="F:Anki.Vector.Types.NavNodeContentType.NavNodeNonInterestingEdge">
            <summary>This entry is undocumented and not currently used</summary>
        </member>
        <member name="T:Anki.Vector.Types.NavMapGridNode">
             <summary>
             A node in the NavMap
             <para>Leaf nodes contain content, all other nodes are split into 4 equally sized children.</para>
             <para>Child node indices are stored in the following X,Y orientation:
            
                +---+----+---+
                | ^ | 2  | 0 |
                +---+----+---+
                | Y | 3  | 1 |
                +---+----+---+
                |   | X->|   |
                +---+----+---+
                
             </para></summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.Depth">
            <summary>
            Gets the depth of this node (i.e. how far down the quad-tree it is).
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.Size">
            <summary>
            Gets the size (width or length) of this square node in mm.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.Center">
            <summary>
            Gets the center of this node.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.Parent">
            <summary>
            Gets the parent of this node. Is null for the root node.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.Content">
            <summary>
            Gets the content type in this node.  Only leaf nodes have content, this is <c>null</c> for all other nodes.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.ColorRgba">
            <summary>
            Gets the color of the node in RGBA.
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.NavMapGridNode.children">
            <summary>
            The child nodes.  Null for leaf nodes and an array of 4 child nodes otherwise.
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.NavMapGridNode.nextChild">
            <summary>
            The next child; used when building to track which branch to follow
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.#ctor(Anki.Vector.ExternalInterface.NavMapInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.NavMapGridNode"/> class.  This is for the root node.
            </summary>
            <param name="navMapInfo">The nav map information.</param>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.#ctor(System.Int32,System.Single,Anki.Vector.Types.Vector3,Anki.Vector.Types.NavMapGridNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.NavMapGridNode"/> class.
            </summary>
            <param name="depth">The depth.</param>
            <param name="size">The size.</param>
            <param name="center">The center.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.ContainsPoint(System.Single,System.Single)">
            <summary>
            Test if the node contains the given x,y coordinates.
            </summary>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <returns>
              <c>true</c> if the node contains point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.GetNode(System.Single,System.Single)">
            <summary>
            Get the node at the given x, y coordinates.
            </summary>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <returns>The smallest node that includes the point.  Will return <c>null</c> if point is outside the map.</returns>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.GetNodeRecursive(System.Single,System.Single)">
            <summary>
            Recursively searches for the node at the given x, y coordinates.
            </summary>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <returns>The smallest node that includes the point.</returns>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.GetContent(System.Single,System.Single)">
            <summary>
            Get the node's content at the given x,y coordinates.
            </summary>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <returns>The content included at that point.  Will be <see cref="F:Anki.Vector.Types.NavNodeContentType.NavNodeUnknown"/> if point is outside the map.</returns>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.HasChildren">
            <summary>
            Gets a value indicating whether this instance has child nodes.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.NavMapGridNode.Children">
            <summary>
            Gets the child nodes of this node
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.NavMapGridNode.AddChild(Anki.Vector.ExternalInterface.NavMapQuadInfo)">
            <summary>
            Add a child node to the quad tree.
            <para>The quad-tree is serialized to a flat list of nodes, we deserialize back to a quad-tree structure here, with the depth of each node indicating where it is placed.</para>
            </summary>
            <param name="quadInfo">The quad information.</param>
            <returns><c>true</c> if parent should use the next child for future AddChild calls.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            quadInfo - NavMapGridNode depth '{quadInfo.Depth}' greater than '{Depth}'.
            or
            quadInfo - NavMapGridNode nextChild '{nextChild}' greater than 3 at depth '{Depth}'.
            </exception>
            <exception cref="T:System.InvalidOperationException">NavMapGridNode clobbering {Content} at depth {Depth} with {quadInfo.Content}</exception>
        </member>
        <member name="T:Anki.Vector.Types.PhotoInfo">
            <summary>
            Store photo information
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.PhotoInfo.PhotoId">
            <summary>
            Gets the photo identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.PhotoInfo.DateTime">
            <summary>
            Gets the photo taken on date and time.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.PhotoInfo.PhotoCopiedToApp">
            <summary>
            Gets a value indicating whether photo was copied to application.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.PhotoInfo.ThumbCopiedToApp">
            <summary>
            Gets a value indicating whether thumb was copied to application.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.PhotoInfo.#ctor(Anki.Vector.ExternalInterface.PhotoInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.PhotoInfo"/> class.
            </summary>
            <param name="photoInfo">The photo information.</param>
        </member>
        <member name="T:Anki.Vector.Types.Point">
            <summary>
            Represents a point.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Point.X">
            <summary>
            Gets the x position 
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Point.Y">
            <summary>
            Gets the y position 
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Point.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Point"/> struct.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
        </member>
        <member name="M:Anki.Vector.Types.Point.#ctor(Anki.Vector.ExternalInterface.CladPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Point"/> struct.
            </summary>
            <param name="cladPoint">The clad point.</param>
        </member>
        <member name="M:Anki.Vector.Types.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Point.Equals(Anki.Vector.Types.Point)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Point.op_Equality(Anki.Vector.Types.Point,Anki.Vector.Types.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Point.op_Inequality(Anki.Vector.Types.Point,Anki.Vector.Types.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Point.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Pose">
            <summary>
            Represents where an object is in the world.
            <para>Whenever Vector is delocalized (i.e.whenever Vector no longer knows where he is - e.g.when he's picked up), Vector creates a new pose starting at
            (0,0,0) with no rotation, with origin_id incremented to show that these poses cannot be compared with earlier ones. As Vector drives around, his 
            pose (and the pose of other objects he observes - e.g.faces, his LightCube, charger, etc.) is relative to this initial position and orientation.</para>
            <para>The coordinate space is relative to Vector, where Vector's origin is the  point on the ground between Vector's two front wheels. The X axis is 
            Vector's forward direction, the Y axis is to Vector's left, and the Z axis is up.</para>
            <para>Only poses of the same origin can safely be compared or operated on.</para>
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Pose.Position">
            <summary>
            Gets the position component of this pose.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Pose.Rotation">
            <summary>
            Gets the rotation component of this pose.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Pose.OriginId">
            <summary>
            Gets the origin identifier.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Pose.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Pose"/> class.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Pose.#ctor(Anki.Vector.Types.Position,Anki.Vector.Types.Quaternion,System.Nullable{System.UInt32})">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Pose"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The rotation.</param>
            <param name="originId">The origin identifier.</param>
        </member>
        <member name="P:Anki.Vector.Types.Pose.IsValid">
            <summary>
            Returns true if this Pose is valid.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Pose.IsComparable(Anki.Vector.Types.Pose)">
            <summary>
            Checks whether these two poses are comparable.  Poses are comparable if they have the same origin.
            </summary>
            <param name="other">The other pose to compare against.</param>
            <returns>
              <c>true</c> if the other pose is comparable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.#ctor(Anki.Vector.ExternalInterface.PoseStruct)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Pose"/> class.
            </summary>
            <param name="poseStruct">The pose structure.</param>
        </member>
        <member name="M:Anki.Vector.Types.Pose.RelativeToThis(Anki.Vector.Types.Pose)">
            <summary>
            Creates a new pose such that newPose's origin is now at the location of this pose.
            </summary>
            <param name="newPose">The pose which origin is being changed.</param>
            <returns>A new pose relative to this pose</returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.LocalizeToThis(Anki.Vector.Types.Pose)">
            <summary>
            Creates a new pose such that the origin ID of newPose is the same as the origin of this.
            </summary>
            <param name="newPose">The pose which originId is being changed.</param>
            <returns>A new pose in the same space as this</returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.Equals(Anki.Vector.Types.Pose)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.op_Equality(Anki.Vector.Types.Pose,Anki.Vector.Types.Pose)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.op_Inequality(Anki.Vector.Types.Pose,Anki.Vector.Types.Pose)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.ToPoseStruct">
            <summary>
            Converts to <see cref="T:Anki.Vector.ExternalInterface.PoseStruct" />.
            </summary>
            <returns>
            The Robot <see cref="T:Anki.Vector.ExternalInterface.PoseStruct" /> for this instance
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Pose.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Position">
            <summary>
            Represents the position of an object in the world.  A position consists of its x, y and z values in millimeters.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Position.X">
            <summary>
            Gets the x position in millimeters
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Position.Y">
            <summary>
            Gets the y position in millimeters
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Position.Z">
            <summary>
            Gets the z position in millimeters
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Position.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Position"/> struct.
            </summary>
            <param name="x">The x position in millimeters.</param>
            <param name="y">The y position in millimeters.</param>
            <param name="z">The z position in millimeters.</param>
        </member>
        <member name="M:Anki.Vector.Types.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Position.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Position.Equals(Anki.Vector.Types.Position)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Position.op_Equality(Anki.Vector.Types.Position,Anki.Vector.Types.Position)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Position.op_Inequality(Anki.Vector.Types.Position,Anki.Vector.Types.Position)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Position.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Quaternion">
            <summary>
            Represents the rotation of an object in the world.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Quaternion.Q0">
            <summary>
            Gets the q0 (w) value of the quaternion.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Quaternion.Q1">
            <summary>
            Gets the q1 (i) value of the quaternion.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Quaternion.Q2">
            <summary>
            Gets the q2 (j) value of the quaternion.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Quaternion.Q3">
            <summary>
            Gets the q3 (k) value of the quaternion.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Quaternion"/> struct.
            </summary>
            <param name="q0">The The q0 (w) value of the quaternion.</param>
            <param name="q1">The q1 (i) value of the quaternion..</param>
            <param name="q2">The q2 (j) value of the quaternion..</param>
            <param name="q3">The q3 (k) value of the quaternion..</param>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Quaternion"/> struct.  This function converts an angle in the z axis (Euler angle z component) to a quaternion.
            </summary>
            <param name="radiansZ">angle in the z axis in radians.</param>
        </member>
        <member name="P:Anki.Vector.Types.Quaternion.AngleZ">
            <summary>
            An Angle instance representing the z Euler component of the object's rotation in radians
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.Equals(Anki.Vector.Types.Quaternion)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.op_Equality(Anki.Vector.Types.Quaternion,Anki.Vector.Types.Quaternion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.op_Inequality(Anki.Vector.Types.Quaternion,Anki.Vector.Types.Quaternion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Quaternion.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.RobotLifetimeStats">
            <summary>
            Vector lifetime statistics
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotLifetimeStats.AliveSeconds">
            <summary>
            Gets the number of seconds Vector has been alive.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotLifetimeStats.ReactedToTriggerWord">
            <summary>
            Gets the number of times Vector reacted to the trigger word (Hey Vector).
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotLifetimeStats.UtilitiesUsed">
            <summary>
            Gets the number of utilities used.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotLifetimeStats.DistanceDriven">
            <summary>
            Gets the distance driven as millions of centimeters.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotLifetimeStats.PettingDuration">
            <summary>
            Gets the duration of the petting in milliseconds.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotLifetimeStats.LifetimeSensoryScore">
            <summary>
            Gets the lifetime sensory score.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.RobotLifetimeStats.FromNamedJdoc(Anki.Vector.ExternalInterface.NamedJdoc)">
            <summary>
            Creates <see cref="T:Anki.Vector.ExternalInterface.RobotSetting"/> from a named jdoc (validates the Jdoc).
            </summary>
            <param name="namedJdoc">The named jdoc.</param>
            <returns>The robot lifetime stats instance</returns>
            <exception cref="T:System.ArgumentNullException">namedJdoc</exception>
            <exception cref="T:System.ArgumentException">JDoc Type RobotSettings expected, received {namedJdoc.JdocType} instead. - namedJdoc</exception>
        </member>
        <member name="M:Anki.Vector.Types.RobotLifetimeStats.FromJdoc(Anki.Vector.ExternalInterface.Jdoc)">
            <summary>
            Creates <see cref="T:Anki.Vector.Types.RobotLifetimeStats"/> from a  jdoc.
            </summary>
            <param name="jdoc">The jdoc.</param>
            <returns>The robot lifetime stats instance</returns>
        </member>
        <member name="T:Anki.Vector.Types.RobotSettings">
            <summary>
            THe permanently stored Vector robot settings
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotSettings.Timezones">
            <summary>
            The supported timezones
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotSettings.Locales">
            <summary>
            The supported locales
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.ButtonWakeWord">
            <summary>
            Gets or sets the button wake word.  This is which service (Vector or Alexa) responds when his back button is pressed.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.Clock24Hour">
            <summary>
            Gets or sets a value indicating whether clock is display in 24 hour style.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.TempIsFahrenheit">
            <summary>
            Gets or sets a value indicating whether temperature is displayed in Fahrenheit.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.DefaultLocation">
            <summary>
            Gets or sets the default physical location of Vector (city, state/prov, country).
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.DistIsMetric">
            <summary>
            Gets or sets a value indicating whether distance is displayed in metric.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.Locale">
            <summary>
            Gets or sets the language locale of Vector (en_US, en_UK, en_AU).
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.MasterVolume">
            <summary>
            Gets or sets the master volume.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.TimeZone">
            <summary>
            Gets or sets the time zone as a standard timezone database name (e.g. "America/Los_Angeles")
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.RobotSettings.EyeColor">
            <summary>
            Gets or sets Vector's eye color
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.RobotSettings.FromNamedJdoc(Anki.Vector.ExternalInterface.NamedJdoc)">
            <summary>
            Creates <see cref="T:Anki.Vector.ExternalInterface.RobotSetting"/> from a named jdoc (validates the Jdoc).
            </summary>
            <param name="namedJdoc">The named jdoc.</param>
            <returns>Robot settings instance</returns>
            <exception cref="T:System.ArgumentNullException">namedJdoc</exception>
            <exception cref="T:System.ArgumentException">JDoc Type RobotSettings expected, received {namedJdoc.JdocType} instead. - namedJdoc</exception>
        </member>
        <member name="M:Anki.Vector.Types.RobotSettings.FromJdoc(Anki.Vector.ExternalInterface.Jdoc)">
            <summary>
            Creates <see cref="T:Anki.Vector.ExternalInterface.RobotSetting"/> from a  jdoc.
            </summary>
            <param name="jdoc">The jdoc.</param>
            <returns>Robot settings instance</returns>
        </member>
        <member name="M:Anki.Vector.Types.RobotSettings.ToRobotSettingsConfig">
            <summary>
            Converts to internal <see cref="T:Anki.Vector.ExternalInterface.RobotSettingsConfig"/> value.
            </summary>
            <returns>Robot settings configuration</returns>
        </member>
        <member name="T:Anki.Vector.Types.RobotVolume">
            <summary>
            The permanent settings volume level
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotVolume.Mute">
            <summary>Vector is muted</summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotVolume.Low">
            <summary>Low volume</summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotVolume.MediumLow">
            <summary>Medium low volume</summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotVolume.Medium">
            <summary>Medium volume</summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotVolume.MediumHigh">
            <summary>Medium high volume</summary>
        </member>
        <member name="F:Anki.Vector.Types.RobotVolume.High">
            <summary>High volume</summary>
        </member>
        <member name="T:Anki.Vector.Types.StatusCode">
            <summary>
            Status result 
            </summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.ResponseReceived">
            <summary>Response received</summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.RequestProcessing">
            <summary>Request is processing</summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.Ok">
            <summary>Ok</summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.Forbidden">
            <summary>Forbidden</summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.NotFound">
            <summary>Not found</summary>
        </member>
        <member name="F:Anki.Vector.Types.StatusCode.ErrorUpdateInProgress">
            <summary>Update is in progress</summary>
        </member>
        <member name="T:Anki.Vector.Types.StatusCodeExtensions">
            <summary>
            Extensions for status codes
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.StatusCodeExtensions.EnsureSuccess(Anki.Vector.Types.StatusCode)">
            <summary>
            Ensures that the status code was successful.  If not successful, throws error code.
            </summary>
            <param name="statusCode">The status code.</param>
            <exception cref="T:Anki.Vector.Exceptions.VectorRequestException">Received status code of {statusCode}</exception>
        </member>
        <member name="M:Anki.Vector.Types.StatusCodeExtensions.EnsureSuccess(Anki.Vector.ExternalInterface.ResponseStatus)">
            <summary>
            Ensures that the status code was successful.  If not successful, throws error code.
            </summary>
            <param name="responseStatus">The response status.</param>
        </member>
        <member name="M:Anki.Vector.Types.StatusCodeExtensions.EnsureSuccess(Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode)">
            <summary>
            Ensures that the status code was successful.  If not successful, throws error code.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Anki.Vector.Types.StatusCodeExtensions.Convert(Anki.Vector.ExternalInterface.ResponseStatus.Types.StatusCode)">
            <summary>
            Converts from Robot status code to SDK status code
            </summary>
            <param name="statusCode">The status code.</param>
            <returns>Converted result</returns>
        </member>
        <member name="T:Anki.Vector.Types.Vector2">
            <summary>
            Represents a 2D Vector (type/units aren't specified)
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Vector2.X">
            <summary>
            Gets the x component
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Vector2.Y">
            <summary>
            Gets the y component
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Vector2"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.Equals(Anki.Vector.Types.Vector2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Equality(Anki.Vector.Types.Vector2,Anki.Vector.Types.Vector2)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Inequality(Anki.Vector.Types.Vector2,Anki.Vector.Types.Vector2)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Addition(Anki.Vector.Types.Vector2,Anki.Vector.Types.Vector2)">
            <summary>
            Implements the addition operator.
            </summary>
            <param name="lhs">The left value.</param>
            <param name="rhs">The right value.</param>
            <returns>Sum of 2 instances</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Subtraction(Anki.Vector.Types.Vector2,Anki.Vector.Types.Vector2)">
            <summary>
            Implements the subtraction operator.
            </summary>
            <param name="lhs">The left value.</param>
            <param name="rhs">The right value.</param>
            <returns>Difference of 2 instances</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Multiply(Anki.Vector.Types.Vector2,System.Single)">
            <summary>
            Implements the multiplication operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to multiply by</param>
            <returns>The Vector multiplied by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Multiply(Anki.Vector.Types.Vector2,System.Int32)">
            <summary>
            Implements the multiplication operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to multiply by</param>
            <returns>The Vector multiplied by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Division(Anki.Vector.Types.Vector2,System.Single)">
            <summary>
            Implements the division operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to divide by</param>
            <returns>The Vector divided by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.op_Division(Anki.Vector.Types.Vector2,System.Int32)">
            <summary>
            Implements the division operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to divide by</param>
            <returns>The Vector divided by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector2.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.Vector3">
            <summary>
            Represents a 3D Vector (type/units aren't specified)
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Vector3.X">
            <summary>
            Gets the x component
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Vector3.Y">
            <summary>
            Gets the y component
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Vector3.Z">
            <summary>
            Gets the z component
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.Vector3"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.Equals(Anki.Vector.Types.Vector3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Equality(Anki.Vector.Types.Vector3,Anki.Vector.Types.Vector3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Inequality(Anki.Vector.Types.Vector3,Anki.Vector.Types.Vector3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Anki.Vector.Types.Vector3.Magnitude">
            <summary>
            Gets the magnitude.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.Vector3.Normalized">
            <summary>
            Gets the normalized version of this instance with the same direction and unit magnitude.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.Dot(Anki.Vector.Types.Vector3)">
            <summary>
            Return the dots product of this instance with another Vector3
            </summary>
            <param name="other">The other.</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.Cross(Anki.Vector.Types.Vector3)">
            <summary>
            Return the cross product of this instance with another Vector3
            </summary>
            <param name="other">The other.</param>
            <returns>The cross product</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Addition(Anki.Vector.Types.Vector3,Anki.Vector.Types.Vector3)">
            <summary>
            Implements the addition operator.
            </summary>
            <param name="lhs">The left value.</param>
            <param name="rhs">The right value.</param>
            <returns>Sum of 2 instances</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Subtraction(Anki.Vector.Types.Vector3,Anki.Vector.Types.Vector3)">
            <summary>
            Implements the subtraction operator.
            </summary>
            <param name="lhs">The left value.</param>
            <param name="rhs">The right value.</param>
            <returns>Difference of 2 instances</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Multiply(Anki.Vector.Types.Vector3,System.Single)">
            <summary>
            Implements the multiplication operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to multiply by</param>
            <returns>The Vector multiplied by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Multiply(Anki.Vector.Types.Vector3,System.Int32)">
            <summary>
            Implements the multiplication operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to multiply by</param>
            <returns>The Vector multiplied by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Division(Anki.Vector.Types.Vector3,System.Single)">
            <summary>
            Implements the division operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to divide by</param>
            <returns>The Vector divided by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.op_Division(Anki.Vector.Types.Vector3,System.Int32)">
            <summary>
            Implements the division operator.
            </summary>
            <param name="vector">The Vector.</param>
            <param name="value">The value to divide by</param>
            <returns>The Vector divided by the value</returns>
        </member>
        <member name="M:Anki.Vector.Types.Vector3.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Anki.Vector.Types.VersionState">
            <summary>
            The versioning information for Vector.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.VersionState.EngineBuildId">
            <summary>
            Gets the engine build identifier.
            </summary>
        </member>
        <member name="P:Anki.Vector.Types.VersionState.OsVersion">
            <summary>
            Gets the OS version.
            </summary>
        </member>
        <member name="M:Anki.Vector.Types.VersionState.#ctor(Anki.Vector.ExternalInterface.VersionStateResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.Types.VersionState"/> class.
            </summary>
            <param name="versionStateResponse">The version state response.</param>
        </member>
        <member name="T:Anki.Vector.VisionComponent">
            <summary>
            Utility methods for Vector’s vision
            <para>Vector’s can detect various types of objects through his camera feed.</para>
            </summary>
        </member>
        <member name="P:Anki.Vector.VisionComponent.FaceDetectionEnabled">
            <summary>
            Gets a value indicating whether face detection is enabled
            </summary>
        </member>
        <member name="P:Anki.Vector.VisionComponent.CustomObjectDetectionEnabled">
            <summary>
            Gets a value indicating whether custom object detection is enabled
            </summary>
        </member>
        <member name="P:Anki.Vector.VisionComponent.MirrorModeEnabled">
            <summary>
            Gets a value indicating whether mirror mode is enabled
            </summary>
        </member>
        <member name="P:Anki.Vector.VisionComponent.MotionDetectionEnabled">
            <summary>
            Gets a value indicating whether motion detection is enabled
            </summary>
        </member>
        <member name="M:Anki.Vector.VisionComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.VisionComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.VisionComponent.Events_VisionModesAutoDisabled(System.Object,Anki.Vector.Events.VisionModesAutoDisabledEventArgs)">
            <summary>
            Handles the VisionModesAutoDisabled event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.VisionModesAutoDisabledEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.VisionComponent.Events_MirrorModeDisabled(System.Object,Anki.Vector.Events.MirrorModeDisabledEventArgs)">
            <summary>
            Handles the MirrorModeDisabled event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.MirrorModeDisabledEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.VisionComponent.EnableFaceDetection(System.Boolean)">
            <summary>
            Enable face detection on the robot’s camera
            </summary>
            <param name="estimateEspression">if set to <c>true</c> to estimate expression.</param>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.DisableFaceDetection">
            <summary>
            Disables face detection on the robot’s camera
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.EnableCustomObjectDetection">
            <summary>
            Enables the custom object detection.
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.DisableCustomObjectDetection">
            <summary>
            Disables the custom object detection.
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.EnableMirrorMode">
            <summary>
            Enables display of the robot’s camera feed on its face along with any detections (if enabled)
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.DisableMirrorMode">
            <summary>
            Disables display of the robot’s camera feed on its face along with any detections (if enabled)
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.EnableMotionDetection">
            <summary>
            Enables motion detection (not tested).
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.DisableMotionDetection">
            <summary>
            Disabled motion detection (not tested).
            </summary>
            <returns>A task that represents the asynchronous operation.  The task result contains the result of the operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.DisableAllVisionModes">
            <summary>
            Closes all the running vision modes and waits for a response.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.VisionComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Anki.Vector.WorldComponent">
            <summary>
            Vector’s known view of his world.
            <para>This view includes objects and faces it knows about and can currently see with its camera.</para>
            </summary>
        </member>
        <member name="F:Anki.Vector.WorldComponent.objects">
            <summary>
            The collection of objects in the world
            </summary>
        </member>
        <member name="F:Anki.Vector.WorldComponent.objectsById">
            <summary>
            The objects tracked by the world
            </summary>
        </member>
        <member name="F:Anki.Vector.WorldComponent.facesById">
            <summary>
            The tracked faces
            </summary>
        </member>
        <member name="F:Anki.Vector.WorldComponent.customObjectArchetypes">
            <summary>
            The custom object archetypes
            </summary>
        </member>
        <member name="F:Anki.Vector.WorldComponent.objectsReadOnly">
            <summary>
            A read only collection of objects in the world (lazily created)
            </summary>
        </member>
        <member name="F:Anki.Vector.WorldComponent.ObjectVisibilityTimeout">
            <summary>
            The object visibility timeout in milliseconds
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectEvent">
            <summary>
            Occurs when object event occurs.
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectAdded">
            <summary>
            Occurs when a new object is added to the world.  This will occur only once when a new object is first visually identified by the robot.  From then on
            the object will be available in the Objects collection.
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectAppeared">
            <summary>
            Triggered whenever an object is first visually identified by a robot.
            <para>This differs from <see cref="E:Anki.Vector.WorldComponent.ObjectObserved"/> in that it’s only triggered when an object initially becomes visible.  If it disappears for more than <see cref="F:Anki.Vector.WorldComponent.ObjectVisibilityTimeout"/> milliseconds 
            and then is seen again, a <see cref="E:Anki.Vector.WorldComponent.ObjectDisappeared"/> will be dispatched, followed by another <see cref="E:Anki.Vector.WorldComponent.ObjectAppeared"/> event.</para>
            <para>For continuous tracking information about a visible object, see <see cref="E:Anki.Vector.WorldComponent.ObjectObserved"/>.</para>
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectDisappeared">
            <summary>
            Triggered whenever an object that was previously being observed is no longer visible.
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectObserved">
            <summary>
            Triggered whenever an object is visually identified by the robot.
            <para>A stream of these events are produced while an object is visible to the robot.Each event has an updated image_box field.
            See <see cref="E:Anki.Vector.WorldComponent.ObjectAppeared"/> if you only want to know when an object first becomes visible.</para>
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectConnected">
            <summary>
            Triggered when the robot connects to the light cube.
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectDisconnected">
            <summary>
            Triggered when the robot disconnects from the light cube
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectMoving">
            <summary>
            Triggered when an object is moved (the light cube)
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectFinishedMoving">
            <summary>
            Triggered when the object has finished moving (the light cube)
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectTapped">
            <summary>
            Triggered when the light cube is tapped
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.ObjectUpAxisChanged">
            <summary>
            Triggered when the light cube's up axis changed.
            </summary>
        </member>
        <member name="E:Anki.Vector.WorldComponent.KnownFaceAppeared">
            <summary>
            Triggered when a known face has appeared
            </summary>
        </member>
        <member name="P:Anki.Vector.WorldComponent.Objects">
            <summary>
            Gets the all objects currently tracked in the world
            </summary>
        </member>
        <member name="P:Anki.Vector.WorldComponent.LightCube">
            <summary>
            Gets the light cube if it has been seen by the robot, otherwise this value is null.
            </summary>
        </member>
        <member name="P:Anki.Vector.WorldComponent.Charger">
            <summary>
            Gets the charger if it has been seen by the robot, otherwise this value is null.
            </summary>
        </member>
        <member name="P:Anki.Vector.WorldComponent.IsCubeConnected">
            <summary>
            Gets a value indicating whether the is cube connected.
            </summary>
        </member>
        <member name="M:Anki.Vector.WorldComponent.GetObjectById(System.Int32)">
            <summary>
            Gets an object by object identifier.
            </summary>
            <param name="objectId">The object identifier.</param>
            <returns>The observable object matching the ID or null</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.GetFaceById(System.Int32)">
            <summary>
            Gets the face by face identifier.
            </summary>
            <param name="faceId">The face identifier.</param>
            <returns>The face matching the ID</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.#ctor(Anki.Vector.Robot)">
            <summary>
            Initializes a new instance of the <see cref="T:Anki.Vector.WorldComponent" /> class.
            </summary>
            <param name="robot">The robot.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.ConnectCube">
            <summary>
            Attempt to connect to a cube.
            <para>If a cube is currently connected, this will do nothing.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.DisconnectCube">
            <summary>
            Requests a disconnection from the currently connected cube.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.FlashCubeLights">
            <summary>
            Flashes the cube lights.
            <para>Plays the default cube connection animation on the currently connected cube's lights.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.ForgetPreferredCube">
            <summary>
            Forgets the preferred cube.
            <para>'Forget' the robot's preferred cube. This will cause the robot to connect to the cube with the highest RSSI(signal strength) next time a connection is requested.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.CubesAvailable">
            <summary>
            Returns the Factory Ids of all available cubes.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the factory id's of available cubes.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.DefineCustomObject(Anki.Vector.Types.CustomObjectType,Anki.Vector.Objects.CustomObjectArchetype,System.Boolean)">
            <summary>
            Defines the custom object with the provided object definition.
            <para>The robot will now detect the markers associated with this object and raise an <see cref="E:Anki.Vector.WorldComponent.ObjectObserved"/> event when they are seen.  There are 
            20 custom object types that can be defined.</para>
            </summary>
            <param name="customObjectType">The object type you are binding this custom object definition to.</param>
            <param name="archetype">The custom object archetype (definition).</param>
            <param name="isUnique">If True, the robot will assume there is only 1 of this object. (and therefore only 1 of each of any of these markers) in the world.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">customObjectType - Custom object type cannot be 'None'</exception>
            <exception cref="T:System.ArgumentException">Specified Custom object definition is not supported - definition</exception>
        </member>
        <member name="M:Anki.Vector.WorldComponent.CreateFixedCustomObject(Anki.Vector.Types.Pose,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Defines a cuboid of custom size and places it in the world. It cannot be observed.
            </summary>
            <param name="pose">The pose of the object to create.</param>
            <param name="xSizeMm">The size of the object (in millimeters) in the x axis.</param>
            <param name="ySizeMm">The size of the object (in millimeters) in the y axis.</param>
            <param name="zSizeMm">The size of the object (in millimeters) in the z axis.</param>
            <param name="relativeToRobot">Whether or not the pose given assumes the robot's pose as its origin.</param>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.DeleteCustomObjectArchetypes">
            <summary>
            Causes the robot to forget all the custom defined object archetypes.
            <para>The custom objects need to be deleted from Vector before calling this method to ensure none of the archetypes are in use.</para>
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot delete archetypes because custom objects are in use.  Delete all custom objects first.</exception>
        </member>
        <member name="M:Anki.Vector.WorldComponent.DeleteCustomObjects">
            <summary>
            Causes the robot to forget about all the custom objects it currently knows about.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.DeleteFixedCustomObjects">
            <summary>
            Causes the robot to forget about all the fixed custom objects it currently knows about.
            </summary>
            <returns>A task that represents the asynchronous operation; the task result contains the result from the robot.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Teardown(System.Boolean)">
            <summary>
            Called when disconnecting
            </summary>
            <param name="forced">if set to <c>true</c> the shutdown is forced due to lost connection.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObservedFace(System.Object,Anki.Vector.Events.RobotObservedFaceEventArgs)">
            <summary>
            Handles the ObservedFace event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedFaceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObservedObject(System.Object,Anki.Vector.Events.RobotObservedObjectEventArgs)">
            <summary>
            Handles the RobotObservedObject event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObservedObjectEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.OnObjectDisappeared(Anki.Vector.Objects.ObservableObject)">
            <summary>
            Called when object has disappeared.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.ObjectFactory(Anki.Vector.Objects.ObjectType,Anki.Vector.Types.CustomObjectType,System.Int32)">
            <summary>
            Object factory
            </summary>
            <param name="objectType">The object type.</param>
            <param name="customObjectType">Type of the custom object, if applicable.</param>
            <param name="objectId">The object identifier.</param>
            <returns>New observable object of the type related to <see cref="T:Anki.Vector.Objects.ObjectType" /></returns>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObjectConnectionState(System.Object,Anki.Vector.Events.RobotObjectConnectionStateEventArgs)">
            <summary>
            Handles the ObjectConnectionState event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectConnectionStateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObjectMoved(System.Object,Anki.Vector.Events.RobotObjectMovedEventArgs)">
            <summary>
            Handles the ObjectMoved event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectMovedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObjectStoppedMoving(System.Object,Anki.Vector.Events.RobotObjectStoppedMovingEventArgs)">
            <summary>
            Handles the ObjectStoppedMoving event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectStoppedMovingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObjectUpAxisChanged(System.Object,Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs)">
            <summary>
            Handles the ObjectUpAxisChanged event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectUpAxisChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ObjectTapped(System.Object,Anki.Vector.Events.RobotObjectTappedEventArgs)">
            <summary>
            Handles the ObjectTapped event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotObjectTappedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.Events_ChangedObservedFaceId(System.Object,Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs)">
            <summary>
            Handles the ChangedObservedFaceId event of the Events control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Anki.Vector.Events.RobotChangedObservedFaceIdEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.InitLightCubeEvent(System.Int32)">
            <summary>
            If a light cube event is triggered, this creates the light cube object and adds it to the world
            if it doesn't already exist.
            </summary>
            <param name="lightCubeObjectId">The light cube object identifier.</param>
        </member>
        <member name="M:Anki.Vector.WorldComponent.RaiseObjectEvents``1(System.EventHandler{``0},``0)">
            <summary>
            Raises the <see cref="E:Anki.Vector.WorldComponent.ObjectEvent"/> event and then the specified event handler
            </summary>
            <typeparam name="T">Event args type</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
    </members>
</doc>
